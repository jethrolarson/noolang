# Noolang Standard Library
# This file defines the global default environment that's automatically loaded

# ========================================
# TYPE CONSTRAINTS
# ========================================

# Constraint for showing a type
constraint Show a (
  show : a -> String
);

# Constraint for addition operation (supports numbers and strings)
constraint Add a (
  add : a -> a -> a
);

# Constraint for subtraction operation
constraint Sub a (
  subtract : a -> a -> a
);

# Constraint for multiplication operation
constraint Mul a (
  multiply : a -> a -> a
);

# Constraint for modulus operation
constraint Modulus a (
  modulus : a -> a -> a
);

# Constraint for division operation (returns Option for safety)
constraint Div a (
  divide : a -> a -> Option Float
);

# Basic Show implementations (must come before conditional implementations)
implement Show Float (
  show = fn f => toString f
);

implement Show String (
  show = fn s => s
);

# Add trait implementations for built-in types
implement Add Float (
  add = primitive_float_add
);

implement Add String (
  add = primitive_string_concat
);

# Numeric operation implementations for Float
implement Sub Float (
  subtract = primitive_float_subtract
);

implement Mul Float (
  multiply = primitive_float_multiply
);

implement Div Float (
  divide = primitive_float_divide
);

implement Modulus Float (
  modulus = primitive_float_modulus
);

# Constraint for monads
constraint Monad m ( 
  bind : m a -> (a -> m b) -> m b; 
  pure : a -> m a 
);

# Constraint for functors
constraint Functor f ( 
  map : (a -> b) -> f a -> f b
);

constraint Eq a ( 
  equals : a -> a -> Bool 
);

constraint Applicative f ( 
  apply : f (a -> b) -> f a -> f b 
);

# ========================================
# UTILITY FUNCTIONS
# ========================================

# Identity function
id = fn x => x;

# ========================================
# CORE ALGEBRAIC DATA TYPES
# ========================================

# ========================================
# BOOLEAN TYPE
# ========================================

type Bool = True | False;

# Boolean negation
not = fn b => match b with (True => False; False => True);

implement Show Bool (
  show = fn b => match b with (
    True => "True";
    False => "False"
  )
);

implement Eq Bool (
  equals = fn a b => match a with (
    True => b;
    False => not b
  )
)

# ========================================
# OPTION TYPE
# ========================================

type Option a = Some a | None;

implement Show (Option a) given a implements Show (
  show = fn opt => match opt with (
    Some x => concat "Some(" (concat (show x) ")");
    None => "None"
  )
);

option_get_or = fn default opt => match opt with (
  Some value => value;
  None => default
);

# Map over Option (using Monad constraint)
implement Monad Option (
  bind = fn opt f => match opt with (
    Some x => (
      result = f x;
      match result with (
        Some y => result;
        None => result;
        _ => Some result  # Auto-wrap non-Option values
      )
    );
    None => None
  );
  pure = fn x => Some x
);

implement Functor Option (
  map = fn f opt => match opt with (
    Some x => Some (f x);
    None => None
  )
);

#implement Eq Option (
#  equals = fn opt1 opt2 => match opt1 with (
#    Some x => match opt2 with (
#      Some y => equals x y;
#      None => False
#    );
#    None => match opt2 with (   
#      Some y => False;
#      None => True
#    )
#  )
#);

implement Applicative Option (
  apply = fn f opt => match opt with (
    Some x => f x;
    None => None
  )
);

# ========================================
# RESULT TYPE
# ========================================

# Result type for error handling  
type Result a b = Ok a | Err b;

implement Show Result (
  show = fn res => match res with (
    Ok x => concat "Ok(" (concat (show x) ")");
    Err e => concat "Err(" (concat (show e) ")")
  )
);

# Extract value from Result with default for errors
result_get_or = fn default res => match res with (
  Ok value => value;
  Err error => default
);

# Map over Result value (using Monad constraint) 
implement Monad Result (
  bind = fn res f => match res with (
    Ok x => (
      result = f x;
      match result with (
        Ok y => result;
        Err e => result;
        _ => Ok result  # Auto-wrap non-Result values
      )
    );
    Err e => Err e
  );
  pure = fn x => Ok x
);

implement Functor Result (
  map = fn f res => match res with (
    Ok x => Ok (f x);
    Err e => Err e
  )
);

#implement Eq Result (
#  equals = fn res1 res2 => match res1 with (
#    Ok x => match res2 with (
#      Ok y => equals x y;
#      Err e => False
#    );
#
#    Err e => match res2 with (
#      Ok y => False;
#      Err e => equals e e
#    )
#  )
#);

implement Applicative Result (
  apply = fn f res => match res with (
    Ok x => f x;
    Err e => Err e
  )
);


# ========================================
# LIST OPERATIONS
# ========================================

# Safe head function - returns Option instead of throwing
head = fn list => if (length list) == 0 
  then None 
  else list_get 0 list;

# Join list elements with a separator
# Example: join ", " [1, 2, 3] -> "1, 2, 3"
join = fn separator list =>
  reduce (fn acc x => if acc == "" then x else concat acc (concat separator x)) "" list;

implement Functor List (
  map = fn f list => list_map f list
);

implement Monad List (
  bind = fn list f => reduce (fn acc x => append acc (f x)) [] list;
  pure = fn x => [x]
);

implement Add List (
  add = fn list1 list2 => append list1 list2
);

# Implement Show for Lists (if elements are showable)
implement Show (List a) given a implements Show (
  show = fn list => concat "[" (concat (join ", " (list_map show list)) "]")
);

# ========================================
# Constraint implementations for basic types
# ========================================

# Note: Eq implementations are handled by built-in primitive functions
# No need to duplicate them here
