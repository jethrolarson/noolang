{
  "name": "Noolang",
  "scopeName": "source.noolang",
  "fileTypes": ["noo"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#data-structures"
    },
    {
      "include": "#accessors"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#control-flow"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.noolang",
          "match": "#.*$"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.noolang",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.noolang",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.noolang",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.numeric.float.noolang",
          "match": "\\b\\d+\\.\\d+\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.noolang",
          "match": "\\b(if|then|else|fn|mut|mut!|import|where|unit)\\b"
        },
        {
          "name": "constant.language.noolang",
          "match": "\\b(true|false|null)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.noolang",
          "match": "\\b(\\+|\\-|\\*|/)\\b"
        },
        {
          "name": "keyword.operator.comparison.noolang",
          "match": "\\b(==|!=|<|>|<=|>=)\\b"
        },
        {
          "name": "keyword.operator.pipeline.noolang",
          "match": "\\b(\\|>|\\||\\$|<\\|)\\b"
        },
        {
          "name": "keyword.operator.assignment.noolang",
          "match": "="
        },
        {
          "name": "keyword.operator.sequence.noolang",
          "match": ";"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.definition.noolang",
          "begin": "\\b(fn)\\b\\s+",
          "end": "\\s*=>",
          "beginCaptures": {
            "1": { "name": "keyword.control.function.noolang" }
          },
          "endCaptures": {
            "0": { "name": "keyword.operator.arrow.noolang" }
          },
          "patterns": [
            {
              "name": "variable.parameter.function.noolang",
              "match": "\\b\\w+\\b"
            }
          ]
        },
        {
          "name": "meta.function.application.noolang",
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            {
              "include": "#variables"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#data-structures"
            }
          ]
        }
      ]
    },
    "data-structures": {
      "patterns": [
        {
          "name": "meta.structure.list.noolang",
          "begin": "\\[",
          "end": "\\]",
          "patterns": [
            {
              "include": "#variables"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#data-structures"
            },
            {
              "name": "keyword.operator.separator.noolang",
              "match": ";"
            }
          ]
        },
        {
          "name": "meta.structure.record.noolang",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "name": "meta.field.record.noolang",
              "begin": "(@\\w+)\\s+",
              "end": "(?=;|\\})",
              "beginCaptures": {
                "1": { "name": "entity.name.tag.field.noolang" }
              },
              "patterns": [
                {
                  "include": "#variables"
                },
                {
                  "include": "#numbers"
                },
                {
                  "include": "#strings"
                },
                {
                  "include": "#data-structures"
                },
                {
                  "include": "#functions"
                }
              ]
            },
            {
              "name": "keyword.operator.separator.noolang",
              "match": ";"
            }
          ]
        },
        {
          "name": "meta.structure.tuple.noolang",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "include": "#variables"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#data-structures"
            },
            {
              "name": "keyword.operator.separator.noolang",
              "match": ";"
            }
          ]
        }
      ]
    },
    "accessors": {
      "patterns": [
        {
          "name": "meta.accessor.noolang",
          "match": "(@\\w+)",
          "captures": {
            "1": { "name": "entity.name.tag.accessor.noolang" }
          }
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.noolang",
          "match": "\\b\\w+\\b"
        }
      ]
    },
    "control-flow": {
      "patterns": [
        {
          "name": "meta.conditional.noolang",
          "begin": "\\b(if)\\b\\s+",
          "end": "\\b(else)\\b",
          "beginCaptures": {
            "1": { "name": "keyword.control.conditional.noolang" }
          },
          "endCaptures": {
            "1": { "name": "keyword.control.conditional.noolang" }
          },
          "patterns": [
            {
              "include": "#variables"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#strings"
            }
          ]
        }
      ]
    }
  }
}
