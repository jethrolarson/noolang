# Curried addition
add = fn x => fn y => x + y;
add2 = add 2;
add2_3 = add2 3;
add_2_3 = add 2 3;
add_2__3 = (add 2) 3;
add__2_3 = add (2 3); # should fail, 2 is not a function

# Curried multiplication
mul = fn x => fn y => x * y;
mul2 = mul 2;
mul2_3 = mul2 3;
mul_2_3 = mul 2 3;
mul_2__3 = (mul 2) 3;
mul__2_3 = mul (2 3); # should fail

# Recursive curried power
pow = fn x => fn y => if y == 0 then 1 else x * (pow x (y - 1));
pow2 = pow 2;
pow2_8 = pow2 8;
pow_2_8 = pow 2 8;
pow_2__8 = (pow 2) 8;
pow__2_8 = pow (2 8); # should fail

# Results
result_add2_3 = add2_3; # expect 5
result_add_2_3 = add_2_3; # expect 5
result_add_2__3 = add_2__3; # expect 5

result_mul2_3 = mul2_3; # expect 6
result_mul_2_3 = mul_2_3; # expect 6
result_mul_2__3 = mul_2__3; # expect 6

result_pow2_8 = pow2_8; # expect 256
result_pow_2_8 = pow_2_8; # expect 256
result_pow_2__8 = pow_2__8; # expect 256 