81408f80069de3b57dd9d00b68e4f28e
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanSubstitutions = exports.createTypeState = exports.loadStdlib = exports.flattenStatements = exports.freshenTypeVariables = exports.instantiate = exports.generalize = exports.freeTypeVarsEnv = exports.freeTypeVars = exports.freshTypeVariable = void 0;
const fs = __importStar(require("node:fs"));
const path = __importStar(require("node:path"));
const ast_1 = require("../ast");
const parser_1 = require("../parser/parser");
const lexer_1 = require("../lexer");
const types_1 = require("./types");
const substitute_1 = require("./substitute");
const expression_dispatcher_1 = require("./expression-dispatcher");
const helpers_1 = require("./helpers");
// Fresh type variable generation - optimized to avoid string concatenation
const freshTypeVariable = (state) => {
    const newCounter = state.counter + 1;
    const newType = (0, ast_1.typeVariable)(`Î±${newCounter}`);
    // Avoid spreading the entire state object for better performance
    return [newType, {
            ...state,
            counter: newCounter
        }];
};
exports.freshTypeVariable = freshTypeVariable;
// Collect all free type variables in a type
const freeTypeVars = (type, acc = new Set()) => {
    switch (type.kind) {
        case 'variable':
            acc.add(type.name);
            break;
        case 'function':
            for (const param of type.params)
                (0, exports.freeTypeVars)(param, acc);
            (0, exports.freeTypeVars)(type.return, acc);
            break;
        case 'list':
            (0, exports.freeTypeVars)(type.element, acc);
            break;
        case 'tuple':
            for (const el of type.elements)
                (0, exports.freeTypeVars)(el, acc);
            break;
        case 'record':
            Object.values(type.fields).forEach(v => (0, exports.freeTypeVars)(v, acc));
            break;
        case 'union':
            type.types.forEach(t => (0, exports.freeTypeVars)(t, acc));
            break;
        case 'variant':
            type.args.forEach(arg => (0, exports.freeTypeVars)(arg, acc));
            break;
    }
    return acc;
};
exports.freeTypeVars = freeTypeVars;
// Collect all free type variables in the environment
const freeTypeVarsEnv = (env) => {
    const acc = new Set();
    for (const scheme of env.values()) {
        (0, exports.freeTypeVars)(scheme.type, acc);
    }
    return acc;
};
exports.freeTypeVarsEnv = freeTypeVarsEnv;
// Generalize a type with respect to the environment
const generalize = (type, env, substitution) => {
    // Apply current substitution to the type before generalizing
    const substitutedType = (0, substitute_1.substitute)(type, substitution);
    const typeVars = (0, exports.freeTypeVars)(substitutedType);
    const envVars = (0, exports.freeTypeVarsEnv)(env);
    const quantifiedVars = [];
    for (const varName of typeVars) {
        if (!envVars.has(varName)) {
            quantifiedVars.push(varName);
        }
    }
    return { type: substitutedType, quantifiedVars };
};
exports.generalize = generalize;
// Instantiate a type scheme by freshening all quantified variables (threading state)
const instantiate = (scheme, state) => {
    const mapping = new Map();
    let currentState = state;
    for (const varName of scheme.quantifiedVars) {
        const [freshVar, newState] = (0, exports.freshTypeVariable)(currentState);
        mapping.set(varName, freshVar);
        currentState = newState;
    }
    const [instantiatedType, finalState] = (0, exports.freshenTypeVariables)(scheme.type, mapping, currentState);
    return [instantiatedType, finalState];
};
exports.instantiate = instantiate;
// Replace type variables with fresh ones, threading state
const freshenTypeVariables = (type, mapping = new Map(), state) => {
    switch (type.kind) {
        case 'variable': {
            const freshVar = mapping.get(type.name);
            if (freshVar) {
                // Copy constraints from the original variable to the fresh one
                if (freshVar.kind === 'variable') {
                    freshVar.constraints = freshVar.constraints || [];
                    if (type.constraints) {
                        for (const c of type.constraints) {
                            if (!freshVar.constraints.some(existing => (0, helpers_1.constraintsEqual)(existing, c))) {
                                freshVar.constraints.push(c);
                            }
                        }
                    }
                }
                return [freshVar, state];
            }
            return [type, state];
        }
        case 'function': {
            let currentState = state;
            const newParams = [];
            for (const param of type.params) {
                const [newParam, nextState] = (0, exports.freshenTypeVariables)(param, mapping, currentState);
                newParams.push(newParam);
                currentState = nextState;
            }
            const [newReturn, finalState] = (0, exports.freshenTypeVariables)(type.return, mapping, currentState);
            return [{ ...type, params: newParams, return: newReturn }, finalState];
        }
        case 'list': {
            const [newElem, nextState] = (0, exports.freshenTypeVariables)(type.element, mapping, state);
            return [{ ...type, element: newElem }, nextState];
        }
        case 'tuple': {
            let currentState = state;
            const newElems = [];
            for (const el of type.elements) {
                const [newEl, nextState] = (0, exports.freshenTypeVariables)(el, mapping, currentState);
                newElems.push(newEl);
                currentState = nextState;
            }
            return [{ ...type, elements: newElems }, currentState];
        }
        case 'record': {
            let currentState = state;
            const newFields = {};
            for (const [key, fieldType] of Object.entries(type.fields)) {
                const [newField, nextState] = (0, exports.freshenTypeVariables)(fieldType, mapping, currentState);
                newFields[key] = newField;
                currentState = nextState;
            }
            return [{ ...type, fields: newFields }, currentState];
        }
        case 'union': {
            let currentState = state;
            const newTypes = [];
            for (const t of type.types) {
                const [newType, nextState] = (0, exports.freshenTypeVariables)(t, mapping, currentState);
                newTypes.push(newType);
                currentState = nextState;
            }
            return [{ ...type, types: newTypes }, currentState];
        }
        case 'variant': {
            let currentState = state;
            const newArgs = [];
            for (const arg of type.args) {
                const [newArg, nextState] = (0, exports.freshenTypeVariables)(arg, mapping, currentState);
                newArgs.push(newArg);
                currentState = nextState;
            }
            return [{ ...type, args: newArgs }, currentState];
        }
        default:
            return [type, state];
    }
};
exports.freshenTypeVariables = freshenTypeVariables;
// Helper to flatten semicolon-separated binary expressions into individual statements
const flattenStatements = (expr) => {
    if (expr.kind === 'binary' && expr.operator === ';') {
        return [...(0, exports.flattenStatements)(expr.left), ...(0, exports.flattenStatements)(expr.right)];
    }
    return [expr];
};
exports.flattenStatements = flattenStatements;
// Load standard library from stdlib.noo
const loadStdlib = (state) => {
    try {
        // Find stdlib.noo relative to this file
        const stdlibPath = path.join(__dirname, '..', '..', 'stdlib.noo');
        if (!fs.existsSync(stdlibPath)) {
            console.warn(`Warning: stdlib.noo not found at ${stdlibPath}`);
            return state;
        }
        const stdlibContent = fs.readFileSync(stdlibPath, 'utf-8');
        const lexer = new lexer_1.Lexer(stdlibContent);
        const tokens = lexer.tokenize();
        const stdlibProgram = (0, parser_1.parse)(tokens);
        // Flatten any semicolon-separated statements
        const allStatements = [];
        for (const statement of stdlibProgram.statements) {
            allStatements.push(...(0, exports.flattenStatements)(statement));
        }
        let currentState = state;
        for (const statement of allStatements) {
            const result = (0, expression_dispatcher_1.typeExpression)(statement, currentState);
            currentState = result.state;
        }
        return currentState;
    }
    catch (error) {
        console.warn(`Warning: Failed to load stdlib.noo:`, error);
        return state;
    }
};
exports.loadStdlib = loadStdlib;
// Initialize type state
const createTypeState = () => ({
    environment: new Map(),
    substitution: new Map(),
    counter: 0,
    constraints: [],
    adtRegistry: new Map(),
    accessorCache: new Map(),
    constraintRegistry: (0, types_1.createConstraintRegistry)(),
});
exports.createTypeState = createTypeState;
// Clean substitutions from type state while preserving environment and other state
// This is used in REPL to prevent type pollution between evaluations
const cleanSubstitutions = (state) => ({
    ...state,
    substitution: new Map(), // Clear substitutions but keep environment
    constraints: [], // Clear constraints as well
});
exports.cleanSubstitutions = cleanSubstitutions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,