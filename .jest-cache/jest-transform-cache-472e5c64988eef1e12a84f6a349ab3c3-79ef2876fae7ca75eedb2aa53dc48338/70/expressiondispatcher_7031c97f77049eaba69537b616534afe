c4aa096b3d8a20fc30158957e410a7bb
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeExpression = void 0;
// Type expression dispatcher with proper error handling
const ast_1 = require("../ast");
const types_1 = require("./types");
const type_inference_1 = require("./type-inference");
const function_application_1 = require("./function-application");
const pattern_matching_1 = require("./pattern-matching");
// Main type inference dispatcher
const typeExpression = (expr, state) => {
    switch (expr.kind) {
        case 'literal':
            return (0, type_inference_1.typeLiteral)(expr, state);
        case 'variable':
            return (0, type_inference_1.typeVariableExpr)(expr, state);
        case 'function':
            return (0, type_inference_1.typeFunction)(expr, state);
        case 'application':
            return (0, function_application_1.typeApplication)(expr, state);
        case 'binary':
            return (0, type_inference_1.typeBinary)(expr, state);
        case 'if':
            return (0, type_inference_1.typeIf)(expr, state);
        case 'list':
            return (0, type_inference_1.typeList)(expr, state);
        case 'record':
            return (0, type_inference_1.typeRecord)(expr, state);
        case 'tuple':
            return (0, type_inference_1.typeTuple)(expr, state);
        case 'accessor':
            return (0, type_inference_1.typeAccessor)(expr, state);
        case 'definition':
            return (0, type_inference_1.typeDefinition)(expr, state);
        case 'unit':
            return (0, types_1.createPureTypeResult)((0, ast_1.unitType)(), state);
        case 'type-definition':
            return (0, pattern_matching_1.typeTypeDefinition)(expr, state);
        case 'constraint-definition':
            return (0, type_inference_1.typeConstraintDefinition)(expr, state);
        case 'implement-definition':
            return (0, type_inference_1.typeImplementDefinition)(expr, state);
        case 'match':
            return (0, pattern_matching_1.typeMatch)(expr, state);
        case 'pipeline':
            return (0, function_application_1.typePipeline)(expr, state);
        default:
            throw new Error(`Unknown expression kind: ${expr.kind}`);
    }
};
exports.typeExpression = typeExpression;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL3dvcmtzcGFjZS9zcmMvdHlwZXIvZXhwcmVzc2lvbi1kaXNwYXRjaGVyLnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLHdEQUF3RDtBQUN4RCxnQ0FLZ0I7QUFDaEIsbUNBQXNFO0FBQ3RFLHFEQWEwQjtBQUMxQixpRUFBdUU7QUFDdkUseURBQW1FO0FBRW5FLGlDQUFpQztBQUMxQixNQUFNLGNBQWMsR0FBRyxDQUM3QixJQUFnQixFQUNoQixLQUFnQixFQUNILEVBQUU7SUFDZixRQUFRLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNuQixLQUFLLFNBQVM7WUFDYixPQUFPLElBQUEsNEJBQVcsRUFBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFakMsS0FBSyxVQUFVO1lBQ2QsT0FBTyxJQUFBLGlDQUFnQixFQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV0QyxLQUFLLFVBQVU7WUFDZCxPQUFPLElBQUEsNkJBQVksRUFBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFbEMsS0FBSyxhQUFhO1lBQ2pCLE9BQU8sSUFBQSxzQ0FBZSxFQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVyQyxLQUFLLFFBQVE7WUFDWixPQUFPLElBQUEsMkJBQVUsRUFBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFaEMsS0FBSyxJQUFJO1lBQ1IsT0FBTyxJQUFBLHVCQUFNLEVBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRTVCLEtBQUssTUFBTTtZQUNWLE9BQU8sSUFBQSx5QkFBUSxFQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUU5QixLQUFLLFFBQVE7WUFDWixPQUFPLElBQUEsMkJBQVUsRUFBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFaEMsS0FBSyxPQUFPO1lBQ1gsT0FBTyxJQUFBLDBCQUFTLEVBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRS9CLEtBQUssVUFBVTtZQUNkLE9BQU8sSUFBQSw2QkFBWSxFQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVsQyxLQUFLLFlBQVk7WUFDaEIsT0FBTyxJQUFBLCtCQUFjLEVBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXBDLEtBQUssTUFBTTtZQUNWLE9BQU8sSUFBQSw0QkFBb0IsRUFBQyxJQUFBLGNBQVEsR0FBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRWhELEtBQUssaUJBQWlCO1lBQ3JCLE9BQU8sSUFBQSxxQ0FBa0IsRUFBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEMsS0FBSyx1QkFBdUI7WUFDM0IsT0FBTyxJQUFBLHlDQUF3QixFQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUU5QyxLQUFLLHNCQUFzQjtZQUMxQixPQUFPLElBQUEsd0NBQXVCLEVBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRTdDLEtBQUssT0FBTztZQUNYLE9BQU8sSUFBQSw0QkFBUyxFQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUUvQixLQUFLLFVBQVU7WUFDZCxPQUFPLElBQUEsbUNBQVksRUFBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFbEM7WUFDQyxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE2QixJQUFZLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNwRSxDQUFDO0FBQ0YsQ0FBQyxDQUFDO0FBM0RXLFFBQUEsY0FBYyxrQkEyRHpCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2Uvc3JjL3R5cGVyL2V4cHJlc3Npb24tZGlzcGF0Y2hlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUeXBlIGV4cHJlc3Npb24gZGlzcGF0Y2hlciB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZ1xuaW1wb3J0IHsgXG5cdHR5cGUgRXhwcmVzc2lvbiwgXG5cdHR5cGUgVHlwZSxcblx0dHlwZSBFZmZlY3QsXG5cdHVuaXRUeXBlXG59IGZyb20gJy4uL2FzdCc7XG5pbXBvcnQgeyBUeXBlU3RhdGUsIFR5cGVSZXN1bHQsIGNyZWF0ZVB1cmVUeXBlUmVzdWx0IH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge1xuXHR0eXBlTGl0ZXJhbCxcblx0dHlwZVZhcmlhYmxlRXhwcixcblx0dHlwZUZ1bmN0aW9uLFxuXHR0eXBlQmluYXJ5LFxuXHR0eXBlSWYsXG5cdHR5cGVMaXN0LFxuXHR0eXBlUmVjb3JkLFxuXHR0eXBlVHVwbGUsXG5cdHR5cGVBY2Nlc3Nvcixcblx0dHlwZURlZmluaXRpb24sXG5cdHR5cGVDb25zdHJhaW50RGVmaW5pdGlvbixcblx0dHlwZUltcGxlbWVudERlZmluaXRpb24sXG59IGZyb20gJy4vdHlwZS1pbmZlcmVuY2UnO1xuaW1wb3J0IHsgdHlwZUFwcGxpY2F0aW9uLCB0eXBlUGlwZWxpbmUgfSBmcm9tICcuL2Z1bmN0aW9uLWFwcGxpY2F0aW9uJztcbmltcG9ydCB7IHR5cGVNYXRjaCwgdHlwZVR5cGVEZWZpbml0aW9uIH0gZnJvbSAnLi9wYXR0ZXJuLW1hdGNoaW5nJztcblxuLy8gTWFpbiB0eXBlIGluZmVyZW5jZSBkaXNwYXRjaGVyXG5leHBvcnQgY29uc3QgdHlwZUV4cHJlc3Npb24gPSAoXG5cdGV4cHI6IEV4cHJlc3Npb24sXG5cdHN0YXRlOiBUeXBlU3RhdGVcbik6IFR5cGVSZXN1bHQgPT4ge1xuXHRzd2l0Y2ggKGV4cHIua2luZCkge1xuXHRcdGNhc2UgJ2xpdGVyYWwnOlxuXHRcdFx0cmV0dXJuIHR5cGVMaXRlcmFsKGV4cHIsIHN0YXRlKTtcblxuXHRcdGNhc2UgJ3ZhcmlhYmxlJzpcblx0XHRcdHJldHVybiB0eXBlVmFyaWFibGVFeHByKGV4cHIsIHN0YXRlKTtcblxuXHRcdGNhc2UgJ2Z1bmN0aW9uJzpcblx0XHRcdHJldHVybiB0eXBlRnVuY3Rpb24oZXhwciwgc3RhdGUpO1xuXG5cdFx0Y2FzZSAnYXBwbGljYXRpb24nOlxuXHRcdFx0cmV0dXJuIHR5cGVBcHBsaWNhdGlvbihleHByLCBzdGF0ZSk7XG5cblx0XHRjYXNlICdiaW5hcnknOlxuXHRcdFx0cmV0dXJuIHR5cGVCaW5hcnkoZXhwciwgc3RhdGUpO1xuXG5cdFx0Y2FzZSAnaWYnOlxuXHRcdFx0cmV0dXJuIHR5cGVJZihleHByLCBzdGF0ZSk7XG5cblx0XHRjYXNlICdsaXN0Jzpcblx0XHRcdHJldHVybiB0eXBlTGlzdChleHByLCBzdGF0ZSk7XG5cblx0XHRjYXNlICdyZWNvcmQnOlxuXHRcdFx0cmV0dXJuIHR5cGVSZWNvcmQoZXhwciwgc3RhdGUpO1xuXG5cdFx0Y2FzZSAndHVwbGUnOlxuXHRcdFx0cmV0dXJuIHR5cGVUdXBsZShleHByLCBzdGF0ZSk7XG5cblx0XHRjYXNlICdhY2Nlc3Nvcic6XG5cdFx0XHRyZXR1cm4gdHlwZUFjY2Vzc29yKGV4cHIsIHN0YXRlKTtcblxuXHRcdGNhc2UgJ2RlZmluaXRpb24nOlxuXHRcdFx0cmV0dXJuIHR5cGVEZWZpbml0aW9uKGV4cHIsIHN0YXRlKTtcblxuXHRcdGNhc2UgJ3VuaXQnOlxuXHRcdFx0cmV0dXJuIGNyZWF0ZVB1cmVUeXBlUmVzdWx0KHVuaXRUeXBlKCksIHN0YXRlKTtcblxuXHRcdGNhc2UgJ3R5cGUtZGVmaW5pdGlvbic6XG5cdFx0XHRyZXR1cm4gdHlwZVR5cGVEZWZpbml0aW9uKGV4cHIsIHN0YXRlKTtcblxuXHRcdGNhc2UgJ2NvbnN0cmFpbnQtZGVmaW5pdGlvbic6XG5cdFx0XHRyZXR1cm4gdHlwZUNvbnN0cmFpbnREZWZpbml0aW9uKGV4cHIsIHN0YXRlKTtcblxuXHRcdGNhc2UgJ2ltcGxlbWVudC1kZWZpbml0aW9uJzpcblx0XHRcdHJldHVybiB0eXBlSW1wbGVtZW50RGVmaW5pdGlvbihleHByLCBzdGF0ZSk7XG5cblx0XHRjYXNlICdtYXRjaCc6XG5cdFx0XHRyZXR1cm4gdHlwZU1hdGNoKGV4cHIsIHN0YXRlKTtcblxuXHRcdGNhc2UgJ3BpcGVsaW5lJzpcblx0XHRcdHJldHVybiB0eXBlUGlwZWxpbmUoZXhwciwgc3RhdGUpO1xuXG5cdFx0ZGVmYXVsdDpcblx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5rbm93biBleHByZXNzaW9uIGtpbmQ6ICR7KGV4cHIgYXMgYW55KS5raW5kfWApO1xuXHR9XG59OyJdLCJ2ZXJzaW9uIjozfQ==