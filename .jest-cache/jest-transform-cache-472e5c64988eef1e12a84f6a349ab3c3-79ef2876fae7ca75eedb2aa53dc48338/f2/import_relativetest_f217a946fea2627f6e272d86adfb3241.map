{"file":"/workspace/test/import_relative.test.ts","mappings":"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","names":[],"sources":["/workspace/test/import_relative.test.ts"],"sourcesContent":["import { Lexer } from \"../src/lexer\";\nimport { parse } from \"../src/parser/parser\";\nimport { Evaluator } from \"../src/evaluator\";\n\ndescribe(\"File-relative imports\", () => {\n\tconst mockFs = {\n\t\treadFileSync: (filePath: unknown, encoding: string) => {\n\t\t\tif (typeof filePath === \"string\" && filePath.includes(\"stdlib.noo\")) {\n\t\t\t\treturn \"# Noolang Standard Library\\n# This file defines the global default environment\\n\";\n\t\t\t}\n\t\t\tif (\n\t\t\t\ttypeof filePath === \"string\" &&\n\t\t\t\tfilePath.includes(\"math_functions.noo\")\n\t\t\t) {\n\t\t\t\treturn \"{ @add fn x y => x + y, @multiply fn x y => x * y }\";\n\t\t\t}\n\t\t\tthrow new Error(`File not found: ${filePath}`);\n\t\t},\n\t\texistsSync: (filePath: unknown) => {\n\t\t\tif (typeof filePath === \"string\" && filePath.includes(\"stdlib.noo\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (\n\t\t\t\ttypeof filePath === \"string\" &&\n\t\t\t\tfilePath.includes(\"math_functions.noo\")\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t};\n\n\ttest(\"should import from same directory\", () => {\n\t\tconst testCode = `\n      math = import \"math_functions\";\n      (@add math) 2 3\n    `;\n\t\tconst lexer = new Lexer(testCode);\n\t\tconst tokens = lexer.tokenize();\n\t\tconst program = parse(tokens);\n\t\tconst evaluator = new Evaluator({ fs: mockFs as any });\n\t\tconst result = evaluator.evaluateProgram(\n\t\t\tprogram,\n\t\t\t\"/test/dir/test_file.noo\",\n\t\t);\n\t\texpect(result.finalResult).toEqual({ tag: \"number\", value: 5 });\n\t});\n\n\ttest(\"should import from parent directory\", () => {\n\t\tconst testCode = `\n      math = import \"../math_functions\";\n      (@add math) 10 20\n    `;\n\t\tconst lexer = new Lexer(testCode);\n\t\tconst tokens = lexer.tokenize();\n\t\tconst program = parse(tokens);\n\t\tconst evaluator = new Evaluator({ fs: mockFs as any });\n\t\tconst result = evaluator.evaluateProgram(\n\t\t\tprogram,\n\t\t\t\"/test/dir/subdir/test_file.noo\",\n\t\t);\n\t\texpect(result.finalResult).toEqual({ tag: \"number\", value: 30 });\n\t});\n\n\ttest(\"should handle absolute paths\", () => {\n\t\tconst testCode = `\n      math = import \"/absolute/path/math_functions\";\n      (@add math) 5 10\n    `;\n\t\tconst lexer = new Lexer(testCode);\n\t\tconst tokens = lexer.tokenize();\n\t\tconst program = parse(tokens);\n\t\tconst evaluator = new Evaluator({ fs: mockFs as any });\n\t\tconst result = evaluator.evaluateProgram(\n\t\t\tprogram,\n\t\t\t\"/test/dir/test_file.noo\",\n\t\t);\n\t\texpect(result.finalResult).toEqual({ tag: \"number\", value: 15 });\n\t});\n\n\ttest(\"should fall back to current working directory when no file path provided\", () => {\n\t\tconst testCode = `\n      math = import \"math_functions\";\n      (@add math) 3 7\n    `;\n\t\tconst lexer = new Lexer(testCode);\n\t\tconst tokens = lexer.tokenize();\n\t\tconst program = parse(tokens);\n\t\tconst evaluator = new Evaluator({ fs: mockFs as any });\n\t\tconst result = evaluator.evaluateProgram(program); // No file path\n\t\texpect(result.finalResult).toEqual({ tag: \"number\", value: 10 });\n\t});\n}); "],"version":3}