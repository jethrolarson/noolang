{"file":"/workspace/test/effects_phase2.test.ts","mappings":"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","names":[],"sources":["/workspace/test/effects_phase2.test.ts"],"sourcesContent":["// Phase 2 Effects System Tests\n// Testing separated effects in TypeResult and effect composition\n\nimport { Lexer } from '../src/lexer';\nimport { parse } from '../src/parser/parser';\nimport { typeProgram, emptyEffects, singleEffect, unionEffects } from '../src/typer';\nimport type { Effect } from '../src/ast';\n\nconst runNoolang = (code: string) => {\n\tconst lexer = new Lexer(code);\n\tconst tokens = lexer.tokenize();\n\tconst program = parse(tokens);\n\t\n\treturn typeProgram(program);\n};\n\ndescribe('Effects Phase 2: Separated Effects Architecture', () => {\n\tdescribe('Effect Helper Functions', () => {\n\t\ttest('emptyEffects creates empty effect set', () => {\n\t\t\tconst effects = emptyEffects();\n\t\t\texpect(effects.size).toBe(0);\n\t\t});\n\n\t\ttest('singleEffect creates single effect set', () => {\n\t\t\tconst effects = singleEffect('read');\n\t\t\texpect(effects.size).toBe(1);\n\t\t\texpect(effects.has('read')).toBe(true);\n\t\t});\n\n\t\ttest('unionEffects combines multiple effect sets', () => {\n\t\t\tconst effects1 = singleEffect('read' as Effect);\n\t\t\tconst effects2 = singleEffect('log' as Effect);\n\t\t\tconst effects3 = new Set(['state', 'read'] as Effect[]); // includes duplicate 'read'\n\t\t\t\n\t\t\tconst combined = unionEffects(effects1, effects2, effects3);\n\t\t\texpect(combined.size).toBe(3);\n\t\t\texpect(combined.has('read')).toBe(true);\n\t\t\texpect(combined.has('log')).toBe(true);\n\t\t\texpect(combined.has('state')).toBe(true);\n\t\t});\n\t});\n\n\tdescribe('Pure Expressions Return Empty Effects', () => {\n\t\ttest('literals have no effects', () => {\n\t\t\tconst result = runNoolang('42');\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('pure functions have no effects', () => {\n\t\t\tconst result = runNoolang('fn x => x + 1');\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('pure function application has no effects', () => {\n\t\t\tconst result = runNoolang('add = fn x y => x + y; add 2 3');\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('pure conditionals have no effects', () => {\n\t\t\tconst result = runNoolang('if True then 1 else 2');\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('pure lists have no effects', () => {\n\t\t\tconst result = runNoolang('[1, 2, 3]');\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('pure records have no effects', () => {\n\t\t\tconst result = runNoolang('{ @name \"Alice\", @age 30 }');\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('pure tuples have no effects', () => {\n\t\t\tconst result = runNoolang('{1, 2, 3}');\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('pure pattern matching has no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\ttype Color = Red | Green | Blue;\n\t\t\t\tcolor = Red;\n\t\t\t\tmatch color with (Red => 1; Green => 2; Blue => 3)\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n\n\tdescribe('Type System Returns TypeResult with Effects', () => {\n\t\ttest('typeProgram returns TypeResult with type and effects', () => {\n\t\t\tconst result = runNoolang('42');\n\t\t\texpect(result).toHaveProperty('type');\n\t\t\texpect(result).toHaveProperty('effects');\n\t\t\texpect(result).toHaveProperty('state');\n\t\t\texpect(result.type.kind).toBe('primitive');\n\t\t\texpect(result.effects).toBeInstanceOf(Set);\n\t\t});\n\n\t\ttest('complex expressions return proper TypeResult structure', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tadd = fn x y => x + y;\n\t\t\t\tmultiply = fn a b => a * b;\n\t\t\t\tcompute = fn x => add (multiply x 2) 3;\n\t\t\t\tcompute 5\n\t\t\t`);\n\t\t\texpect(result.type.kind).toBe('primitive');\n\t\t\tif (result.type.kind === 'primitive') {\n\t\t\t\texpect(result.type.name).toBe('Int');\n\t\t\t}\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n\n\tdescribe('Effect Propagation in Sequences', () => {\n\t\ttest('sequences collect effects from all statements', () => {\n\t\t\t// Note: We don't have actual effectful built-ins yet, so this tests the infrastructure\n\t\t\tconst result = runNoolang('x = 1; y = 2; x + y');\n\t\t\texpect(result.effects.size).toBe(0); // All pure operations\n\t\t});\n\n\t\ttest('sequences with pure operations have no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\ta = 10;\n\t\t\t\tb = 20;\n\t\t\t\tc = 30;\n\t\t\t\ta + b + c\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n\n\tdescribe('Effect Propagation in Function Applications', () => {\n\t\ttest('function application with pure function and pure arguments has no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tadd = fn x y => x + y;\n\t\t\t\tadd (1 + 2) (3 * 4)\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('curried function application propagates effects correctly', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tcurry = fn f => fn x => fn y => f x y;\n\t\t\t\tadd = fn x y => x + y;\n\t\t\t\tcurriedAdd = curry add;\n\t\t\t\tcurriedAdd 1 2\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n\n\tdescribe('Effect Propagation in Conditionals', () => {\n\t\ttest('conditional with pure branches has no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tcondition = True;\n\t\t\t\tif condition then 1 + 2 else 3 * 4\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('nested conditionals with pure expressions have no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tx = 5;\n\t\t\t\tif x > 0 then (if x > 10 then 100 else 50) else 0\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n\n\tdescribe('Effect Propagation in Data Structures', () => {\n\t\ttest('lists with pure elements have no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tadd = fn x => x + 1;\n\t\t\t\t[add 1, add 2, add 3]\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('records with pure field values have no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tcompute = fn x => x * 2;\n\t\t\t\t{ @a compute 5, @b compute 10 }\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('tuples with pure elements have no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tdouble = fn x => x * 2;\n\t\t\t\t{double 1, double 2, double 3}\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n\n\tdescribe('Effect Propagation in Pipeline Operations', () => {\n\t\ttest('pipeline with pure functions has no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tdouble = fn x => x * 2;\n\t\t\t\tadd5 = fn x => x + 5;\n\t\t\t\tcompose = fn f => fn g => fn x => f (g x);\n\t\t\t\tpipeline = compose add5 double;\n\t\t\t\tpipeline 10\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('thrush operator with pure functions has no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tdouble = fn x => x * 2;\n\t\t\t\t10 | double\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n\n\tdescribe('Effect Propagation in Pattern Matching', () => {\n\t\ttest('pattern matching with pure cases has no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\ttype Option a = Some a | None;\n\t\t\t\topt = Some 42;\n\t\t\t\tmatch opt with (\n\t\t\t\t\tSome x => x * 2;\n\t\t\t\t\tNone => 0\n\t\t\t\t)\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('nested pattern matching with pure expressions has no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\ttype Result a b = Ok a | Err b;\n\t\t\t\ttype Option a = Some a | None;\n\t\t\t\t\n\t\t\t\tresult = Ok (Some 42);\n\t\t\t\tmatch result with (\n\t\t\t\t\tOk opt => match opt with (Some x => x; None => 0);\n\t\t\t\t\tErr e => -1\n\t\t\t\t)\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n\n\tdescribe('Functions Inherit Effects from Body', () => {\n\t\ttest('function with pure body has no effects', () => {\n\t\t\tconst result = runNoolang('fn x => x + 1');\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('function with complex pure body has no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tfn x => if x > 0 then x * 2 else x + 1\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('function with pure function calls in body has no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\thelper = fn y => y * 3;\n\t\t\t\tfn x => helper (x + 1)\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n\n\tdescribe('Type System Architecture Validation', () => {\n\t\ttest('TypeResult structure is consistent across all expression types', () => {\n\t\t\tconst expressions = [\n\t\t\t\t'42',\n\t\t\t\t'\"hello\"',\n\t\t\t\t'True',\n\t\t\t\t'fn x => x',\n\t\t\t\t'[1, 2, 3]',\n\t\t\t\t'{ @a 1, @b 2 }',\n\t\t\t\t'{1, 2}',\n\t\t\t\t'if True then 1 else 2',\n\t\t\t\t'1 + 2',\n\t\t\t\t'head [1, 2, 3]'\n\t\t\t];\n\n\t\t\tfor (const expr of expressions) {\n\t\t\t\tconst result = runNoolang(expr);\n\t\t\t\texpect(result).toHaveProperty('type');\n\t\t\t\texpect(result).toHaveProperty('effects');\n\t\t\t\texpect(result).toHaveProperty('state');\n\t\t\t\texpect(result.effects).toBeInstanceOf(Set);\n\t\t\t}\n\t\t});\n\n\t\ttest('effects are properly typed as Set<Effect>', () => {\n\t\t\tconst result = runNoolang('42');\n\t\t\texpect(result.effects).toBeInstanceOf(Set);\n\t\t\t// Verify we can use Set methods\n\t\t\texpect(typeof result.effects.has).toBe('function');\n\t\t\texpect(typeof result.effects.add).toBe('function');\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n});"],"version":3}