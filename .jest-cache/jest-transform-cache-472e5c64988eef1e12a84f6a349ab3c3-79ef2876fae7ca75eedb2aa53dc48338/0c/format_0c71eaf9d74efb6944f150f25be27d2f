6668bf7d7dd7a4b5efa7e3b5124c787e
"use strict";
// Noolang value pretty-printer/formatter
// Usage: formatValue(value: Value): string
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatValue = formatValue;
const evaluator_1 = require("./evaluator");
function formatValue(value) {
    if ((0, evaluator_1.isNumber)(value)) {
        return value.value.toString();
    }
    if ((0, evaluator_1.isString)(value)) {
        // Escape quotes and backslashes
        return `"${value.value.replace(/\\/g, "\\\\").replace(/"/g, '\\"')}"`;
    }
    if ((0, evaluator_1.isBool)(value)) {
        return (0, evaluator_1.boolValue)(value) ? "True" : "False";
    }
    if ((0, evaluator_1.isList)(value)) {
        return `[${value.values.map(formatValue).join("; ")}]`;
    }
    if ((0, evaluator_1.isTuple)(value)) {
        return `{${value.values.map(formatValue).join("; ")}}`;
    }
    if ((0, evaluator_1.isRecord)(value)) {
        return `{${Object.entries(value.fields)
            .map(([k, v]) => `@${k} ${formatValue(v)}`)
            .join("; ")}}`;
    }
    if ((0, evaluator_1.isFunction)(value)) {
        return "<function>";
    }
    if ((0, evaluator_1.isNativeFunction)(value)) {
        return `<native:${value.name}>`;
    }
    if ((0, evaluator_1.isUnit)(value)) {
        return "()";
    }
    if ((0, evaluator_1.isConstructor)(value)) {
        if (value.args.length === 0) {
            return value.name;
        }
        else {
            return `${value.name} ${value.args.map(formatValue).join(" ")}`;
        }
    }
    return "<unknown>";
}
exports.default = formatValue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL3dvcmtzcGFjZS9zcmMvZm9ybWF0LnRzIiwibWFwcGluZ3MiOiI7QUFBQSx5Q0FBeUM7QUFDekMsMkNBQTJDOztBQWlCM0Msa0NBdUNDO0FBdERELDJDQWFxQjtBQUVyQixTQUFnQixXQUFXLENBQUMsS0FBWTtJQUN0QyxJQUFJLElBQUEsb0JBQVEsRUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ3BCLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBQ0QsSUFBSSxJQUFBLG9CQUFRLEVBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUNwQixnQ0FBZ0M7UUFDbEMsT0FBTyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDdEUsQ0FBQztJQUNELElBQUksSUFBQSxrQkFBTSxFQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDbEIsT0FBTyxJQUFBLHFCQUFTLEVBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQzdDLENBQUM7SUFDRCxJQUFJLElBQUEsa0JBQU0sRUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ2xCLE9BQU8sSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUN6RCxDQUFDO0lBQ0QsSUFBSSxJQUFBLG1CQUFPLEVBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUNwQixPQUFPLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDeEQsQ0FBQztJQUNELElBQUksSUFBQSxvQkFBUSxFQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDcEIsT0FBTyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQzthQUNyQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7YUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQUNELElBQUksSUFBQSxzQkFBVSxFQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDdEIsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUNELElBQUksSUFBQSw0QkFBZ0IsRUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQzVCLE9BQU8sV0FBVyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUM7SUFDbEMsQ0FBQztJQUNELElBQUksSUFBQSxrQkFBTSxFQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDbEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0QsSUFBSSxJQUFBLHlCQUFhLEVBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUN6QixJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQzVCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQztRQUNwQixDQUFDO2FBQU0sQ0FBQztZQUNOLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ2xFLENBQUM7SUFDSCxDQUFDO0lBQ0QsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQztBQUVELGtCQUFlLFdBQVcsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvd29ya3NwYWNlL3NyYy9mb3JtYXQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTm9vbGFuZyB2YWx1ZSBwcmV0dHktcHJpbnRlci9mb3JtYXR0ZXJcbi8vIFVzYWdlOiBmb3JtYXRWYWx1ZSh2YWx1ZTogVmFsdWUpOiBzdHJpbmdcblxuaW1wb3J0IHtcblx0aXNOdW1iZXIsXG5cdGlzU3RyaW5nLFxuXHRpc0Jvb2wsXG5cdGlzTGlzdCxcblx0aXNSZWNvcmQsXG5cdGlzVHVwbGUsXG5cdGlzRnVuY3Rpb24sXG5cdGlzTmF0aXZlRnVuY3Rpb24sXG5cdGlzVW5pdCxcblx0aXNDb25zdHJ1Y3Rvcixcblx0dHlwZSBWYWx1ZSxcblx0Ym9vbFZhbHVlLFxufSBmcm9tIFwiLi9ldmFsdWF0b3JcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHZhbHVlOiBWYWx1ZSk6IHN0cmluZyB7XG4gIGlmIChpc051bWJlcih2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUudmFsdWUudG9TdHJpbmcoKTtcbiAgfVxuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgLy8gRXNjYXBlIHF1b3RlcyBhbmQgYmFja3NsYXNoZXNcblx0XHRyZXR1cm4gYFwiJHt2YWx1ZS52YWx1ZS5yZXBsYWNlKC9cXFxcL2csIFwiXFxcXFxcXFxcIikucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpfVwiYDtcbiAgfVxuICBpZiAoaXNCb29sKHZhbHVlKSkge1xuICAgIHJldHVybiBib29sVmFsdWUodmFsdWUpID8gXCJUcnVlXCIgOiBcIkZhbHNlXCI7XG4gIH1cbiAgaWYgKGlzTGlzdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gYFske3ZhbHVlLnZhbHVlcy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oXCI7IFwiKX1dYDtcbiAgfVxuICBpZiAoaXNUdXBsZSh2YWx1ZSkpIHtcblx0XHRcdHJldHVybiBgeyR7dmFsdWUudmFsdWVzLm1hcChmb3JtYXRWYWx1ZSkuam9pbihcIjsgXCIpfX1gO1xuXHRcdH1cbiAgaWYgKGlzUmVjb3JkKHZhbHVlKSkge1xuICAgIHJldHVybiBgeyR7T2JqZWN0LmVudHJpZXModmFsdWUuZmllbGRzKVxuXHRcdFx0XHRcdC5tYXAoKFtrLCB2XSkgPT4gYEAke2t9ICR7Zm9ybWF0VmFsdWUodil9YClcblx0XHRcdFx0XHQuam9pbihcIjsgXCIpfX1gO1xuICB9XG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHJldHVybiBcIjxmdW5jdGlvbj5cIjtcbiAgfVxuICBpZiAoaXNOYXRpdmVGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICByZXR1cm4gYDxuYXRpdmU6JHt2YWx1ZS5uYW1lfT5gO1xuICB9XG4gIGlmIChpc1VuaXQodmFsdWUpKSB7XG4gICAgcmV0dXJuIFwiKClcIjtcbiAgfVxuICBpZiAoaXNDb25zdHJ1Y3Rvcih2YWx1ZSkpIHtcbiAgICBpZiAodmFsdWUuYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB2YWx1ZS5uYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYCR7dmFsdWUubmFtZX0gJHt2YWx1ZS5hcmdzLm1hcChmb3JtYXRWYWx1ZSkuam9pbihcIiBcIil9YDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFwiPHVua25vd24+XCI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdFZhbHVlO1xuIl0sInZlcnNpb24iOjN9