826b50b023b00b2dfe8962d3a6ae005a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../types");
const ast_1 = require("../../ast");
describe('Trait System Infrastructure', () => {
    test('should create empty constraint registry', () => {
        const registry = (0, types_1.createConstraintRegistry)();
        expect(registry.size).toBe(0);
    });
    test('should add constraint definition', () => {
        const registry = (0, types_1.createConstraintRegistry)();
        const showSignature = {
            name: 'Show',
            typeParam: 'a',
            functions: new Map([
                ['show', (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.stringType)())]
            ])
        };
        (0, types_1.addConstraintDefinition)(registry, 'Show', showSignature);
        expect(registry.size).toBe(1);
        expect(registry.has('Show')).toBe(true);
        const constraint = registry.get('Show');
        expect(constraint?.signature.name).toBe('Show');
        expect(constraint?.signature.typeParam).toBe('a');
        expect(constraint?.implementations.size).toBe(0);
    });
    test('should add constraint implementation', () => {
        const registry = (0, types_1.createConstraintRegistry)();
        // Add constraint definition first
        const showSignature = {
            name: 'Show',
            typeParam: 'a',
            functions: new Map([
                ['show', (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.stringType)())]
            ])
        };
        (0, types_1.addConstraintDefinition)(registry, 'Show', showSignature);
        // Add implementation
        const implementation = {
            functions: new Map([
                ['show', {
                        type: (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.stringType)()),
                        quantifiedVars: [],
                        effects: new Set()
                    }]
            ])
        };
        const success = (0, types_1.addConstraintImplementation)(registry, 'Show', 'Int', implementation);
        expect(success).toBe(true);
        const constraint = registry.get('Show');
        expect(constraint?.implementations.size).toBe(1);
        expect(constraint?.implementations.has('Int')).toBe(true);
    });
    test('should fail to add implementation for non-existent constraint', () => {
        const registry = (0, types_1.createConstraintRegistry)();
        const implementation = {
            functions: new Map([
                ['show', {
                        type: (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.stringType)()),
                        quantifiedVars: [],
                        effects: new Set()
                    }]
            ])
        };
        const success = (0, types_1.addConstraintImplementation)(registry, 'NonExistent', 'Int', implementation);
        expect(success).toBe(false);
    });
    test('should resolve constraint function', () => {
        const registry = (0, types_1.createConstraintRegistry)();
        // Set up constraint
        const showSignature = {
            name: 'Show',
            typeParam: 'a',
            functions: new Map([
                ['show', (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.stringType)())]
            ])
        };
        (0, types_1.addConstraintDefinition)(registry, 'Show', showSignature);
        // Add implementation  
        const showImpl = {
            type: (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.stringType)()),
            quantifiedVars: [],
            effects: new Set()
        };
        const implementation = {
            functions: new Map([['show', showImpl]])
        };
        (0, types_1.addConstraintImplementation)(registry, 'Show', 'Int', implementation);
        // Resolve function
        const resolved = (0, types_1.resolveConstraintFunction)(registry, 'Show', 'show', (0, ast_1.intType)());
        expect(resolved).toBeTruthy();
        expect(resolved?.type).toEqual((0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.stringType)()));
    });
    test('should return null for unresolved constraint function', () => {
        const registry = (0, types_1.createConstraintRegistry)();
        const resolved = (0, types_1.resolveConstraintFunction)(registry, 'NonExistent', 'show', (0, ast_1.intType)());
        expect(resolved).toBeNull();
    });
    test('should get constraint signature', () => {
        const registry = (0, types_1.createConstraintRegistry)();
        const showSignature = {
            name: 'Show',
            typeParam: 'a',
            functions: new Map([
                ['show', (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.stringType)())]
            ])
        };
        (0, types_1.addConstraintDefinition)(registry, 'Show', showSignature);
        const retrieved = (0, types_1.getConstraintSignature)(registry, 'Show');
        expect(retrieved).toBeTruthy();
        expect(retrieved?.name).toBe('Show');
        expect(retrieved?.typeParam).toBe('a');
        expect(retrieved?.functions.get('show')).toEqual((0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.stringType)()));
    });
    test('should handle complex constraint with multiple functions', () => {
        const registry = (0, types_1.createConstraintRegistry)();
        // Define Monad constraint
        const monadSignature = {
            name: 'Monad',
            typeParam: 'm',
            functions: new Map([
                ['bind', (0, ast_1.functionType)([
                        (0, ast_1.listTypeWithElement)((0, ast_1.intType)()),
                        (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.listTypeWithElement)((0, ast_1.intType)()))
                    ], (0, ast_1.listTypeWithElement)((0, ast_1.intType)()))],
                ['pure', (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.listTypeWithElement)((0, ast_1.intType)()))]
            ])
        };
        (0, types_1.addConstraintDefinition)(registry, 'Monad', monadSignature);
        // Add List implementation
        const listImpl = {
            functions: new Map([
                ['bind', {
                        type: (0, ast_1.functionType)([
                            (0, ast_1.listTypeWithElement)((0, ast_1.intType)()),
                            (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.listTypeWithElement)((0, ast_1.intType)()))
                        ], (0, ast_1.listTypeWithElement)((0, ast_1.intType)())),
                        quantifiedVars: ['a', 'b'],
                        effects: new Set()
                    }],
                ['pure', {
                        type: (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.listTypeWithElement)((0, ast_1.intType)())),
                        quantifiedVars: ['a'],
                        effects: new Set()
                    }]
            ])
        };
        (0, types_1.addConstraintImplementation)(registry, 'Monad', 'List Int', listImpl);
        // Test resolution
        const bindResolved = (0, types_1.resolveConstraintFunction)(registry, 'Monad', 'bind', (0, ast_1.listTypeWithElement)((0, ast_1.intType)()));
        const pureResolved = (0, types_1.resolveConstraintFunction)(registry, 'Monad', 'pure', (0, ast_1.listTypeWithElement)((0, ast_1.intType)()));
        expect(bindResolved).toBeTruthy();
        expect(pureResolved).toBeTruthy();
        expect(bindResolved?.quantifiedVars).toEqual(['a', 'b']);
        expect(pureResolved?.quantifiedVars).toEqual(['a']);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,