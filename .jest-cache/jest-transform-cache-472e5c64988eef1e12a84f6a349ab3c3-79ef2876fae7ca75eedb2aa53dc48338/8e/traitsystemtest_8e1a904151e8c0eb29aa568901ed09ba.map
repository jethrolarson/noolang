{"file":"/workspace/src/typer/__tests__/trait-system.test.ts","mappings":";;AAAA,oCAQkB;AAClB,mCAAmF;AAEnF,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACnD,MAAM,QAAQ,GAAG,IAAA,gCAAwB,GAAE,CAAC;QAC5C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC5C,MAAM,QAAQ,GAAG,IAAA,gCAAwB,GAAE,CAAC;QAE5C,MAAM,aAAa,GAAwB;YACzC,IAAI,EAAE,MAAM;YACZ,SAAS,EAAE,GAAG;YACd,SAAS,EAAE,IAAI,GAAG,CAAC;gBACjB,CAAC,MAAM,EAAE,IAAA,kBAAY,EAAC,CAAC,IAAA,aAAO,GAAE,CAAC,EAAE,IAAA,gBAAU,GAAE,CAAC,CAAC;aAClD,CAAC;SACH,CAAC;QAEF,IAAA,+BAAuB,EAAC,QAAQ,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;QAEzD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAExC,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACxC,MAAM,CAAC,UAAU,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAChD,MAAM,CAAC,UAAU,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClD,MAAM,CAAC,UAAU,EAAE,eAAe,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAChD,MAAM,QAAQ,GAAG,IAAA,gCAAwB,GAAE,CAAC;QAE5C,kCAAkC;QAClC,MAAM,aAAa,GAAwB;YACzC,IAAI,EAAE,MAAM;YACZ,SAAS,EAAE,GAAG;YACd,SAAS,EAAE,IAAI,GAAG,CAAC;gBACjB,CAAC,MAAM,EAAE,IAAA,kBAAY,EAAC,CAAC,IAAA,aAAO,GAAE,CAAC,EAAE,IAAA,gBAAU,GAAE,CAAC,CAAC;aAClD,CAAC;SACH,CAAC;QACF,IAAA,+BAAuB,EAAC,QAAQ,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;QAEzD,qBAAqB;QACrB,MAAM,cAAc,GAA6B;YAC/C,SAAS,EAAE,IAAI,GAAG,CAAC;gBACjB,CAAC,MAAM,EAAE;wBACP,IAAI,EAAE,IAAA,kBAAY,EAAC,CAAC,IAAA,aAAO,GAAE,CAAC,EAAE,IAAA,gBAAU,GAAE,CAAC;wBAC7C,cAAc,EAAE,EAAE;wBAClB,OAAO,EAAE,IAAI,GAAG,EAAE;qBACnB,CAAC;aACH,CAAC;SACH,CAAC;QAEF,MAAM,OAAO,GAAG,IAAA,mCAA2B,EAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC;QAErF,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE3B,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACxC,MAAM,CAAC,UAAU,EAAE,eAAe,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,UAAU,EAAE,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,+DAA+D,EAAE,GAAG,EAAE;QACzE,MAAM,QAAQ,GAAG,IAAA,gCAAwB,GAAE,CAAC;QAE5C,MAAM,cAAc,GAA6B;YAC/C,SAAS,EAAE,IAAI,GAAG,CAAC;gBACjB,CAAC,MAAM,EAAE;wBACP,IAAI,EAAE,IAAA,kBAAY,EAAC,CAAC,IAAA,aAAO,GAAE,CAAC,EAAE,IAAA,gBAAU,GAAE,CAAC;wBAC7C,cAAc,EAAE,EAAE;wBAClB,OAAO,EAAE,IAAI,GAAG,EAAE;qBACnB,CAAC;aACH,CAAC;SACH,CAAC;QAEF,MAAM,OAAO,GAAG,IAAA,mCAA2B,EAAC,QAAQ,EAAE,aAAa,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC;QAE5F,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC9C,MAAM,QAAQ,GAAG,IAAA,gCAAwB,GAAE,CAAC;QAE5C,oBAAoB;QACpB,MAAM,aAAa,GAAwB;YACzC,IAAI,EAAE,MAAM;YACZ,SAAS,EAAE,GAAG;YACd,SAAS,EAAE,IAAI,GAAG,CAAC;gBACjB,CAAC,MAAM,EAAE,IAAA,kBAAY,EAAC,CAAC,IAAA,aAAO,GAAE,CAAC,EAAE,IAAA,gBAAU,GAAE,CAAC,CAAC;aAClD,CAAC;SACH,CAAC;QACF,IAAA,+BAAuB,EAAC,QAAQ,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;QAEzD,uBAAuB;QACvB,MAAM,QAAQ,GAAG;YACf,IAAI,EAAE,IAAA,kBAAY,EAAC,CAAC,IAAA,aAAO,GAAE,CAAC,EAAE,IAAA,gBAAU,GAAE,CAAC;YAC7C,cAAc,EAAE,EAAE;YAClB,OAAO,EAAE,IAAI,GAAG,EAA8B;SAC/C,CAAC;QACF,MAAM,cAAc,GAA6B;YAC/C,SAAS,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;SACzC,CAAC;QACF,IAAA,mCAA2B,EAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC;QAErE,mBAAmB;QACnB,MAAM,QAAQ,GAAG,IAAA,iCAAyB,EAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,IAAA,aAAO,GAAE,CAAC,CAAC;QAEhF,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,EAAE,CAAC;QAC9B,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,IAAA,kBAAY,EAAC,CAAC,IAAA,aAAO,GAAE,CAAC,EAAE,IAAA,gBAAU,GAAE,CAAC,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,uDAAuD,EAAE,GAAG,EAAE;QACjE,MAAM,QAAQ,GAAG,IAAA,gCAAwB,GAAE,CAAC;QAE5C,MAAM,QAAQ,GAAG,IAAA,iCAAyB,EAAC,QAAQ,EAAE,aAAa,EAAE,MAAM,EAAE,IAAA,aAAO,GAAE,CAAC,CAAC;QAEvF,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,iCAAiC,EAAE,GAAG,EAAE;QAC3C,MAAM,QAAQ,GAAG,IAAA,gCAAwB,GAAE,CAAC;QAE5C,MAAM,aAAa,GAAwB;YACzC,IAAI,EAAE,MAAM;YACZ,SAAS,EAAE,GAAG;YACd,SAAS,EAAE,IAAI,GAAG,CAAC;gBACjB,CAAC,MAAM,EAAE,IAAA,kBAAY,EAAC,CAAC,IAAA,aAAO,GAAE,CAAC,EAAE,IAAA,gBAAU,GAAE,CAAC,CAAC;aAClD,CAAC;SACH,CAAC;QACF,IAAA,+BAAuB,EAAC,QAAQ,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;QAEzD,MAAM,SAAS,GAAG,IAAA,8BAAsB,EAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAE3D,MAAM,CAAC,SAAS,CAAC,CAAC,UAAU,EAAE,CAAC;QAC/B,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACvC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAA,kBAAY,EAAC,CAAC,IAAA,aAAO,GAAE,CAAC,EAAE,IAAA,gBAAU,GAAE,CAAC,CAAC,CAAC;IAC5F,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,0DAA0D,EAAE,GAAG,EAAE;QACpE,MAAM,QAAQ,GAAG,IAAA,gCAAwB,GAAE,CAAC;QAE5C,0BAA0B;QAC1B,MAAM,cAAc,GAAwB;YAC1C,IAAI,EAAE,OAAO;YACb,SAAS,EAAE,GAAG;YACd,SAAS,EAAE,IAAI,GAAG,CAAC;gBACjB,CAAC,MAAM,EAAE,IAAA,kBAAY,EAAC;wBACpB,IAAA,yBAAmB,EAAC,IAAA,aAAO,GAAE,CAAC;wBAC9B,IAAA,kBAAY,EAAC,CAAC,IAAA,aAAO,GAAE,CAAC,EAAE,IAAA,yBAAmB,EAAC,IAAA,aAAO,GAAE,CAAC,CAAC;qBAC1D,EAAE,IAAA,yBAAmB,EAAC,IAAA,aAAO,GAAE,CAAC,CAAC,CAAC;gBACnC,CAAC,MAAM,EAAE,IAAA,kBAAY,EAAC,CAAC,IAAA,aAAO,GAAE,CAAC,EAAE,IAAA,yBAAmB,EAAC,IAAA,aAAO,GAAE,CAAC,CAAC,CAAC;aACpE,CAAC;SACH,CAAC;QACF,IAAA,+BAAuB,EAAC,QAAQ,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;QAE3D,0BAA0B;QAC1B,MAAM,QAAQ,GAA6B;YACzC,SAAS,EAAE,IAAI,GAAG,CAAC;gBACjB,CAAC,MAAM,EAAE;wBACP,IAAI,EAAE,IAAA,kBAAY,EAAC;4BACjB,IAAA,yBAAmB,EAAC,IAAA,aAAO,GAAE,CAAC;4BAC9B,IAAA,kBAAY,EAAC,CAAC,IAAA,aAAO,GAAE,CAAC,EAAE,IAAA,yBAAmB,EAAC,IAAA,aAAO,GAAE,CAAC,CAAC;yBAC1D,EAAE,IAAA,yBAAmB,EAAC,IAAA,aAAO,GAAE,CAAC,CAAC;wBAClC,cAAc,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;wBAC1B,OAAO,EAAE,IAAI,GAAG,EAAE;qBACnB,CAAC;gBACF,CAAC,MAAM,EAAE;wBACP,IAAI,EAAE,IAAA,kBAAY,EAAC,CAAC,IAAA,aAAO,GAAE,CAAC,EAAE,IAAA,yBAAmB,EAAC,IAAA,aAAO,GAAE,CAAC,CAAC;wBAC/D,cAAc,EAAE,CAAC,GAAG,CAAC;wBACrB,OAAO,EAAE,IAAI,GAAG,EAAE;qBACnB,CAAC;aACH,CAAC;SACH,CAAC;QACF,IAAA,mCAA2B,EAAC,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAErE,kBAAkB;QAClB,MAAM,YAAY,GAAG,IAAA,iCAAyB,EAC5C,QAAQ,EACR,OAAO,EACP,MAAM,EACN,IAAA,yBAAmB,EAAC,IAAA,aAAO,GAAE,CAAC,CAC/B,CAAC;QACF,MAAM,YAAY,GAAG,IAAA,iCAAyB,EAC5C,QAAQ,EACR,OAAO,EACP,MAAM,EACN,IAAA,yBAAmB,EAAC,IAAA,aAAO,GAAE,CAAC,CAC/B,CAAC;QAEF,MAAM,CAAC,YAAY,CAAC,CAAC,UAAU,EAAE,CAAC;QAClC,MAAM,CAAC,YAAY,CAAC,CAAC,UAAU,EAAE,CAAC;QAClC,MAAM,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QACzD,MAAM,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/workspace/src/typer/__tests__/trait-system.test.ts"],"sourcesContent":["import { \n  createConstraintRegistry, \n  addConstraintDefinition, \n  addConstraintImplementation, \n  resolveConstraintFunction,\n  getConstraintSignature,\n  type ConstraintSignature,\n  type ConstraintImplementation\n} from '../types';\nimport { intType, stringType, functionType, listTypeWithElement } from '../../ast';\n\ndescribe('Trait System Infrastructure', () => {\n  test('should create empty constraint registry', () => {\n    const registry = createConstraintRegistry();\n    expect(registry.size).toBe(0);\n  });\n\n  test('should add constraint definition', () => {\n    const registry = createConstraintRegistry();\n    \n    const showSignature: ConstraintSignature = {\n      name: 'Show',\n      typeParam: 'a',\n      functions: new Map([\n        ['show', functionType([intType()], stringType())]\n      ])\n    };\n\n    addConstraintDefinition(registry, 'Show', showSignature);\n    \n    expect(registry.size).toBe(1);\n    expect(registry.has('Show')).toBe(true);\n    \n    const constraint = registry.get('Show');\n    expect(constraint?.signature.name).toBe('Show');\n    expect(constraint?.signature.typeParam).toBe('a');\n    expect(constraint?.implementations.size).toBe(0);\n  });\n\n  test('should add constraint implementation', () => {\n    const registry = createConstraintRegistry();\n    \n    // Add constraint definition first\n    const showSignature: ConstraintSignature = {\n      name: 'Show',\n      typeParam: 'a', \n      functions: new Map([\n        ['show', functionType([intType()], stringType())]\n      ])\n    };\n    addConstraintDefinition(registry, 'Show', showSignature);\n\n    // Add implementation\n    const implementation: ConstraintImplementation = {\n      functions: new Map([\n        ['show', {\n          type: functionType([intType()], stringType()),\n          quantifiedVars: [],\n          effects: new Set()\n        }]\n      ])\n    };\n\n    const success = addConstraintImplementation(registry, 'Show', 'Int', implementation);\n    \n    expect(success).toBe(true);\n    \n    const constraint = registry.get('Show');\n    expect(constraint?.implementations.size).toBe(1);\n    expect(constraint?.implementations.has('Int')).toBe(true);\n  });\n\n  test('should fail to add implementation for non-existent constraint', () => {\n    const registry = createConstraintRegistry();\n    \n    const implementation: ConstraintImplementation = {\n      functions: new Map([\n        ['show', {\n          type: functionType([intType()], stringType()),\n          quantifiedVars: [],\n          effects: new Set()\n        }]\n      ])\n    };\n\n    const success = addConstraintImplementation(registry, 'NonExistent', 'Int', implementation);\n    \n    expect(success).toBe(false);\n  });\n\n  test('should resolve constraint function', () => {\n    const registry = createConstraintRegistry();\n    \n    // Set up constraint\n    const showSignature: ConstraintSignature = {\n      name: 'Show',\n      typeParam: 'a',\n      functions: new Map([\n        ['show', functionType([intType()], stringType())]\n      ])\n    };\n    addConstraintDefinition(registry, 'Show', showSignature);\n\n    // Add implementation  \n    const showImpl = {\n      type: functionType([intType()], stringType()),\n      quantifiedVars: [],\n      effects: new Set<import('../../ast').Effect>()\n    };\n    const implementation: ConstraintImplementation = {\n      functions: new Map([['show', showImpl]])\n    };\n    addConstraintImplementation(registry, 'Show', 'Int', implementation);\n\n    // Resolve function\n    const resolved = resolveConstraintFunction(registry, 'Show', 'show', intType());\n    \n    expect(resolved).toBeTruthy();\n    expect(resolved?.type).toEqual(functionType([intType()], stringType()));\n  });\n\n  test('should return null for unresolved constraint function', () => {\n    const registry = createConstraintRegistry();\n    \n    const resolved = resolveConstraintFunction(registry, 'NonExistent', 'show', intType());\n    \n    expect(resolved).toBeNull();\n  });\n\n  test('should get constraint signature', () => {\n    const registry = createConstraintRegistry();\n    \n    const showSignature: ConstraintSignature = {\n      name: 'Show',\n      typeParam: 'a',\n      functions: new Map([\n        ['show', functionType([intType()], stringType())]\n      ])\n    };\n    addConstraintDefinition(registry, 'Show', showSignature);\n\n    const retrieved = getConstraintSignature(registry, 'Show');\n    \n    expect(retrieved).toBeTruthy();\n    expect(retrieved?.name).toBe('Show');\n    expect(retrieved?.typeParam).toBe('a');\n    expect(retrieved?.functions.get('show')).toEqual(functionType([intType()], stringType()));\n  });\n\n  test('should handle complex constraint with multiple functions', () => {\n    const registry = createConstraintRegistry();\n    \n    // Define Monad constraint\n    const monadSignature: ConstraintSignature = {\n      name: 'Monad',\n      typeParam: 'm',\n      functions: new Map([\n        ['bind', functionType([\n          listTypeWithElement(intType()), \n          functionType([intType()], listTypeWithElement(intType()))\n        ], listTypeWithElement(intType()))],\n        ['pure', functionType([intType()], listTypeWithElement(intType()))]\n      ])\n    };\n    addConstraintDefinition(registry, 'Monad', monadSignature);\n\n    // Add List implementation\n    const listImpl: ConstraintImplementation = {\n      functions: new Map([\n        ['bind', {\n          type: functionType([\n            listTypeWithElement(intType()), \n            functionType([intType()], listTypeWithElement(intType()))\n          ], listTypeWithElement(intType())),\n          quantifiedVars: ['a', 'b'],\n          effects: new Set()\n        }],\n        ['pure', {\n          type: functionType([intType()], listTypeWithElement(intType())),\n          quantifiedVars: ['a'], \n          effects: new Set()\n        }]\n      ])\n    };\n    addConstraintImplementation(registry, 'Monad', 'List Int', listImpl);\n\n    // Test resolution\n    const bindResolved = resolveConstraintFunction(\n      registry, \n      'Monad', \n      'bind', \n      listTypeWithElement(intType())\n    );\n    const pureResolved = resolveConstraintFunction(\n      registry,\n      'Monad', \n      'pure',\n      listTypeWithElement(intType())\n    );\n\n    expect(bindResolved).toBeTruthy();\n    expect(pureResolved).toBeTruthy();\n    expect(bindResolved?.quantifiedVars).toEqual(['a', 'b']);\n    expect(pureResolved?.quantifiedVars).toEqual(['a']);\n  });\n});"],"version":3}