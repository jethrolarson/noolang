{"file":"/workspace/test/pattern_matching_failures.test.ts","mappings":"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","names":[],"sources":["/workspace/test/pattern_matching_failures.test.ts"],"sourcesContent":["import { Lexer } from \"../src/lexer\";\nimport { parse } from \"../src/parser/parser\";\nimport { typeAndDecorate } from \"../src/typer\";\nimport { Evaluator, Value } from \"../src/evaluator\";\n\nfunction unwrapValue(val: Value): any {\n  if (val === null) return null;\n  if (typeof val !== \"object\") return val;\n  switch (val.tag) {\n    case \"number\":\n      return val.value;\n    case \"string\":\n      return val.value;\n    case \"constructor\":\n      if (val.name === \"True\") return true;\n      if (val.name === \"False\") return false;\n      return { name: val.name, args: val.args.map(unwrapValue) };\n    case \"list\":\n      return val.values.map(unwrapValue);\n    case \"tuple\":\n      return val.values.map(unwrapValue);\n    case \"record\": {\n      const obj: any = {};\n      for (const k in val.fields) obj[k] = unwrapValue(val.fields[k]);\n      return obj;\n    }\n    default:\n      return val;\n  }\n}\n\ndescribe(\"Pattern Matching Failure Tests\", () => {\n  let evaluator: Evaluator;\n\n  beforeEach(() => {\n    evaluator = new Evaluator();\n  });\n\n  const runCode = (code: string) => {\n    const lexer = new Lexer(code);\n    const tokens = lexer.tokenize();\n    const ast = parse(tokens);\n    const decoratedResult = typeAndDecorate(ast);\n    return evaluator.evaluateProgram(decoratedResult.program);\n  };\n\n  test.skip(\"should handle parametric ADT pattern matching\", () => {\n    // FIXME: Currently fails with \"Pattern expects constructor but got α\"\n    const code = `\n      type Point a = Point a a;\n      get_x = fn point => match point with (Point x y => x);\n      origin = Point 0 0;\n      get_x origin\n    `;\n    const result = runCode(code);\n    expect(unwrapValue(result.finalResult)).toBe(0);\n  });\n\n  test.skip(\"should handle Option pattern matching in functions\", () => {\n    // FIXME: Currently fails with \"Pattern expects constructor but got α\"\n    const code = `\n      handle_option = fn opt => match opt with (\n        Some value => value * 2;\n        None => 0\n      );\n      handle_option (Some 21)\n    `;\n    const result = runCode(code);\n    expect(unwrapValue(result.finalResult)).toBe(42);\n  });\n\n  test.skip(\"should handle Result pattern matching\", () => {\n    // FIXME: Currently fails with \"Pattern expects constructor but got α\"\n    const code = `\n      handle_result = fn res => match res with (\n        Ok value => value + 10;\n        Err msg => 0\n      );\n      handle_result (Ok 32)\n    `;\n    const result = runCode(code);\n    expect(unwrapValue(result.finalResult)).toBe(42);\n  });\n\n  test.skip(\"should handle complex Shape pattern matching\", () => {\n    // FIXME: Currently fails with \"Pattern expects constructor but got α\"\n    const code = `\n      type Shape = Circle Number | Rectangle Number Number;\n      calculate_area = fn shape => match shape with (\n        Circle radius => radius * radius * 3;\n        Rectangle width height => width * height\n      );\n      calculate_area (Circle 5)\n    `;\n    const result = runCode(code);\n    expect(unwrapValue(result.finalResult)).toBe(75);\n  });\n});\n"],"version":3}