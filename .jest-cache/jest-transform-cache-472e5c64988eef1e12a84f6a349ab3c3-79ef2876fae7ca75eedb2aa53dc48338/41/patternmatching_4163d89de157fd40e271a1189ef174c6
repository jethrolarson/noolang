990662b4d2fb028d01feed289b1e4e87
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeMatch = exports.typeTypeDefinition = void 0;
const ast_1 = require("../ast");
const types_1 = require("./types");
const substitute_1 = require("./substitute");
const unify_1 = require("./unify");
const type_operations_1 = require("./type-operations");
const expression_dispatcher_1 = require("./expression-dispatcher");
const helpers_1 = require("./helpers");
// Type inference for ADT type definitions
const typeTypeDefinition = (expr, state) => {
    // Register the ADT in the registry first to enable recursive references
    const constructorMap = new Map();
    // Pre-register the ADT so recursive references work
    const newRegistry = new Map(state.adtRegistry);
    newRegistry.set(expr.name, {
        typeParams: expr.typeParams,
        constructors: constructorMap, // Will be filled
    });
    // Also add the ADT type constructor to the environment
    const adtType = {
        kind: "variant",
        name: expr.name,
        args: expr.typeParams.map((param) => (0, ast_1.typeVariable)(param)),
    };
    const envWithType = new Map(state.environment);
    envWithType.set(expr.name, {
        type: adtType,
        quantifiedVars: expr.typeParams,
    });
    state = { ...state, adtRegistry: newRegistry, environment: envWithType };
    // Process each constructor
    for (const _constructor of expr.constructors) {
        constructorMap.set(_constructor.name, _constructor.args);
        // Add constructor to environment as a function
        // Constructor type: arg1 -> arg2 -> ... -> ADTType typeParams
        const adtType = {
            kind: "variant",
            name: expr.name,
            args: expr.typeParams.map((param) => (0, ast_1.typeVariable)(param)),
        };
        let constructorType;
        if (_constructor.args.length === 0) {
            // Nullary constructor: just the ADT type
            constructorType = adtType;
        }
        else {
            // N-ary constructor: function from args to ADT type
            constructorType = (0, ast_1.functionType)(_constructor.args, adtType);
        }
        // Add constructor to environment
        const newEnv = new Map(state.environment);
        newEnv.set(_constructor.name, {
            type: constructorType,
            quantifiedVars: expr.typeParams,
        });
        state = { ...state, environment: newEnv };
    }
    // Update ADT registry with completed constructor map
    const finalRegistry = new Map(state.adtRegistry);
    finalRegistry.set(expr.name, {
        typeParams: expr.typeParams,
        constructors: constructorMap,
    });
    // Type definitions return unit and update state
    return (0, types_1.createPureTypeResult)((0, ast_1.unitType)(), { ...state, adtRegistry: finalRegistry });
};
exports.typeTypeDefinition = typeTypeDefinition;
// Type inference for match expressions
const typeMatch = (expr, state) => {
    // Type the expression being matched
    const exprResult = (0, expression_dispatcher_1.typeExpression)(expr.expression, state);
    let currentState = exprResult.state;
    // Type each case and ensure they all return the same type
    if (expr.cases.length === 0) {
        throw new Error("Match expression must have at least one case");
    }
    // Type first case to get result type
    const firstCaseResult = typeMatchCase(expr.cases[0], exprResult.type, currentState);
    currentState = firstCaseResult.state;
    let resultType = firstCaseResult.type;
    let allEffects = (0, types_1.unionEffects)(exprResult.effects, firstCaseResult.effects);
    // Type remaining cases and unify with result type
    for (let i = 1; i < expr.cases.length; i++) {
        const caseResult = typeMatchCase(expr.cases[i], exprResult.type, currentState);
        currentState = caseResult.state;
        allEffects = (0, types_1.unionEffects)(allEffects, caseResult.effects);
        // Unify case result type with overall result type
        currentState = (0, unify_1.unify)(resultType, caseResult.type, currentState, expr.cases[i].location.start);
        resultType = (0, substitute_1.substitute)(resultType, currentState.substitution);
    }
    return (0, types_1.createTypeResult)(resultType, allEffects, currentState);
};
exports.typeMatch = typeMatch;
// Type a single match case
const typeMatchCase = (matchCase, matchedType, state) => {
    // Type the pattern and get bindings
    const patternResult = typePattern(matchCase.pattern, matchedType, state);
    // Create new environment with pattern bindings
    const newEnv = new Map(patternResult.state.environment);
    for (const [name, type] of patternResult.bindings) {
        newEnv.set(name, { type, quantifiedVars: [] });
    }
    const envState = { ...patternResult.state, environment: newEnv };
    // Type the expression with pattern bindings in scope
    return (0, expression_dispatcher_1.typeExpression)(matchCase.expression, envState);
};
// Type a pattern and return bindings
const typePattern = (pattern, expectedType, state) => {
    const bindings = new Map();
    switch (pattern.kind) {
        case "wildcard":
            // Wildcard matches anything, no bindings
            return { state, bindings };
        case "variable":
            // Variable binds to the expected type
            bindings.set(pattern.name, expectedType);
            return { state, bindings };
        case "constructor": {
            // Constructor pattern matching with type variable handling
            let actualType = expectedType;
            let currentState = state;
            // If expected type is a type variable, we need to find the ADT from the constructor
            if ((0, helpers_1.isTypeKind)(expectedType, "variable")) {
                // Find which ADT this constructor belongs to
                let foundAdt = null;
                for (const [adtName, adtInfo] of state.adtRegistry) {
                    if (adtInfo.constructors.has(pattern.name)) {
                        foundAdt = adtName;
                        break;
                    }
                }
                if (!foundAdt) {
                    throw new Error(`Unknown constructor: ${pattern.name}`);
                }
                // Create the ADT type with fresh type variables for type parameters
                const adtInfo = state.adtRegistry.get(foundAdt);
                const typeArgs = [];
                const substitution = new Map();
                for (let i = 0; i < adtInfo.typeParams.length; i++) {
                    const [freshVar, nextState] = (0, type_operations_1.freshTypeVariable)(currentState);
                    typeArgs.push(freshVar);
                    substitution.set(adtInfo.typeParams[i], freshVar);
                    currentState = nextState;
                }
                actualType = { kind: "variant", name: foundAdt, args: typeArgs };
                // Unify the type variable with the ADT type
                currentState = (0, unify_1.unify)(expectedType, actualType, currentState, undefined);
            }
            else if (!(0, helpers_1.isTypeKind)(expectedType, "variant")) {
                throw new Error(`Pattern expects constructor but got ${(0, helpers_1.typeToString)(expectedType, state.substitution)}`);
            }
            // Look up constructor in ADT registry
            if (!(0, helpers_1.isTypeKind)(actualType, "variant")) {
                throw new Error(`Internal error: actualType should be variant but got ${actualType.kind}`);
            }
            const adtInfo = state.adtRegistry.get(actualType.name);
            if (!adtInfo) {
                throw new Error(`Unknown ADT: ${actualType.name}`);
            }
            const constructorArgs = adtInfo.constructors.get(pattern.name);
            if (!constructorArgs) {
                throw new Error(`Unknown constructor: ${pattern.name} for ADT ${actualType.name}`);
            }
            // Create a substitution from type parameters to actual type arguments
            const paramSubstitution = new Map();
            for (let i = 0; i < adtInfo.typeParams.length; i++) {
                paramSubstitution.set(adtInfo.typeParams[i], actualType.args[i]);
            }
            // Substitute type parameters with actual type arguments
            const substitutedArgs = constructorArgs.map((arg) => (0, substitute_1.substitute)(arg, paramSubstitution));
            // Check argument count
            if (pattern.args.length !== substitutedArgs.length) {
                throw new Error(`Constructor ${pattern.name} expects ${substitutedArgs.length} arguments but got ${pattern.args.length}`);
            }
            // Type each argument pattern
            for (let i = 0; i < pattern.args.length; i++) {
                const argResult = typePattern(pattern.args[i], substitutedArgs[i], currentState);
                currentState = argResult.state;
                // Merge bindings
                for (const [name, type] of argResult.bindings) {
                    bindings.set(name, type);
                }
            }
            return { state: currentState, bindings };
        }
        case "literal": {
            // Literal patterns need to match the expected type
            let literalType;
            if (typeof pattern.value === "number") {
                literalType = (0, ast_1.intType)();
            }
            else if (typeof pattern.value === "string") {
                literalType = (0, ast_1.stringType)();
            }
            else {
                throw new Error(`Unsupported literal pattern: ${pattern.value}`);
            }
            const unifiedState = (0, unify_1.unify)(expectedType, literalType, state, pattern.location.start);
            return { state: unifiedState, bindings };
        }
        default:
            throw new Error(`Unsupported pattern kind: ${pattern.kind}`);
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,