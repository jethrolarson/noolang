24f6b89712f9c7f13bc89b506621e0ca
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.substituteConstraint = exports.substitute = void 0;
const helpers_1 = require("./helpers");
// Performance tracking for substitute
let substituteCallCount = 0;
let totalSubstituteTime = 0;
// Cache for substitution results to avoid repeated work
const substituteCache = new Map();
// Apply substitution to a type
const substitute = (type, substitution) => {
    const startTime = Date.now();
    substituteCallCount++;
    let result;
    // Generate cache key - only for type variables as they're most common
    if (type.kind === 'variable' && substitution.size < 20) {
        const cacheKey = `${type.name}:${Array.from(substitution.entries()).map(([k, v]) => `${k}=${v.kind}`).join(',')}`;
        const cached = substituteCache.get(cacheKey);
        if (cached) {
            result = cached;
        }
        else {
            result = substituteWithCache(type, substitution, new Set());
            if (substituteCache.size < 1000) { // Prevent unbounded cache growth
                substituteCache.set(cacheKey, result);
            }
        }
    }
    else {
        result = substituteWithCache(type, substitution, new Set());
    }
    const elapsed = Date.now() - startTime;
    totalSubstituteTime += elapsed;
    // Stats tracking (disabled for clean output)
    return result;
};
exports.substitute = substitute;
const substituteWithCache = (type, substitution, seen) => {
    switch (type.kind) {
        case "variable": {
            if (seen.has(type.name)) {
                // Cycle detected, return original variable
                return type;
            }
            const sub = substitution.get(type.name);
            if (sub) {
                seen.add(type.name);
                const result = substituteWithCache(sub, substitution, seen);
                seen.delete(type.name);
                return result;
            }
            return type;
        }
        case "function":
            return {
                ...type,
                params: type.params.map((param) => substituteWithCache(param, substitution, seen)),
                return: substituteWithCache(type.return, substitution, seen),
                constraints: type.constraints?.map((c) => (0, exports.substituteConstraint)(c, substitution)),
            };
        case "list":
            return {
                ...type,
                element: substituteWithCache(type.element, substitution, seen),
            };
        case "tuple":
            return {
                ...type,
                elements: type.elements.map((el) => substituteWithCache(el, substitution, seen)),
            };
        case "record":
            return {
                ...type,
                fields: (0, helpers_1.mapObject)(type.fields, (v, k) => substituteWithCache(v, substitution, seen)),
            };
        case "union":
            return {
                ...type,
                types: type.types.map((t) => substituteWithCache(t, substitution, seen)),
            };
        case "variant":
            return {
                ...type,
                args: type.args.map((arg) => substituteWithCache(arg, substitution, seen)),
            };
        default:
            return type;
    }
};
// Apply substitution to a constraint
const substituteConstraint = (constraint, substitution) => {
    switch (constraint.kind) {
        case "is":
            return constraint; // No substitution needed for is constraints
        case "hasField":
            return {
                ...constraint,
                fieldType: (0, exports.substitute)(constraint.fieldType, substitution),
            };
        case "implements":
            return constraint; // No substitution needed for implements constraints
        case "custom":
            return {
                ...constraint,
                args: constraint.args.map((arg) => (0, exports.substitute)(arg, substitution)),
            };
        default:
            return constraint;
    }
};
exports.substituteConstraint = substituteConstraint;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,