{"file":"/workspace/test/closure.test.ts","mappings":"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","names":[],"sources":["/workspace/test/closure.test.ts"],"sourcesContent":["import { Evaluator, Value } from \"../src/evaluator\";\nimport { parse } from \"../src/parser/parser\";\nimport { Lexer } from \"../src/lexer\";\n\nfunction unwrapValue(val: Value): any {\n  if (val === null) return null;\n  if (typeof val !== \"object\") return val;\n  switch (val.tag) {\n    case \"number\":\n      return val.value;\n    case \"string\":\n      return val.value;\n    case \"constructor\":\n      if (val.name === \"True\") return true;\n      if (val.name === \"False\") return false;\n      return val;\n    case \"list\":\n      return val.values.map(unwrapValue);\n    case \"tuple\":\n      return val.values.map(unwrapValue);\n    case \"record\": {\n      const obj: any = {};\n      for (const k in val.fields) obj[k] = unwrapValue(val.fields[k]);\n      return obj;\n    }\n    default:\n      return val;\n  }\n}\n\ndescribe(\"Closure behavior\", () => {\n  function evalNoo(src: string) {\n    const lexer = new Lexer(src);\n    const tokens = lexer.tokenize();\n    const program = parse(tokens);\n    const evaluator = new Evaluator();\n    return evaluator.evaluateProgram(program).finalResult;\n  }\n\n  test(\"simple closure: makeAdder\", () => {\n    const src = `\n      makeAdder = fn x => fn y => x + y;\n      add5 = makeAdder 5;\n      result = add5 10;\n      result\n    `;\n    expect(unwrapValue(evalNoo(src))).toBe(15);\n  });\n\n  test(\"closure in a record\", () => {\n    const code = `\n      makeCounter = fn start => { @value start };\n      counter = makeCounter 10;\n      result = (@value counter);\n      result\n    `;\n    const lexer = new Lexer(code);\n    const tokens = lexer.tokenize();\n    const program = parse(tokens);\n    const evaluator = new Evaluator();\n    const result = evaluator.evaluateProgram(program);\n\n    expect(unwrapValue(result.finalResult)).toBe(10);\n  });\n\n  test(\"closure with function in record\", () => {\n    const code = `\n      makeCounter = fn start => { @value start };\n      counter1 = makeCounter 10;\n      counter2 = makeCounter 20;\n      result1 = (@value counter1);\n      result2 = (@value counter2);\n      result1 + result2\n    `;\n    const lexer = new Lexer(code);\n    const tokens = lexer.tokenize();\n    const program = parse(tokens);\n    const evaluator = new Evaluator();\n    const result = evaluator.evaluateProgram(program);\n\n    expect(unwrapValue(result.finalResult)).toBe(30);\n  });\n});\n"],"version":3}