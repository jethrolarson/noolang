c41c424fd9e1b527ba45197325790a22
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Evaluator = exports.createConstructor = exports.isConstructor = exports.createUnit = exports.isUnit = exports.createTuple = exports.isTuple = exports.createNativeFunction = exports.isNativeFunction = exports.createFunction = exports.isFunction = exports.createRecord = exports.isRecord = exports.createList = exports.isList = exports.boolValue = exports.isBool = exports.createBool = exports.createFalse = exports.createTrue = exports.createString = exports.isString = exports.createNumber = exports.isNumber = exports.createCell = exports.isCell = void 0;
const defaultFs = __importStar(require("node:fs"));
const defaultPath = __importStar(require("node:path"));
const errors_1 = require("./errors");
const format_1 = require("./format");
const lexer_1 = require("./lexer");
const parser_1 = require("./parser/parser");
const isCell = (val) => val && typeof val === "object" && val.cell === true && "value" in val;
exports.isCell = isCell;
const createCell = (value) => ({ cell: true, value });
exports.createCell = createCell;
const isNumber = (value) => value.tag === "number";
exports.isNumber = isNumber;
const createNumber = (value) => ({
    tag: "number",
    value,
});
exports.createNumber = createNumber;
const isString = (value) => value.tag === "string";
exports.isString = isString;
const createString = (value) => ({
    tag: "string",
    value,
});
exports.createString = createString;
const createTrue = () => ({
    tag: "constructor",
    name: "True",
    args: [],
});
exports.createTrue = createTrue;
const createFalse = () => ({
    tag: "constructor",
    name: "False",
    args: [],
});
exports.createFalse = createFalse;
const createBool = (value) => (0, exports.createConstructor)(value ? "True" : "False", []);
exports.createBool = createBool;
const isBool = (value) => value.tag === "constructor" &&
    (value.name === "True" || value.name === "False");
exports.isBool = isBool;
const boolValue = (value) => {
    if (value.tag === "constructor" && value.name === "True")
        return true;
    if (value.tag === "constructor" && value.name === "False")
        return false;
    throw new Error(`Expected Bool constructor, got ${value.tag}`);
};
exports.boolValue = boolValue;
const isList = (value) => value.tag === "list";
exports.isList = isList;
const createList = (values) => ({ tag: "list", values });
exports.createList = createList;
const isRecord = (value) => value.tag === "record";
exports.isRecord = isRecord;
const createRecord = (fields) => ({
    tag: "record",
    fields,
});
exports.createRecord = createRecord;
const isFunction = (value) => value.tag === "function";
exports.isFunction = isFunction;
const createFunction = (fn) => ({
    tag: "function",
    fn,
});
exports.createFunction = createFunction;
const isNativeFunction = (value) => value.tag === "native";
exports.isNativeFunction = isNativeFunction;
const createNativeFunction = (name, fn) => {
    const wrap = (fn, curriedName) => ({
        tag: "native",
        name: curriedName,
        fn: (...args) => {
            const result = fn(...args);
            if (typeof result === "function") {
                return wrap(result, curriedName + "_curried");
            }
            return result;
        },
    });
    return wrap(fn, name);
};
exports.createNativeFunction = createNativeFunction;
const isTuple = (value) => value.tag === "tuple";
exports.isTuple = isTuple;
const createTuple = (values) => ({
    tag: "tuple",
    values,
});
exports.createTuple = createTuple;
const isUnit = (value) => value.tag === "unit";
exports.isUnit = isUnit;
const createUnit = () => ({ tag: "unit" });
exports.createUnit = createUnit;
const isConstructor = (value) => value.tag === "constructor";
exports.isConstructor = isConstructor;
const createConstructor = (name, args) => ({
    tag: "constructor",
    name,
    args,
});
exports.createConstructor = createConstructor;
// Helper to flatten semicolon-separated binary expressions into individual statements
const flattenStatements = (expr) => {
    if (expr.kind === "binary" && expr.operator === ";") {
        return [...flattenStatements(expr.left), ...flattenStatements(expr.right)];
    }
    return [expr];
};
class Evaluator {
    constructor(opts) {
        this.fs = opts?.fs ?? defaultFs;
        this.path = opts?.path ?? defaultPath;
        this.environment = new Map();
        this.environmentStack = [];
        this.initializeBuiltins();
        this.loadStdlib();
    }
    initializeBuiltins() {
        // Arithmetic operations
        this.environment.set('+', (0, exports.createNativeFunction)('+', (a) => (b) => {
            if ((0, exports.isNumber)(a) && (0, exports.isNumber)(b))
                return (0, exports.createNumber)(a.value + b.value);
            throw new Error(`Cannot add ${a?.tag || 'unit'} and ${b?.tag || 'unit'}`);
        }));
        this.environment.set('-', (0, exports.createNativeFunction)('-', (a) => (b) => {
            if ((0, exports.isNumber)(a) && (0, exports.isNumber)(b))
                return (0, exports.createNumber)(a.value - b.value);
            throw new Error(`Cannot subtract ${b?.tag || 'unit'} from ${a?.tag || 'unit'}`);
        }));
        this.environment.set('*', (0, exports.createNativeFunction)('*', (a) => (b) => {
            if ((0, exports.isNumber)(a) && (0, exports.isNumber)(b))
                return (0, exports.createNumber)(a.value * b.value);
            throw new Error(`Cannot multiply ${a?.tag || 'unit'} and ${b?.tag || 'unit'}`);
        }));
        this.environment.set('/', (0, exports.createNativeFunction)('/', (a) => (b) => {
            if ((0, exports.isNumber)(a) && (0, exports.isNumber)(b)) {
                if (b.value === 0) {
                    const error = (0, errors_1.createError)('RuntimeError', 'Division by zero', undefined, `${a.value} / ${b.value}`, 'Check that the divisor is not zero before dividing');
                    throw error;
                }
                return (0, exports.createNumber)(a.value / b.value);
            }
            throw new Error(`Cannot divide ${a?.tag || 'unit'} by ${b?.tag || 'unit'}`);
        }));
        // Comparison operations
        this.environment.set('==', (0, exports.createNativeFunction)('==', (a) => (b) => {
            if ((0, exports.isNumber)(a) && (0, exports.isNumber)(b)) {
                return (0, exports.createBool)(a.value === b.value);
            }
            else if ((0, exports.isString)(a) && (0, exports.isString)(b)) {
                return (0, exports.createBool)(a.value === b.value);
            }
            else if ((0, exports.isBool)(a) && (0, exports.isBool)(b)) {
                return (0, exports.createBool)((0, exports.boolValue)(a) === (0, exports.boolValue)(b));
            }
            else if ((0, exports.isUnit)(a) && (0, exports.isUnit)(b)) {
                return (0, exports.createTrue)();
            }
            else if ((0, exports.isUnit)(a) || (0, exports.isUnit)(b)) {
                return (0, exports.createFalse)();
            }
            return (0, exports.createFalse)();
        }));
        this.environment.set('!=', (0, exports.createNativeFunction)('!=', (a) => (b) => {
            if ((0, exports.isNumber)(a) && (0, exports.isNumber)(b)) {
                return (0, exports.createBool)(a.value !== b.value);
            }
            else if ((0, exports.isString)(a) && (0, exports.isString)(b)) {
                return (0, exports.createBool)(a.value !== b.value);
            }
            else if ((0, exports.isBool)(a) && (0, exports.isBool)(b)) {
                return (0, exports.createBool)((0, exports.boolValue)(a) !== (0, exports.boolValue)(b));
            }
            else if ((0, exports.isUnit)(a) && (0, exports.isUnit)(b)) {
                return (0, exports.createFalse)();
            }
            else if ((0, exports.isUnit)(a) || (0, exports.isUnit)(b)) {
                return (0, exports.createTrue)();
            }
            return (0, exports.createTrue)();
        }));
        this.environment.set('<', (0, exports.createNativeFunction)('<', (a) => (b) => {
            if ((0, exports.isNumber)(a) && (0, exports.isNumber)(b))
                return (0, exports.createBool)(a.value < b.value);
            throw new Error(`Cannot compare ${typeof a} and ${typeof b}`);
        }));
        this.environment.set('>', (0, exports.createNativeFunction)('>', (a) => (b) => {
            if ((0, exports.isNumber)(a) && (0, exports.isNumber)(b))
                return (0, exports.createBool)(a.value > b.value);
            throw new Error(`Cannot compare ${typeof a} and ${typeof b}`);
        }));
        this.environment.set('<=', (0, exports.createNativeFunction)('<=', (a) => (b) => {
            if ((0, exports.isNumber)(a) && (0, exports.isNumber)(b))
                return (0, exports.createBool)(a.value <= b.value);
            throw new Error(`Cannot compare ${typeof a} and ${typeof b}`);
        }));
        this.environment.set('>=', (0, exports.createNativeFunction)('>=', (a) => (b) => {
            if ((0, exports.isNumber)(a) && (0, exports.isNumber)(b))
                return (0, exports.createBool)(a.value >= b.value);
            throw new Error(`Cannot compare ${typeof a} and ${typeof b}`);
        }));
        // Pipeline operator
        this.environment.set('|', (0, exports.createNativeFunction)('|', (value) => (func) => {
            if ((0, exports.isFunction)(func))
                return func.fn(value);
            throw new Error(`Cannot apply non-function in thrush: ${func?.tag || 'unit'}`);
        }));
        // Left-to-right composition
        this.environment.set('|>', (0, exports.createNativeFunction)('|>', (f) => (g) => {
            if ((0, exports.isFunction)(f) && (0, exports.isFunction)(g)) {
                return (0, exports.createFunction)((x) => g.fn(f.fn(x)));
            }
            throw new Error(`Cannot compose non-functions: ${f?.tag || 'unit'} and ${g?.tag || 'unit'}`);
        }));
        // Right-to-left composition
        this.environment.set('<|', (0, exports.createNativeFunction)('<|', (f) => (g) => {
            if ((0, exports.isFunction)(f) && (0, exports.isFunction)(g)) {
                return (0, exports.createFunction)((x) => f.fn(g.fn(x)));
            }
            throw new Error(`Cannot compose non-functions: ${f?.tag || 'unit'} and ${g?.tag || 'unit'}`);
        }));
        // Semicolon operator
        this.environment.set(';', (0, exports.createNativeFunction)(';', (_left) => (right) => right));
        // Dollar operator (low precedence function application)
        this.environment.set('$', (0, exports.createNativeFunction)('$', (func) => (arg) => {
            if ((0, exports.isFunction)(func))
                return func.fn(arg);
            if ((0, exports.isNativeFunction)(func))
                return func.fn(arg);
            throw new Error(`Cannot apply non-function in dollar operator: ${func?.tag || 'unit'}`);
        }));
        // List operations - minimal built-ins for self-hosted functions
        this.environment.set('list_get', (0, exports.createNativeFunction)('list_get', (index) => (list) => {
            if ((0, exports.isNumber)(index) && (0, exports.isList)(list)) {
                const idx = index.value;
                if (idx >= 0 && idx < list.values.length) {
                    return list.values[idx];
                }
            }
            throw new Error('list_get: invalid index or not a list');
        }));
        // List operations
        this.environment.set('tail', (0, exports.createNativeFunction)('tail', (list) => {
            if ((0, exports.isList)(list) && list.values.length > 0)
                return (0, exports.createList)(list.values.slice(1));
            throw new Error('Cannot get tail of empty list or non-list');
        }));
        this.environment.set('cons', (0, exports.createNativeFunction)('cons', (head) => (tail) => {
            if ((0, exports.isList)(tail))
                return (0, exports.createList)([head, ...tail.values]);
            throw new Error('Second argument to cons must be a list');
        }));
        // List utility functions
        this.environment.set('map', (0, exports.createNativeFunction)('map', (func) => (list) => {
            if ((0, exports.isFunction)(func) && (0, exports.isList)(list)) {
                return (0, exports.createList)(list.values.map((item) => func.fn(item)));
            }
            throw new Error('map requires a function and a list');
        }));
        this.environment.set('filter', (0, exports.createNativeFunction)('filter', (pred) => (list) => {
            if ((0, exports.isFunction)(pred) && (0, exports.isList)(list)) {
                return (0, exports.createList)(list.values.filter((item) => {
                    const result = pred.fn(item);
                    if ((0, exports.isBool)(result)) {
                        return (0, exports.boolValue)(result);
                    }
                    // For non-boolean results, treat as truthy/falsy
                    return !(0, exports.isUnit)(result);
                }));
            }
            throw new Error('filter requires a predicate function and a list');
        }));
        this.environment.set('reduce', (0, exports.createNativeFunction)('reduce', (func) => (initial) => (list) => {
            if ((0, exports.isFunction)(func) && (0, exports.isList)(list)) {
                return list.values.reduce((acc, item) => {
                    const partial = func.fn(acc);
                    if ((0, exports.isFunction)(partial)) {
                        return partial.fn(item);
                    }
                    throw new Error('reduce function must return a function after first argument');
                }, initial);
            }
            throw new Error('reduce requires a function, initial value, and a list');
        }));
        this.environment.set('length', (0, exports.createNativeFunction)('length', (list) => {
            if ((0, exports.isList)(list))
                return (0, exports.createNumber)(list.values.length);
            throw new Error('length requires a list');
        }));
        this.environment.set('isEmpty', (0, exports.createNativeFunction)('isEmpty', (list) => {
            if ((0, exports.isList)(list))
                return (0, exports.createBool)(list.values.length === 0);
            throw new Error('isEmpty requires a list');
        }));
        this.environment.set('append', (0, exports.createNativeFunction)('append', (list1) => (list2) => {
            if ((0, exports.isList)(list1) && (0, exports.isList)(list2))
                return (0, exports.createList)([...list1.values, ...list2.values]);
            throw new Error('append requires two lists');
        }));
        // Math utilities
        this.environment.set('abs', (0, exports.createNativeFunction)('abs', (n) => {
            if ((0, exports.isNumber)(n))
                return (0, exports.createNumber)(Math.abs(n.value));
            throw new Error('abs requires a number');
        }));
        this.environment.set('max', (0, exports.createNativeFunction)('max', (a) => (b) => {
            if ((0, exports.isNumber)(a) && (0, exports.isNumber)(b))
                return (0, exports.createNumber)(Math.max(a.value, b.value));
            throw new Error('max requires two numbers');
        }));
        this.environment.set('min', (0, exports.createNativeFunction)('min', (a) => (b) => {
            if ((0, exports.isNumber)(a) && (0, exports.isNumber)(b))
                return (0, exports.createNumber)(Math.min(a.value, b.value));
            throw new Error('min requires two numbers');
        }));
        // Effectful functions
        this.environment.set('print', (0, exports.createNativeFunction)('print', (value) => {
            console.log((0, format_1.formatValue)(value));
            return value; // Return the value that was printed
        }));
        // String utilities
        this.environment.set('concat', (0, exports.createNativeFunction)('concat', (a) => (b) => {
            if ((0, exports.isString)(a) && (0, exports.isString)(b))
                return (0, exports.createString)(a.value + b.value);
            throw new Error('concat requires two strings');
        }));
        this.environment.set('toString', (0, exports.createNativeFunction)('toString', (value) => (0, exports.createString)(valueToString(value))));
        // Record utilities
        this.environment.set('hasKey', (0, exports.createNativeFunction)('hasKey', (record) => (key) => {
            if ((0, exports.isRecord)(record) && (0, exports.isString)(key)) {
                return (0, exports.createBool)(key.value in record.fields);
            }
            throw new Error('hasKey requires a record and a string key');
        }));
        this.environment.set('hasValue', (0, exports.createNativeFunction)('hasValue', (record) => (value) => {
            if ((0, exports.isRecord)(record)) {
                return (0, exports.createBool)(Object.values(record.fields).includes(value));
            }
            throw new Error('hasValue requires a record');
        }));
        this.environment.set('set', (0, exports.createNativeFunction)('set', (accessor) => (record) => (newValue) => {
            if ((0, exports.isNativeFunction)(accessor) && (0, exports.isRecord)(record)) {
                // For now, just handle simple field accessors
                const field = accessor.name?.replace('@', '');
                if (field) {
                    return (0, exports.createRecord)({ ...record.fields, [field]: newValue });
                }
            }
            throw new Error('set requires an accessor, record, and new value');
        }));
        // Tuple operations
        this.environment.set('tupleLength', (0, exports.createNativeFunction)('tupleLength', (tuple) => {
            if ((0, exports.isTuple)(tuple)) {
                return (0, exports.createNumber)(tuple.values.length);
            }
            throw new Error('tupleLength requires a tuple');
        }));
        this.environment.set('tupleIsEmpty', (0, exports.createNativeFunction)('tupleIsEmpty', (tuple) => {
            if ((0, exports.isTuple)(tuple)) {
                return (0, exports.createBool)(tuple.values.length === 0);
            }
            throw new Error('tupleIsEmpty requires a tuple');
        }));
        // Built-in ADT constructors are now self-hosted in stdlib.noo
        // Option utility functions
        this.environment.set('isSome', (0, exports.createNativeFunction)('isSome', (option) => {
            if ((0, exports.isConstructor)(option) && option.name === 'Some') {
                return (0, exports.createTrue)();
            }
            else if ((0, exports.isConstructor)(option) && option.name === 'None') {
                return (0, exports.createFalse)();
            }
            throw new Error('isSome requires an Option value');
        }));
        this.environment.set('isNone', (0, exports.createNativeFunction)('isNone', (option) => {
            if ((0, exports.isConstructor)(option) && option.name === 'None') {
                return (0, exports.createTrue)();
            }
            else if ((0, exports.isConstructor)(option) && option.name === 'Some') {
                return (0, exports.createFalse)();
            }
            throw new Error('isNone requires an Option value');
        }));
        this.environment.set('unwrap', (0, exports.createNativeFunction)('unwrap', (option) => {
            if ((0, exports.isConstructor)(option) &&
                option.name === 'Some' &&
                option.args.length === 1) {
                return option.args[0];
            }
            else if ((0, exports.isConstructor)(option) && option.name === 'None') {
                throw new Error('Cannot unwrap None value');
            }
            throw new Error('unwrap requires a Some value');
        }));
        // Result utility functions
        this.environment.set('isOk', (0, exports.createNativeFunction)('isOk', (result) => {
            if ((0, exports.isConstructor)(result) && result.name === 'Ok') {
                return (0, exports.createTrue)();
            }
            else if ((0, exports.isConstructor)(result) && result.name === 'Err') {
                return (0, exports.createFalse)();
            }
            throw new Error('isOk requires a Result value');
        }));
        this.environment.set('isErr', (0, exports.createNativeFunction)('isErr', (result) => {
            if ((0, exports.isConstructor)(result) && result.name === 'Err') {
                return (0, exports.createTrue)();
            }
            else if ((0, exports.isConstructor)(result) && result.name === 'Ok') {
                return (0, exports.createFalse)();
            }
            throw new Error('isErr requires a Result value');
        }));
        // Missing builtin implementations
        this.environment.set('println', (0, exports.createNativeFunction)('println', (value) => {
            console.log(valueToString(value));
            return value;
        }));
        this.environment.set('readFile', (0, exports.createNativeFunction)('readFile', (path) => {
            if (!(0, exports.isString)(path)) {
                throw new Error('readFile requires a string path');
            }
            try {
                const content = this.fs.readFileSync(path.value, 'utf-8');
                return (0, exports.createString)(content);
            }
            catch (error) {
                throw new Error(`Failed to read file: ${error}`);
            }
        }));
        this.environment.set('writeFile', (0, exports.createNativeFunction)('writeFile', (path) => (content) => {
            if (!(0, exports.isString)(path)) {
                throw new Error('writeFile requires a string path');
            }
            if (!(0, exports.isString)(content)) {
                throw new Error('writeFile requires string content');
            }
            try {
                this.fs.writeFileSync(path.value, content.value);
                return (0, exports.createUnit)();
            }
            catch (error) {
                throw new Error(`Failed to write file: ${error}`);
            }
        }));
        this.environment.set('log', (0, exports.createNativeFunction)('log', (message) => {
            if (!(0, exports.isString)(message)) {
                throw new Error('log requires a string message');
            }
            console.log(`[LOG] ${message.value}`);
            return (0, exports.createUnit)();
        }));
        this.environment.set('random', (0, exports.createNativeFunction)('random', () => {
            return (0, exports.createNumber)(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER));
        }));
        this.environment.set('randomRange', (0, exports.createNativeFunction)('randomRange', (min) => (max) => {
            if (!(0, exports.isNumber)(min) || !(0, exports.isNumber)(max)) {
                throw new Error('randomRange requires number arguments');
            }
            const minVal = Math.min(min.value, max.value);
            const maxVal = Math.max(min.value, max.value);
            return (0, exports.createNumber)(Math.floor(Math.random() * (maxVal - minVal + 1)) + minVal);
        }));
        this.environment.set('mutSet', (0, exports.createNativeFunction)('mutSet', (ref) => (value) => {
            if (!(0, exports.isCell)(ref)) {
                throw new Error('mutSet requires a mutable reference');
            }
            ref.value = value;
            return (0, exports.createUnit)();
        }));
        this.environment.set('mutGet', (0, exports.createNativeFunction)('mutGet', (ref) => {
            if (!(0, exports.isCell)(ref)) {
                throw new Error('mutGet requires a mutable reference');
            }
            return ref.value;
        }));
    }
    loadStdlib() {
        // Try multiple possible paths for stdlib.noo
        const possiblePaths = [
            this.path.join(__dirname, '..', 'stdlib.noo'),
            this.path.join(process.cwd(), 'stdlib.noo'),
            this.path.join(process.cwd(), 'src', '..', 'stdlib.noo'),
        ];
        let stdlibPath = null;
        for (const path of possiblePaths) {
            if (this.fs.existsSync(path)) {
                stdlibPath = path;
                break;
            }
        }
        if (!stdlibPath) {
            const msg = `[Noolang ERROR] Could not find stdlib.noo in any of these paths:\n  ${possiblePaths.join('\n  ')}`;
            console.error(msg);
            throw new Error(msg);
        }
        const stdlibContent = this.fs.readFileSync(stdlibPath, 'utf-8');
        const lexer = new lexer_1.Lexer(stdlibContent);
        const tokens = lexer.tokenize();
        const stdlibProgram = (0, parser_1.parse)(tokens);
        const allStatements = [];
        for (const statement of stdlibProgram.statements) {
            allStatements.push(...flattenStatements(statement));
        }
        for (const statement of allStatements) {
            this.evaluateExpression(statement);
        }
    }
    evaluateProgram(program, filePath) {
        if (filePath) {
            this.currentFileDir = this.path.dirname(this.path.resolve(filePath));
        }
        const executionTrace = [];
        if (program.statements.length === 0) {
            return {
                finalResult: (0, exports.createList)([]),
                executionTrace,
                environment: new Map(Array.from(this.environment.entries()).map(([k, v]) => [
                    k,
                    (0, exports.isCell)(v) ? v.value : v,
                ])),
            };
        }
        let finalResult = (0, exports.createList)([]);
        for (const statement of program.statements) {
            const result = this.evaluateExpression(statement);
            // Add to execution trace
            executionTrace.push({
                expression: this.expressionToString(statement),
                result: result,
                location: {
                    line: statement.location.start.line,
                    column: statement.location.start.column,
                },
            });
            finalResult = result;
        }
        return {
            finalResult,
            executionTrace,
            environment: new Map(Array.from(this.environment.entries()).map(([k, v]) => [
                k,
                (0, exports.isCell)(v) ? v.value : v,
            ])),
        };
    }
    evaluateDefinition(def) {
        // Check if this definition might be recursive by looking for the name in the value
        const isRecursive = this.containsVariable(def.value, def.name);
        if (isRecursive) {
            // For recursive definitions, we need a placeholder that gets updated
            const cell = (0, exports.createCell)((0, exports.createUnit)());
            this.environment.set(def.name, cell);
            const value = this.evaluateExpression(def.value);
            cell.value = value;
            return value;
        }
        else {
            // For non-recursive definitions, store the value directly
            const value = this.evaluateExpression(def.value);
            this.environment.set(def.name, value);
            return value;
        }
    }
    evaluateMutableDefinition(expr) {
        // Evaluate the right-hand side
        const value = this.evaluateExpression(expr.value);
        // Store a cell in the environment
        this.environment.set(expr.name, (0, exports.createCell)(value));
        return value;
    }
    evaluateMutation(expr) {
        // Look up the variable in the environment
        const cell = this.environment.get(expr.target);
        if (!(0, exports.isCell)(cell)) {
            throw new Error(`Cannot mutate non-mutable variable: ${expr.target}`);
        }
        // Evaluate the new value
        const value = this.evaluateExpression(expr.value);
        // Update the cell's value
        cell.value = value;
        return value;
    }
    evaluateExpression(expr) {
        switch (expr.kind) {
            case "literal":
                return this.evaluateLiteral(expr);
            case "variable":
                return this.evaluateVariable(expr);
            case "function":
                return this.evaluateFunction(expr);
            case "application":
                return this.evaluateApplication(expr);
            case "pipeline":
                return this.evaluatePipeline(expr);
            case "binary":
                return this.evaluateBinary(expr);
            case "if":
                return this.evaluateIf(expr);
            case "definition":
                return this.evaluateDefinition(expr);
            case "mutable-definition":
                return this.evaluateMutableDefinition(expr);
            case "mutation":
                return this.evaluateMutation(expr);
            case "import":
                return this.evaluateImport(expr);
            case "record":
                return this.evaluateRecord(expr);
            case "accessor":
                return this.evaluateAccessor(expr);
            case "tuple": {
                // Evaluate all elements and return a tagged tuple value
                const elements = expr.elements.map((e) => {
                    let val = this.evaluateExpression(e);
                    if ((0, exports.isCell)(val))
                        val = val.value;
                    return val;
                });
                return (0, exports.createTuple)(elements);
            }
            case "unit": {
                // Return unit value
                return (0, exports.createUnit)();
            }
            case "list": {
                // Evaluate all elements and return a tagged list value
                const elements = expr.elements.map((e) => {
                    let val = this.evaluateExpression(e);
                    if ((0, exports.isCell)(val))
                        val = val.value;
                    return val;
                });
                return (0, exports.createList)(elements);
            }
            case "where": {
                return this.evaluateWhere(expr);
            }
            case "typed":
                // Type annotations are erased at runtime; just evaluate the inner expression
                return this.evaluateExpression(expr.expression);
            case "constrained":
                // Constraint annotations are erased at runtime; just evaluate the inner expression
                return this.evaluateExpression(expr.expression);
            case "type-definition":
                return this.evaluateTypeDefinition(expr);
            case "match":
                return this.evaluateMatch(expr);
            default:
                throw new Error(`Unknown expression kind: ${expr.kind}`);
        }
    }
    evaluateLiteral(expr) {
        if (Array.isArray(expr.value)) {
            // If it's a list, evaluate each element
            return (0, exports.createList)(expr.value.map((element) => {
                if (element && typeof element === "object" && "kind" in element) {
                    // It's an AST node, evaluate it
                    return this.evaluateExpression(element);
                }
                else {
                    // It's already a value
                    return element;
                }
            }));
        }
        // Convert primitive values to tagged values
        if (typeof expr.value === "number") {
            return (0, exports.createNumber)(expr.value);
        }
        else if (typeof expr.value === "string") {
            return (0, exports.createString)(expr.value);
        }
        else if (expr.value === null) {
            // Handle unit literals (null in AST represents unit)
            return (0, exports.createUnit)();
        }
        // Should not reach here anymore since we removed boolean literals
        throw new Error(`Unsupported literal value: ${expr.value}`);
    }
    evaluateVariable(expr) {
        const value = this.environment.get(expr.name);
        if (value === undefined) {
            const error = (0, errors_1.createError)("RuntimeError", `Undefined variable: ${expr.name}`, {
                line: expr.location.start.line,
                column: expr.location.start.column,
                start: expr.location.start.line,
                end: expr.location.end.line,
            }, expr.name, `Define the variable before using it: ${expr.name} = value`);
            throw error;
        }
        // If it's a cell, return its value
        if ((0, exports.isCell)(value)) {
            return value.value;
        }
        return value;
    }
    evaluateFunction(expr) {
        const self = this;
        // Create a closure that captures the current environment
        const closureEnv = new Map(this.environment);
        function createCurriedFunction(params, body) {
            return (0, exports.createFunction)((arg) => {
                // Create a new environment for this function call
                const callEnv = new Map(closureEnv);
                // Set the parameter in the call environment
                const param = params[0];
                callEnv.set(param, arg);
                let result;
                if (params.length === 1) {
                    // Use environment stacking for efficient scoping
                    result = self.withNewEnvironment(() => {
                        self.environment = callEnv;
                        return self.evaluateExpression(body);
                    });
                }
                else {
                    // Create a function that captures the current parameter
                    const remainingParams = params.slice(1);
                    const nextFunction = (0, exports.createFunction)((nextArg) => {
                        const nextCallEnv = new Map(callEnv);
                        nextCallEnv.set(remainingParams[0], nextArg);
                        if (remainingParams.length === 1) {
                            return self.withNewEnvironment(() => {
                                self.environment = nextCallEnv;
                                return self.evaluateExpression(body);
                            });
                        }
                        else {
                            // Continue currying for remaining parameters
                            const remainingFunction = self.withNewEnvironment(() => {
                                self.environment = nextCallEnv;
                                return self.evaluateFunction({
                                    ...expr,
                                    params: remainingParams,
                                });
                            });
                            if ((0, exports.isFunction)(remainingFunction)) {
                                return remainingFunction.fn(nextArg);
                            }
                            else {
                                throw new Error(`Expected function but got: ${typeof remainingFunction}`);
                            }
                        }
                    });
                    result = nextFunction;
                }
                return result;
            });
        }
        return createCurriedFunction(expr.params, expr.body);
    }
    evaluateApplication(expr) {
        const func = this.evaluateExpression(expr.func);
        // Only apply the function to the arguments present in the AST
        const args = expr.args;
        if ((0, exports.isFunction)(func)) {
            // Handle tagged function application
            let result = func.fn;
            for (const argExpr of args) {
                let arg = this.evaluateExpression(argExpr);
                if ((0, exports.isCell)(arg))
                    arg = arg.value;
                if (typeof result === "function") {
                    result = result(arg);
                }
                else {
                    throw new Error(`Cannot apply argument to non-function: ${typeof result}`);
                }
            }
            return result;
        }
        else if ((0, exports.isNativeFunction)(func)) {
            // Handle native function application
            let result = func.fn;
            for (const argExpr of args) {
                let arg = this.evaluateExpression(argExpr);
                if ((0, exports.isCell)(arg))
                    arg = arg.value;
                if (typeof result === "function") {
                    result = result(arg);
                }
                else if ((0, exports.isFunction)(result)) {
                    result = result.fn(arg);
                }
                else if ((0, exports.isNativeFunction)(result)) {
                    result = result.fn(arg);
                }
                else {
                    throw new Error(`Cannot apply argument to non-function: ${typeof result}`);
                }
            }
            return result;
        }
        else {
            throw new Error(`Cannot apply non-function: ${typeof func} (${func?.tag || "unknown"})`);
        }
    }
    evaluatePipeline(expr) {
        // Pipeline should be function composition, not function application
        // For a pipeline like f |> g |> h, we want to compose them as h(g(f(x)))
        if (expr.steps.length === 1) {
            return this.evaluateExpression(expr.steps[0]);
        }
        // Start with the first function
        let composed = this.evaluateExpression(expr.steps[0]);
        // Compose with each subsequent function
        for (let i = 1; i < expr.steps.length; i++) {
            const nextFunc = this.evaluateExpression(expr.steps[i]);
            if ((0, exports.isFunction)(composed) && (0, exports.isFunction)(nextFunc)) {
                // Compose: nextFunc(composed(x))
                const composedFn = composed;
                const nextFuncFn = nextFunc;
                composed = (0, exports.createFunction)((x) => nextFuncFn.fn(composedFn.fn(x)));
            }
            else if ((0, exports.isNativeFunction)(composed) && (0, exports.isNativeFunction)(nextFunc)) {
                // Compose: nextFunc(composed(x))
                const composedFn = composed;
                const nextFuncFn = nextFunc;
                composed = (0, exports.createFunction)((x) => nextFuncFn.fn(composedFn.fn(x)));
            }
            else if ((0, exports.isFunction)(composed) && (0, exports.isNativeFunction)(nextFunc)) {
                // Compose: nextFunc(composed(x))
                const composedFn = composed;
                const nextFuncFn = nextFunc;
                composed = (0, exports.createFunction)((x) => nextFuncFn.fn(composedFn.fn(x)));
            }
            else if ((0, exports.isNativeFunction)(composed) && (0, exports.isFunction)(nextFunc)) {
                // Compose: nextFunc(composed(x))
                const composedFn = composed;
                const nextFuncFn = nextFunc;
                composed = (0, exports.createFunction)((x) => nextFuncFn.fn(composedFn.fn(x)));
            }
            else {
                throw new Error(`Cannot compose non-functions in pipeline: ${valueToString(composed)} and ${valueToString(nextFunc)}`);
            }
        }
        return composed;
    }
    evaluateBinary(expr) {
        if (expr.operator === ';') {
            // Handle semicolon operator (sequence)
            // Evaluate left expression and discard result
            this.evaluateExpression(expr.left);
            // Evaluate and return right expression
            return this.evaluateExpression(expr.right);
        }
        else if (expr.operator === '|') {
            // Handle thrush operator
            const left = this.evaluateExpression(expr.left);
            const right = this.evaluateExpression(expr.right);
            if ((0, exports.isFunction)(right)) {
                return right.fn(left);
            }
            else if ((0, exports.isNativeFunction)(right)) {
                return right.fn(left);
            }
            else {
                throw new Error(`Cannot apply non-function in thrush: ${valueToString(right)}`);
            }
        }
        else if (expr.operator === '|>') {
            // Handle pipeline operator (left-to-right composition)
            const left = this.evaluateExpression(expr.left);
            const right = this.evaluateExpression(expr.right);
            if ((0, exports.isFunction)(left) && (0, exports.isFunction)(right)) {
                // Left-to-right composition: g(f(x))
                return (0, exports.createFunction)((x) => right.fn(left.fn(x)));
            }
            else if ((0, exports.isNativeFunction)(left) && (0, exports.isNativeFunction)(right)) {
                // Left-to-right composition: g(f(x))
                return (0, exports.createFunction)((x) => right.fn(left.fn(x)));
            }
            else if ((0, exports.isFunction)(left) && (0, exports.isNativeFunction)(right)) {
                // Left-to-right composition: g(f(x))
                return (0, exports.createFunction)((x) => right.fn(left.fn(x)));
            }
            else if ((0, exports.isNativeFunction)(left) && (0, exports.isFunction)(right)) {
                // Left-to-right composition: g(f(x))
                return (0, exports.createFunction)((x) => right.fn(left.fn(x)));
            }
            else {
                throw new Error(`Cannot compose non-functions in pipeline: ${valueToString(left)} and ${valueToString(right)}`);
            }
        }
        else if (expr.operator === '<|') {
            // Handle right-to-left composition operator
            const left = this.evaluateExpression(expr.left);
            const right = this.evaluateExpression(expr.right);
            if ((0, exports.isFunction)(left) && (0, exports.isFunction)(right)) {
                // Right-to-left: f(g(x))
                return (0, exports.createFunction)((x) => left.fn(right.fn(x)));
            }
            else if ((0, exports.isNativeFunction)(left) && (0, exports.isNativeFunction)(right)) {
                // Right-to-left: f(g(x))
                return (0, exports.createFunction)((x) => left.fn(right.fn(x)));
            }
            else {
                throw new Error(`Cannot compose non-functions: ${valueToString(left)} and ${valueToString(right)}`);
            }
        }
        else {
            // Handle other binary operators (arithmetic, comparison, etc.)
            const left = this.evaluateExpression(expr.left);
            const right = this.evaluateExpression(expr.right);
            const leftVal = (0, exports.isCell)(left) ? left.value : left;
            const rightVal = (0, exports.isCell)(right) ? right.value : right;
            const operator = this.environment.get(expr.operator);
            const operatorVal = (0, exports.isCell)(operator) ? operator.value : operator;
            if (operatorVal && (0, exports.isNativeFunction)(operatorVal)) {
                const fn = operatorVal.fn(leftVal);
                if (typeof fn === 'function') {
                    return fn(rightVal);
                }
                else if ((0, exports.isFunction)(fn)) {
                    return fn.fn(rightVal);
                }
                else if ((0, exports.isNativeFunction)(fn)) {
                    return fn.fn(rightVal);
                }
                throw new Error(`Operator ${expr.operator} did not return a function`);
            }
            throw new Error(`Unknown operator: ${expr.operator}`);
        }
    }
    evaluateIf(expr) {
        const condition = this.evaluateExpression(expr.condition);
        // Check if condition is truthy - handle tagged boolean values
        let isTruthy = false;
        if ((0, exports.isBool)(condition)) {
            isTruthy = (0, exports.boolValue)(condition);
        }
        else if ((0, exports.isNumber)(condition)) {
            isTruthy = condition.value !== 0;
        }
        else if ((0, exports.isString)(condition)) {
            isTruthy = condition.value !== "";
        }
        else if ((0, exports.isUnit)(condition)) {
            isTruthy = true;
        }
        else {
            // For other types (functions, lists, records), consider them truthy
            isTruthy = true;
        }
        if (isTruthy) {
            return this.evaluateExpression(expr.then);
        }
        else {
            return this.evaluateExpression(expr.else);
        }
    }
    evaluateImport(expr) {
        try {
            const filePath = expr.path.endsWith(".noo")
                ? expr.path
                : `${expr.path}.noo`;
            let fullPath;
            if (this.path.isAbsolute(filePath)) {
                fullPath = filePath;
            }
            else if (this.currentFileDir) {
                fullPath = this.path.resolve(this.currentFileDir, filePath);
            }
            else {
                fullPath = this.path.resolve(filePath);
            }
            const content = this.fs.readFileSync(fullPath, "utf8");
            const lexer = new lexer_1.Lexer(content);
            const tokens = lexer.tokenize();
            const program = (0, parser_1.parse)(tokens);
            const tempEvaluator = new Evaluator({ fs: this.fs, path: this.path });
            const result = tempEvaluator.evaluateProgram(program, fullPath);
            return result.finalResult;
        }
        catch (error) {
            let errorMessage;
            if (error instanceof Error) {
                errorMessage = error.message;
                if (error.stack) {
                    errorMessage += "\nStack trace:\n" + error.stack;
                }
            }
            else if (typeof error === "object") {
                try {
                    errorMessage = JSON.stringify(error, null, 2);
                }
                catch (_e) {
                    errorMessage = String(error);
                }
            }
            else {
                errorMessage = String(error);
            }
            const cwd = process.cwd();
            const filePath = expr.path.endsWith(".noo")
                ? expr.path
                : `${expr.path}.noo`;
            let fullPath;
            if (this.path.isAbsolute(filePath)) {
                fullPath = filePath;
            }
            else if (this.currentFileDir) {
                fullPath = this.path.resolve(this.currentFileDir, filePath);
            }
            else {
                fullPath = this.path.resolve(filePath);
            }
            const structuredError = (0, errors_1.createError)("ImportError", `Failed to import '${expr.path}': ${errorMessage}\n  Tried to resolve: ${fullPath}\n  Current working directory: ${cwd}\n  Importing file directory: ${this.currentFileDir || "unknown"}\n  Suggestion: Use a path relative to the importing file, e.g., 'math_functions' or '../std/math'`, {
                line: expr.location.start.line,
                column: expr.location.start.column,
                start: expr.location.start.line,
                end: expr.location.end.line,
            }, `import "${expr.path}"`, "Check that the file exists and can be parsed, and that the path is correct relative to the importing file.");
            throw structuredError;
        }
    }
    evaluateRecord(expr) {
        const record = {};
        for (const field of expr.fields) {
            let val = this.evaluateExpression(field.value);
            if ((0, exports.isCell)(val))
                val = val.value;
            record[field.name] = val;
        }
        return (0, exports.createRecord)(record);
    }
    evaluateAccessor(expr) {
        // Return a function that takes a record and returns the field value
        return (0, exports.createNativeFunction)(`@${expr.field}`, (record) => {
            if ((0, exports.isRecord)(record)) {
                const field = expr.field;
                if (field in record.fields) {
                    return record.fields[field];
                }
            }
            throw new Error(`Field '${expr.field}' not found in record`);
        });
    }
    evaluateWhere(expr) {
        // Use environment stacking for where clause
        return this.withNewEnvironment(() => {
            // Evaluate all definitions in the where clause
            for (const def of expr.definitions) {
                if (def.kind === "definition") {
                    const value = this.evaluateExpression(def.value);
                    this.environment.set(def.name, value);
                }
                else if (def.kind === "mutable-definition") {
                    const value = this.evaluateExpression(def.value);
                    this.environment.set(def.name, (0, exports.createCell)(value));
                }
            }
            // Evaluate the main expression
            return this.evaluateExpression(expr.main);
        });
    }
    containsVariable(expr, varName) {
        switch (expr.kind) {
            case "variable":
                return expr.name === varName;
            case "function":
                // Don't check function parameters
                return this.containsVariable(expr.body, varName);
            case "application":
                return (this.containsVariable(expr.func, varName) ||
                    expr.args.some((arg) => this.containsVariable(arg, varName)));
            case "binary":
                return (this.containsVariable(expr.left, varName) ||
                    this.containsVariable(expr.right, varName));
            case "if":
                return (this.containsVariable(expr.condition, varName) ||
                    this.containsVariable(expr.then, varName) ||
                    this.containsVariable(expr.else, varName));
            case "definition":
                return this.containsVariable(expr.value, varName);
            case "mutable-definition":
                return this.containsVariable(expr.value, varName);
            case "mutation":
                return (expr.target === varName ||
                    this.containsVariable(expr.value, varName));
            case "record":
                return expr.fields.some((field) => this.containsVariable(field.value, varName));
            case "tuple":
                return expr.elements.some((element) => this.containsVariable(element, varName));
            case "list":
                return expr.elements.some((element) => this.containsVariable(element, varName));
            case "pipeline":
                return expr.steps.some((step) => this.containsVariable(step, varName));
            case "import":
            case "accessor":
            case "literal":
            case "unit":
            case "typed":
                return false;
            default:
                return false;
        }
    }
    // Efficient environment stack management
    pushEnvironment() {
        this.environmentStack.push(this.environment);
        this.environment = new Map(this.environment);
    }
    popEnvironment() {
        if (this.environmentStack[0]) {
            // biome-ignore lint/style/noNonNullAssertion: we checked
            this.environment = this.environmentStack.pop();
        }
    }
    withNewEnvironment(fn) {
        this.pushEnvironment();
        try {
            return fn();
        }
        finally {
            this.popEnvironment();
        }
    }
    // Get the current environment (useful for debugging)
    getEnvironment() {
        return new Map(Array.from(this.environment.entries()).map(([k, v]) => [
            k,
            (0, exports.isCell)(v) ? v.value : v,
        ]));
    }
    expressionToString(expr) {
        switch (expr.kind) {
            case "literal":
                if (Array.isArray(expr.value)) {
                    return `[${expr.value
                        .map((e) => this.expressionToString(e))
                        .join(" ")}]`;
                }
                return String(expr.value);
            case "variable":
                return expr.name;
            case "function":
                return `fn ${expr.params.join(" ")} => ${this.expressionToString(expr.body)}`;
            case "application":
                return `${this.expressionToString(expr.func)} ${expr.args
                    .map((arg) => this.expressionToString(arg))
                    .join(" ")}`;
            case "pipeline":
                return expr.steps
                    .map((step) => this.expressionToString(step))
                    .join(" | ");
            case "binary":
                return `${this.expressionToString(expr.left)} ${expr.operator} ${this.expressionToString(expr.right)}`;
            case "if":
                return `if ${this.expressionToString(expr.condition)} then ${this.expressionToString(expr.then)} else ${this.expressionToString(expr.else)}`;
            case "definition":
                return `${expr.name} = ${this.expressionToString(expr.value)}`;
            case "mutable-definition":
                return `${expr.name} = ${this.expressionToString(expr.value)}`;
            case "mutation":
                return `mut ${expr.target} = ${this.expressionToString(expr.value)}`;
            case "import":
                return `import "${expr.path}"`;
            case "record":
                return `{ ${expr.fields
                    .map((field) => `${field.name} = ${this.expressionToString(field.value)}`)
                    .join(", ")} }`;
            case "accessor":
                return `@${expr.field}`;
            case "where":
                return `${this.expressionToString(expr.main)} where (${expr.definitions
                    .map((d) => this.expressionToString(d))
                    .join("; ")})`;
            default:
                return "unknown";
        }
    }
    evaluateTypeDefinition(expr) {
        // Type definitions add constructors to the environment
        for (const _constructor of expr.constructors) {
            if (_constructor.args.length === 0) {
                // Nullary constructor: just create the constructor value
                const constructorValue = {
                    tag: "constructor",
                    name: _constructor.name,
                    args: [],
                };
                this.environment.set(_constructor.name, constructorValue);
            }
            else {
                // Create a simple constructor function that collects all arguments
                const createCurriedConstructor = (arity, name) => {
                    const collectArgs = (collectedArgs = []) => {
                        return (0, exports.createFunction)((nextArg) => {
                            const newArgs = [...collectedArgs, nextArg];
                            if (newArgs.length === arity) {
                                return { tag: "constructor", name, args: newArgs };
                            }
                            else {
                                return collectArgs(newArgs);
                            }
                        });
                    };
                    return collectArgs();
                };
                this.environment.set(_constructor.name, createCurriedConstructor(_constructor.args.length, _constructor.name));
            }
        }
        // Type definitions evaluate to unit
        return (0, exports.createUnit)();
    }
    evaluateMatch(expr) {
        // Evaluate the expression being matched
        const value = this.evaluateExpression(expr.expression);
        // Try each case until one matches
        for (const matchCase of expr.cases) {
            const matchResult = this.tryMatchPattern(matchCase.pattern, value);
            if (matchResult.matched) {
                // Use environment stacking for pattern bindings
                return this.withNewEnvironment(() => {
                    // Add bindings to environment
                    for (const [name, boundValue] of matchResult.bindings) {
                        this.environment.set(name, boundValue);
                    }
                    // Evaluate the case expression
                    return this.evaluateExpression(matchCase.expression);
                });
            }
        }
        throw new Error("No pattern matched in match expression");
    }
    tryMatchPattern(pattern, value) {
        const bindings = new Map();
        switch (pattern.kind) {
            case "wildcard":
                // Wildcard always matches
                return { matched: true, bindings };
            case "variable":
                // Variable always matches and binds the value
                bindings.set(pattern.name, value);
                return { matched: true, bindings };
            case "constructor": {
                // Constructor pattern only matches constructor values
                if (value.tag !== "constructor") {
                    return { matched: false, bindings };
                }
                // Check constructor name
                if (value.name !== pattern.name) {
                    return { matched: false, bindings };
                }
                // Check argument count
                if (pattern.args.length !== value.args.length) {
                    return { matched: false, bindings };
                }
                // Match each argument
                for (let i = 0; i < pattern.args.length; i++) {
                    const argMatch = this.tryMatchPattern(pattern.args[i], value.args[i]);
                    if (!argMatch.matched) {
                        return { matched: false, bindings };
                    }
                    // Merge bindings
                    for (const [name, boundValue] of argMatch.bindings) {
                        bindings.set(name, boundValue);
                    }
                }
                return { matched: true, bindings };
            }
            case "literal": {
                // Literal pattern matches if values are equal
                let matches = false;
                if (typeof pattern.value === "number" && (0, exports.isNumber)(value)) {
                    matches = pattern.value === value.value;
                }
                else if (typeof pattern.value === "string" && (0, exports.isString)(value)) {
                    matches = pattern.value === value.value;
                }
                return { matched: matches, bindings };
            }
            default:
                throw new Error(`Unsupported pattern kind: ${pattern.kind}`);
        }
    }
}
exports.Evaluator = Evaluator;
// Move valueToString to a standalone function
function valueToString(value) {
    if ((0, exports.isNumber)(value)) {
        return String(value.value);
    }
    else if ((0, exports.isString)(value)) {
        return `"${value.value}"`;
    }
    else if ((0, exports.isBool)(value)) {
        return (0, exports.boolValue)(value) ? "True" : "False";
    }
    else if ((0, exports.isList)(value)) {
        return `[${value.values.map(valueToString).join("; ")}]`;
    }
    else if ((0, exports.isTuple)(value)) {
        return `{${value.values.map(valueToString).join("; ")}}`;
    }
    else if ((0, exports.isRecord)(value)) {
        const fields = Object.entries(value.fields)
            .map(([k, v]) => `@${k} ${valueToString(v)}`)
            .join("; ");
        return `{${fields}}`;
    }
    else if ((0, exports.isFunction)(value)) {
        return "<function>";
    }
    else if ((0, exports.isNativeFunction)(value)) {
        return `<native:${value.name}>`;
    }
    else if ((0, exports.isConstructor)(value)) {
        if (value.args.length === 0) {
            return value.name;
        }
        else {
            return `${value.name} ${value.args.map(valueToString).join(" ")}`;
        }
    }
    else if ((0, exports.isUnit)(value)) {
        return "unit";
    }
    return "[object Object]";
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,