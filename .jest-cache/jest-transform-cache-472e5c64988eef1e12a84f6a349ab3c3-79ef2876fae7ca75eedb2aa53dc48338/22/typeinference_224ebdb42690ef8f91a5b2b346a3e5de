f363ded97710b7c9eff9c50500037c3c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeImplementDefinition = exports.typeConstraintDefinition = exports.typeConstrained = exports.typeTyped = exports.typeWhere = exports.typeList = exports.typeTuple = exports.typeAccessor = exports.typeRecord = exports.typeImport = exports.typeMutation = exports.typeMutableDefinition = exports.typeBinary = exports.typeIf = exports.typeDefinition = exports.typeFunction = exports.typeVariableExpr = exports.typeLiteral = void 0;
const ast_1 = require("../ast");
const type_errors_1 = require("./type-errors");
const helpers_1 = require("./helpers");
const unify_1 = require("./unify");
const substitute_1 = require("./substitute");
const expression_dispatcher_1 = require("./expression-dispatcher");
const types_1 = require("./types");
const constraints_1 = require("./constraints");
const type_operations_1 = require("./type-operations");
// Note: Main typeExpression is now in expression-dispatcher.ts
// This file only contains the individual type inference functions
// Type inference for literals
const typeLiteral = (expr, state) => {
    const value = expr.value;
    if (typeof value === 'number') {
        return (0, types_1.createPureTypeResult)((0, ast_1.intType)(), state);
    }
    else if (typeof value === 'string') {
        return (0, types_1.createPureTypeResult)((0, ast_1.stringType)(), state);
    }
    else {
        return (0, types_1.createPureTypeResult)((0, ast_1.unknownType)(), state);
    }
};
exports.typeLiteral = typeLiteral;
// Type inference for variables
const typeVariableExpr = (expr, state) => {
    const scheme = state.environment.get(expr.name);
    if (!scheme) {
        // Check if this is a constraint function before throwing error
        const { resolveConstraintVariable, createConstraintFunctionType } = require('./constraint-resolution');
        const constraintResult = resolveConstraintVariable(expr.name, state);
        if (constraintResult.resolved && constraintResult.needsResolution) {
            // This is a constraint function - create its type
            const constraintType = createConstraintFunctionType(constraintResult.constraintName, constraintResult.functionName, state);
            return (0, types_1.createPureTypeResult)(constraintType, state);
        }
        (0, helpers_1.throwTypeError)(location => (0, type_errors_1.undefinedVariableError)(expr.name, location), (0, helpers_1.getExprLocation)(expr));
    }
    const [instantiatedType, newState] = (0, type_operations_1.instantiate)(scheme, state);
    // Handle effects from TypeScheme
    const effects = scheme.effects || (0, types_1.emptyEffects)();
    return (0, types_1.createTypeResult)(instantiatedType, effects, newState);
};
exports.typeVariableExpr = typeVariableExpr;
// Helper function to count parameters in a function type
const countFunctionParams = (type) => {
    if (type.kind !== 'function')
        return 0;
    return type.params.length + countFunctionParams(type.return);
};
// Flatten a constraint expression into a list of atomic constraints
const flattenConstraintExpr = (expr) => {
    switch (expr.kind) {
        case 'is':
            // Validate constraint name
            (0, constraints_1.validateConstraintName)(expr.constraint);
            return [expr];
        case 'hasField':
        case 'implements':
        case 'custom':
            return [expr];
        case 'and':
            return [
                ...flattenConstraintExpr(expr.left),
                ...flattenConstraintExpr(expr.right),
            ];
        case 'or':
            return [
                ...flattenConstraintExpr(expr.left),
                ...flattenConstraintExpr(expr.right),
            ];
        case 'paren':
            return flattenConstraintExpr(expr.expr);
        default:
            return [];
    }
};
// Collect free variables used in an expression
const collectFreeVars = (expr, boundVars = new Set()) => {
    const freeVars = new Set();
    const walk = (e, bound) => {
        switch (e.kind) {
            case 'variable':
                if (!bound.has(e.name)) {
                    freeVars.add(e.name);
                }
                break;
            case 'function':
                // Parameters are bound in the function body
                const newBound = new Set([...bound, ...e.params]);
                walk(e.body, newBound);
                break;
            case 'definition':
                // The defined name is bound for the value expression
                const defBound = new Set([...bound, e.name]);
                walk(e.value, defBound);
                break;
            case 'application':
                walk(e.func, bound);
                e.args.forEach(arg => walk(arg, bound));
                break;
            case 'binary':
                walk(e.left, bound);
                walk(e.right, bound);
                // Operator is also a free variable
                if (!bound.has(e.operator)) {
                    freeVars.add(e.operator);
                }
                break;
            case 'if':
                walk(e.condition, bound);
                walk(e.then, bound);
                walk(e.else, bound);
                break;
            // Add other expression types as needed
            default:
                // For other types, recursively walk any sub-expressions
                // This is a simplified approach - in practice you'd handle each type
                break;
        }
    };
    walk(expr, boundVars);
    return freeVars;
};
// Update typeFunction to use closure culling
const typeFunction = (expr, state) => {
    // Collect free variables used in the function body
    const boundParams = new Set(expr.params);
    const freeVars = collectFreeVars(expr.body, boundParams);
    // Create a minimal environment with only what's needed
    const functionEnv = new Map();
    // Always include built-ins and stdlib essentials  
    const essentials = [
        '+',
        '-',
        '*',
        '/',
        '==',
        '!=',
        '<',
        '>',
        '<=',
        '>=',
        '|',
        '|>',
        '<|',
        ';',
        '$',
        'if',
        'length',
        'head',
        'tail',
        'map',
        'filter',
        'reduce',
        'isEmpty',
        'append',
        'concat',
        'toString',
        'abs',
        'max',
        'min',
        'print',
        'println',
        'readFile',
        'writeFile',
        'log',
        'random',
        'randomRange',
        'mutSet',
        'mutGet',
        'hasKey',
        'hasValue',
        'set',
        'tupleLength',
        'tupleIsEmpty',
        'list_get',
        'True',
        'False',
        'None',
        'Some',
        'Ok',
        'Err',
        'Bool',
        'Option',
        'Result',
    ];
    for (const essential of essentials) {
        if (state.environment.has(essential)) {
            functionEnv.set(essential, state.environment.get(essential));
        }
    }
    // Include only the free variables actually used
    for (const freeVar of freeVars) {
        if (state.environment.has(freeVar)) {
            functionEnv.set(freeVar, state.environment.get(freeVar));
        }
    }
    // Closure optimization: using minimal environment
    let currentState = { ...state, environment: functionEnv };
    const paramTypes = [];
    for (const param of expr.params) {
        const [paramType, nextState] = (0, type_operations_1.freshTypeVariable)(currentState);
        functionEnv.set(param, { type: paramType, quantifiedVars: [] });
        paramTypes.push(paramType);
        currentState = { ...nextState, environment: functionEnv };
    }
    // Type the function body with the function-local environment
    const bodyResult = (0, expression_dispatcher_1.typeExpression)(expr.body, currentState);
    currentState = bodyResult.state;
    // Decorate the function body with its inferred type
    expr.body.type = bodyResult.type;
    // Restore the original environment for the outer scope
    currentState = { ...currentState, environment: state.environment };
    // Special handling for constrained function bodies
    let funcType;
    if (expr.body.kind === 'constrained') {
        const constrainedBody = expr.body;
        const constraints = flattenConstraintExpr(constrainedBody.constraint);
        // If the constrained body has an explicit function type, use it as the innermost type
        if (constrainedBody.type.kind === 'function') {
            funcType = constrainedBody.type;
            // Apply constraints to this function type
            if (constraints.length > 0) {
                funcType.constraints = constraints;
                // Store the original constraint expression for display purposes
                funcType.originalConstraint = constrainedBody.constraint;
                // CRITICAL: Also propagate constraints to type variables in parameters
                // This ensures constraint validation works during function application
                for (const constraint of constraints) {
                    if (constraint.kind === 'is') {
                        (0, helpers_1.propagateConstraintToTypeVariable)(funcType, constraint);
                    }
                }
            }
            // If we have more parameters than the explicit type accounts for, wrap it
            const explicitParamCount = countFunctionParams(constrainedBody.type);
            const actualParamCount = paramTypes.length;
            if (actualParamCount > explicitParamCount) {
                // Wrap the explicit function type with additional parameter layers
                for (let i = actualParamCount - explicitParamCount - 1; i >= 0; i--) {
                    funcType = (0, ast_1.functionType)([paramTypes[i]], funcType);
                }
            }
        }
        else {
            // Build function type normally and apply constraints
            funcType = bodyResult.type;
            for (let i = paramTypes.length - 1; i >= 0; i--) {
                funcType = (0, ast_1.functionType)([paramTypes[i]], funcType);
            }
            if (constraints.length > 0 && funcType.kind === 'function') {
                funcType.constraints = constraints;
            }
        }
    }
    else {
        // Build the function type normally
        funcType = bodyResult.type;
        for (let i = paramTypes.length - 1; i >= 0; i--) {
            funcType = (0, ast_1.functionType)([paramTypes[i]], funcType);
        }
    }
    return (0, types_1.createTypeResult)(funcType, bodyResult.effects, currentState);
};
exports.typeFunction = typeFunction;
// Type inference for definitions
const typeDefinition = (expr, state) => {
    let currentState = state;
    // Add placeholder for recursion before inferring the value
    const [placeholderType, newState] = (0, type_operations_1.freshTypeVariable)(currentState);
    currentState = newState;
    const tempEnv = (0, helpers_1.mapSet)(currentState.environment, expr.name, {
        type: placeholderType,
        quantifiedVars: [],
    });
    currentState = { ...currentState, environment: tempEnv };
    // Type the value
    const valueResult = (0, expression_dispatcher_1.typeExpression)(expr.value, currentState);
    currentState = valueResult.state;
    // Decorate the value with its inferred type
    expr.value.type = valueResult.type;
    // Unify placeholder with actual type for recursion
    currentState = (0, unify_1.unify)(placeholderType, valueResult.type, currentState, (0, helpers_1.getExprLocation)(expr));
    // Remove the just-defined variable from the environment for generalization
    const envForGen = new Map(currentState.environment);
    envForGen.delete(expr.name);
    // Generalize the type before storing in the environment (apply substitution!)
    const scheme = (0, type_operations_1.generalize)(valueResult.type, envForGen, currentState.substitution);
    // Add to environment with generalized type
    const finalEnv = (0, helpers_1.mapSet)(currentState.environment, expr.name, scheme);
    currentState = { ...currentState, environment: finalEnv };
    // Freshen type variables for the definition's value (thread state)
    const [finalType, finalState] = (0, type_operations_1.freshenTypeVariables)(valueResult.type, new Map(), currentState);
    return (0, types_1.createTypeResult)(finalType, valueResult.effects, finalState);
};
exports.typeDefinition = typeDefinition;
// Type inference for if expressions
const typeIf = (expr, state) => {
    let currentState = state;
    // Type condition
    const conditionResult = (0, expression_dispatcher_1.typeExpression)(expr.condition, currentState);
    currentState = conditionResult.state;
    // Unify condition with boolean
    currentState = (0, unify_1.unify)(conditionResult.type, (0, ast_1.boolType)(), currentState, (0, helpers_1.getExprLocation)(expr));
    // Type then branch
    const thenResult = (0, expression_dispatcher_1.typeExpression)(expr.then, currentState);
    currentState = thenResult.state;
    // Type else branch
    const elseResult = (0, expression_dispatcher_1.typeExpression)(expr.else, currentState);
    currentState = elseResult.state;
    // Unify then and else types
    currentState = (0, unify_1.unify)(thenResult.type, elseResult.type, currentState, (0, helpers_1.getExprLocation)(expr));
    // Apply substitution to get final type
    const finalType = (0, substitute_1.substitute)(thenResult.type, currentState.substitution);
    return (0, types_1.createTypeResult)(finalType, (0, types_1.unionEffects)(conditionResult.effects, thenResult.effects, elseResult.effects), currentState);
};
exports.typeIf = typeIf;
// Type inference for binary expressions
const typeBinary = (expr, state) => {
    // Special handling for semicolon operator (sequence) - flatten to avoid O(n²) re-evaluation
    if (expr.operator === ';') {
        // Flatten the semicolon sequence and process each statement exactly once
        const statements = (0, type_operations_1.flattenStatements)(expr);
        let currentState = state;
        let finalType = null;
        let allEffects = (0, types_1.emptyEffects)();
        for (const statement of statements) {
            const result = (0, expression_dispatcher_1.typeExpression)(statement, currentState);
            currentState = result.state;
            finalType = result.type;
            allEffects = (0, types_1.unionEffects)(allEffects, result.effects);
        }
        return (0, types_1.createTypeResult)(finalType || (0, ast_1.unitType)(), allEffects, currentState);
    }
    let currentState = state;
    // Type left operand
    const leftResult = (0, expression_dispatcher_1.typeExpression)(expr.left, currentState);
    currentState = leftResult.state;
    // Type right operand
    const rightResult = (0, expression_dispatcher_1.typeExpression)(expr.right, currentState);
    currentState = rightResult.state;
    // Special handling for thrush operator (|) - function application
    if (expr.operator === '|') {
        // Thrush: a | b means b(a) - apply right function to left value
        if (rightResult.type.kind !== 'function') {
            (0, helpers_1.throwTypeError)(location => (0, type_errors_1.nonFunctionApplicationError)(rightResult.type, location), (0, helpers_1.getExprLocation)(expr));
        }
        // Check that the function can take the left value as its first argument
        if (rightResult.type.params.length < 1) {
            throw new Error(`Thrush operator requires function with at least one parameter, got ${rightResult.type.params.length}`);
        }
        currentState = (0, unify_1.unify)(rightResult.type.params[0], leftResult.type, currentState, (0, helpers_1.getExprLocation)(expr));
        // Return the function's return type (which may be a partially applied function)
        return (0, types_1.createTypeResult)(rightResult.type.return, (0, types_1.unionEffects)(leftResult.effects, rightResult.effects), currentState);
    }
    // Special handling for dollar operator ($) - low precedence function application
    if (expr.operator === '$') {
        // Dollar: a $ b means a(b) - apply left function to right value
        // Delegate to the same logic as regular function application
        const { typeApplication } = require('./function-application');
        // Create a synthetic ApplicationExpression for a $ b
        const syntheticApp = {
            kind: 'application',
            func: expr.left,
            args: [expr.right],
            location: expr.location
        };
        return typeApplication(syntheticApp, currentState);
    }
    // Get operator type from environment
    const operatorScheme = currentState.environment.get(expr.operator);
    if (!operatorScheme) {
        throw new Error(`Unknown operator: ${expr.operator}`);
    }
    const [operatorType, newState] = (0, type_operations_1.instantiate)(operatorScheme, currentState);
    currentState = newState;
    // Create fresh type variable for result
    const [resultType, finalState] = (0, type_operations_1.freshTypeVariable)(currentState);
    currentState = finalState;
    // Build expected function type
    const expectedType = (0, ast_1.functionType)([leftResult.type, rightResult.type], resultType);
    // Unify operator type with expected type
    currentState = (0, unify_1.unify)(operatorType, expectedType, currentState, (0, helpers_1.getExprLocation)(expr), {
        reason: 'operator_application',
        operation: `applying operator ${expr.operator}`,
        hint: `The ${expr.operator} operator expects compatible operand types. Left operand: ${(0, helpers_1.typeToString)(leftResult.type, currentState.substitution)}, Right operand: ${(0, helpers_1.typeToString)(rightResult.type, currentState.substitution)}.`,
    });
    // Apply substitution to get final result type
    const [finalResultType, finalResultState] = (0, type_operations_1.freshenTypeVariables)(resultType, new Map(), currentState);
    return (0, types_1.createTypeResult)(finalResultType, (0, types_1.unionEffects)(leftResult.effects, rightResult.effects), finalResultState);
};
exports.typeBinary = typeBinary;
// Type inference for mutable definitions
const typeMutableDefinition = (expr, state) => {
    // Handle mutable definitions similar to regular definitions
    const valueResult = (0, expression_dispatcher_1.typeExpression)(expr.value, state);
    const newEnv = (0, helpers_1.mapSet)(state.environment, expr.name, {
        type: valueResult.type,
        quantifiedVars: [],
    });
    return (0, types_1.createTypeResult)(valueResult.type, valueResult.effects, { ...valueResult.state, environment: newEnv });
};
exports.typeMutableDefinition = typeMutableDefinition;
// Type inference for mutations
const typeMutation = (expr, state) => {
    // For mutations, we need to check that the target exists and the value type matches
    const targetScheme = state.environment.get(expr.target);
    if (!targetScheme) {
        (0, helpers_1.throwTypeError)(location => (0, type_errors_1.undefinedVariableError)(expr.target, location), (0, helpers_1.getExprLocation)(expr));
    }
    const valueResult = (0, expression_dispatcher_1.typeExpression)(expr.value, state);
    const newState = (0, unify_1.unify)(targetScheme.type, valueResult.type, valueResult.state, (0, helpers_1.getExprLocation)(expr));
    return (0, types_1.createTypeResult)((0, ast_1.unitType)(), valueResult.effects, newState); // Mutations return unit
};
exports.typeMutation = typeMutation;
// Type inference for imports
const typeImport = (expr, state) => {
    // For now, assume imports return a record type
    return (0, types_1.createPureTypeResult)((0, ast_1.recordType)({}), state);
};
exports.typeImport = typeImport;
// Type inference for records
const typeRecord = (expr, state) => {
    const fields = {};
    let currentState = state;
    let allEffects = (0, types_1.emptyEffects)();
    for (const field of expr.fields) {
        const fieldResult = (0, expression_dispatcher_1.typeExpression)(field.value, currentState);
        fields[field.name] = fieldResult.type;
        currentState = fieldResult.state;
        allEffects = (0, types_1.unionEffects)(allEffects, fieldResult.effects);
    }
    return (0, types_1.createTypeResult)((0, ast_1.recordType)(fields), allEffects, currentState);
};
exports.typeRecord = typeRecord;
// Type inference for accessors
const typeAccessor = (expr, state) => {
    // Check cache first
    const fieldName = expr.field;
    const cachedType = state.accessorCache.get(fieldName);
    if (cachedType) {
        return (0, types_1.createPureTypeResult)(cachedType, state);
    }
    // Accessors return functions that take any record with the required field and return the field type
    // @bar should have type {bar: a, ...} -> a (allows extra fields)
    // Use a fresh type variable for the field type
    const [fieldType, nextState] = (0, type_operations_1.freshTypeVariable)(state);
    // Create a simple type variable for the record (no constraints on the variable itself)
    const [recordVar, finalState] = (0, type_operations_1.freshTypeVariable)(nextState);
    // Create a function type with constraints attached to the function type
    const funcType = (0, ast_1.functionType)([recordVar], fieldType);
    // Add the constraint directly to the parameter variable
    if (recordVar.kind === 'variable') {
        recordVar.constraints = [
            (0, ast_1.hasFieldConstraint)(recordVar.name, fieldName, fieldType),
        ];
    }
    // Cache the result for future use
    const resultState = {
        ...finalState,
        accessorCache: new Map(finalState.accessorCache).set(fieldName, funcType),
    };
    return (0, types_1.createPureTypeResult)(funcType, resultState);
};
exports.typeAccessor = typeAccessor;
// Type inference for tuples
const typeTuple = (expr, state) => {
    const elements = [];
    let currentState = state;
    let allEffects = (0, types_1.emptyEffects)();
    for (const element of expr.elements) {
        const elementResult = (0, expression_dispatcher_1.typeExpression)(element, currentState);
        elements.push(elementResult.type);
        currentState = elementResult.state;
        allEffects = (0, types_1.unionEffects)(allEffects, elementResult.effects);
    }
    return (0, types_1.createTypeResult)((0, ast_1.tupleType)(elements), allEffects, currentState);
};
exports.typeTuple = typeTuple;
// Type inference for lists
const typeList = (expr, state) => {
    if (expr.elements.length === 0) {
        // Empty list - we can't infer the element type
        return (0, types_1.createPureTypeResult)((0, ast_1.listTypeWithElement)((0, ast_1.typeVariable)('a')), state);
    }
    // Infer the type from the first element
    let currentState = state;
    const firstElementResult = (0, expression_dispatcher_1.typeExpression)(expr.elements[0], currentState);
    currentState = firstElementResult.state;
    const firstElementType = firstElementResult.type;
    let allEffects = firstElementResult.effects;
    // Check that all elements have the same type
    for (let i = 1; i < expr.elements.length; i++) {
        const elementResult = (0, expression_dispatcher_1.typeExpression)(expr.elements[i], currentState);
        currentState = elementResult.state;
        allEffects = (0, types_1.unionEffects)(allEffects, elementResult.effects);
        currentState = (0, unify_1.unify)(firstElementType, elementResult.type, currentState, {
            line: expr.location?.start.line || 1,
            column: expr.location?.start.column || 1,
        });
    }
    // Apply substitution to get the resolved element type
    const resolvedElementType = (0, substitute_1.substitute)(firstElementType, currentState.substitution);
    return (0, types_1.createTypeResult)((0, ast_1.listTypeWithElement)(resolvedElementType), allEffects, currentState);
};
exports.typeList = typeList;
// Type inference for where expressions
const typeWhere = (expr, state) => {
    // Create a new type environment with the where-clause definitions
    let whereEnv = new Map(state.environment);
    let currentState = { ...state, environment: whereEnv };
    // Type all definitions in the where clause
    for (const def of expr.definitions) {
        if (def.kind === 'definition') {
            const definitionDef = def;
            const valueResult = (0, expression_dispatcher_1.typeExpression)(definitionDef.value, currentState);
            currentState = valueResult.state;
            // Generalize with respect to the current whereEnv (excluding the new binding)
            const tempEnv = new Map(currentState.environment);
            tempEnv.delete(definitionDef.name);
            const scheme = (0, type_operations_1.generalize)(valueResult.type, tempEnv, currentState.substitution);
            whereEnv = (0, helpers_1.mapSet)(currentState.environment, definitionDef.name, scheme);
            currentState = { ...currentState, environment: whereEnv };
        }
        else if (def.kind === 'mutable-definition') {
            const mutableDef = def;
            const valueResult = (0, expression_dispatcher_1.typeExpression)(mutableDef.value, currentState);
            currentState = valueResult.state;
            whereEnv = (0, helpers_1.mapSet)(currentState.environment, mutableDef.name, {
                type: valueResult.type,
                quantifiedVars: [],
            });
            currentState = { ...currentState, environment: whereEnv };
        }
    }
    // Type the main expression
    const resultResult = (0, expression_dispatcher_1.typeExpression)(expr.main, currentState);
    return (0, types_1.createTypeResult)(resultResult.type, resultResult.effects, resultResult.state);
};
exports.typeWhere = typeWhere;
// Type inference for typed expressions
const typeTyped = (expr, state) => {
    // For typed expressions, validate that the explicit type matches the inferred type
    const inferredResult = (0, expression_dispatcher_1.typeExpression)(expr.expression, state);
    const explicitType = expr.type;
    const newState = (0, unify_1.unify)(inferredResult.type, explicitType, inferredResult.state, {
        line: expr.location?.start.line || 1,
        column: expr.location?.start.column || 1,
    });
    return (0, types_1.createTypeResult)(explicitType, inferredResult.effects, newState); // Use the explicit type
};
exports.typeTyped = typeTyped;
// Type inference for constrained expressions
const typeConstrained = (expr, state) => {
    // For constrained expressions, validate that the explicit type matches the inferred type
    const inferredResult = (0, expression_dispatcher_1.typeExpression)(expr.expression, state);
    const explicitType = expr.type;
    let currentState = (0, unify_1.unify)(inferredResult.type, explicitType, inferredResult.state, {
        line: expr.location?.start.line || 1,
        column: expr.location?.start.column || 1,
    });
    // Special case: if this constrained expression is inside a function body,
    // the constraint should apply to the function type, not to this expression
    // For now, we'll just return the explicit type without applying constraints here
    // The constraint will be handled at the function level
    // Return the explicit type without constraints applied
    return (0, types_1.createTypeResult)(explicitType, inferredResult.effects, currentState);
};
exports.typeConstrained = typeConstrained;
// Type constraint definition
const typeConstraintDefinition = (expr, state) => {
    const { name, typeParam, functions } = expr;
    // Create constraint signature
    const functionMap = new Map();
    for (const func of functions) {
        // Type the function signature, substituting the constraint type parameter
        const funcType = func.type;
        functionMap.set(func.name, funcType);
    }
    const signature = {
        name,
        typeParam,
        functions: functionMap,
    };
    // Add to constraint registry
    (0, types_1.addConstraintDefinition)(state.constraintRegistry, name, signature);
    // Constraint definitions have unit type
    return (0, types_1.createPureTypeResult)((0, ast_1.unitType)(), state);
};
exports.typeConstraintDefinition = typeConstraintDefinition;
// Type implement definition  
const typeImplementDefinition = (expr, state) => {
    const { constraintName, typeName, implementations } = expr;
    // Check if constraint exists
    const constraintSig = (0, types_1.getConstraintSignature)(state.constraintRegistry, constraintName);
    if (!constraintSig) {
        throw new Error(`Constraint '${constraintName}' not defined`);
    }
    // Type each implementation
    const implementationMap = new Map();
    let currentState = state;
    let allEffects = (0, types_1.emptyEffects)();
    for (const impl of implementations) {
        // Check if function is required by constraint
        const requiredType = constraintSig.functions.get(impl.name);
        if (!requiredType) {
            throw new Error(`Function '${impl.name}' not required by constraint '${constraintName}'`);
        }
        // Type the implementation
        const implResult = (0, expression_dispatcher_1.typeExpression)(impl.value, currentState);
        currentState = implResult.state;
        allEffects = (0, types_1.unionEffects)(allEffects, implResult.effects);
        // TODO: Check that implementation type matches required type
        // For now, we'll trust the implementation
        // Store in implementation map
        implementationMap.set(impl.name, {
            type: implResult.type,
            quantifiedVars: [], // TODO: compute quantified variables
            effects: implResult.effects,
        });
    }
    // Check that all required functions are implemented
    for (const [funcName] of constraintSig.functions) {
        if (!implementationMap.has(funcName)) {
            throw new Error(`Missing implementation for '${funcName}' in implementation of '${constraintName}' for '${typeName}'`);
        }
    }
    // Create constraint implementation
    const implementation = {
        functions: implementationMap,
    };
    // Add to constraint registry
    const success = (0, types_1.addConstraintImplementation)(currentState.constraintRegistry, constraintName, typeName, implementation);
    if (!success) {
        throw new Error(`Failed to add implementation of '${constraintName}' for '${typeName}'`);
    }
    // Implement definitions have unit type
    return (0, types_1.createTypeResult)((0, ast_1.unitType)(), allEffects, currentState);
};
exports.typeImplementDefinition = typeImplementDefinition;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,