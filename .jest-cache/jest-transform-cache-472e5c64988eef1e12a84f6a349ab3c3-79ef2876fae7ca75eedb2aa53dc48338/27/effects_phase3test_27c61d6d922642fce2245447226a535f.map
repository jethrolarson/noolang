{"file":"/workspace/test/effects_phase3.test.ts","mappings":";AAAA,+BAA+B;AAC/B,2EAA2E;;AAE3E,wCAAqC;AACrC,iDAA6C;AAC7C,wCAA2C;AAG3C,MAAM,UAAU,GAAG,CAAC,IAAY,EAAE,EAAE;IACnC,MAAM,KAAK,GAAG,IAAI,aAAK,CAAC,IAAI,CAAC,CAAC;IAC9B,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;IAChC,MAAM,OAAO,GAAG,IAAA,cAAK,EAAC,MAAM,CAAC,CAAC;IAE9B,OAAO,IAAA,mBAAW,EAAC,OAAO,CAAC,CAAC;AAC7B,CAAC,CAAC;AAEF,MAAM,aAAa,GAAG,CAAC,IAAY,EAAE,eAAyB,EAAE,EAAE;IACjE,MAAM,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;IAChC,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;IACxD,MAAM,QAAQ,GAAG,eAAe,CAAC,IAAI,EAAE,CAAC;IACxC,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACxC,OAAO,MAAM,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,CAAC,IAAY,EAAE,EAAE;IACnC,MAAM,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;IAChC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACpC,OAAO,MAAM,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,IAAY,EAAE,YAAqB,EAAE,EAAE;IAC3D,MAAM,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;AACtD,CAAC,CAAC;AAEF,QAAQ,CAAC,2DAA2D,EAAE,GAAG,EAAE;IAC1E,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC7C,IAAI,CAAC,iCAAiC,EAAE,GAAG,EAAE;YAC5C,aAAa,CAAC,UAAU,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC9C,aAAa,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACxC,aAAa,CAAC,qBAAqB,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC9C,aAAa,CAAC,qBAAqB,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAChD,aAAa,CAAC,gCAAgC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iCAAiC,EAAE,GAAG,EAAE;YAC5C,aAAa,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sCAAsC,EAAE,GAAG,EAAE;YACjD,aAAa,CAAC,kBAAkB,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC7C,aAAa,CACZ;;;IAGA,EACA,CAAC,OAAO,CAAC,CACT,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC7C,aAAa,CACZ;;;IAGA,EACA,CAAC,OAAO,CAAC,CACT,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4CAA4C,EAAE,GAAG,EAAE;QAC3D,IAAI,CAAC,sDAAsD,EAAE,GAAG,EAAE;YACjE,aAAa,CACZ;;;IAGA,EACA,CAAC,OAAO,CAAC,CACT,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACxD,aAAa,CACZ;;;;;;IAMA,EACA,CAAC,KAAK,EAAE,MAAM,CAAC,CACf,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACpD,aAAa,CACZ;;;;IAIA,EACA,CAAC,OAAO,CAAC,CACT,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAClD,aAAa,CACZ;;;IAGA,EACA,CAAC,OAAO,CAAC,CACT,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC7C,aAAa,CACZ;;;;;;IAMA,EACA,CAAC,MAAM,EAAE,OAAO,CAAC,CACjB,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uCAAuC,EAAE,GAAG,EAAE;QACtD,IAAI,CAAC,iDAAiD,EAAE,GAAG,EAAE;YAC5D,aAAa,CACZ;;IAEA,EACA,CAAC,OAAO,CAAC,CACT,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAClE,aAAa,CACZ;;IAEA,EACA,CAAC,MAAM,EAAE,OAAO,CAAC,CACjB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC7D,aAAa,CACZ;;IAEA,EACA,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CACzB,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;QACnD,IAAI,CAAC,wDAAwD,EAAE,GAAG,EAAE;YACnE,aAAa,CACZ;;;IAGA,EACA,CAAC,KAAK,EAAE,OAAO,CAAC,CAChB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;YAC1D,aAAa,CACZ;;;IAGA,EACA,CAAC,MAAM,EAAE,OAAO,CAAC,CACjB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wCAAwC,EAAE,GAAG,EAAE;YACnD,aAAa,CACZ;;;;;IAKA,EACA,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CACxB,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wCAAwC,EAAE,GAAG,EAAE;QACvD,IAAI,CAAC,0DAA0D,EAAE,GAAG,EAAE;YACrE,aAAa,CACZ;;;;;;;IAOA,EACA,CAAC,KAAK,EAAE,OAAO,CAAC,CAChB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gDAAgD,EAAE,GAAG,EAAE;YAC3D,aAAa,CACZ;;;;;;;IAOA,EACA,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CACxB,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qCAAqC,EAAE,GAAG,EAAE;QACpD,IAAI,CAAC,gDAAgD,EAAE,GAAG,EAAE;YAC3D,aAAa,CACZ;;;;IAIA,EACA,CAAC,OAAO,CAAC,CACT,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC/D,aAAa,CACZ;;;;IAIA,EACA,CAAC,OAAO,CAAC,CACT,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC9D,aAAa,CACZ;;;;;;;IAOA,EACA,CAAC,OAAO,CAAC,CACT,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;QAC5C,IAAI,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAChD,aAAa,CACZ;;;;;;;;;IASA,EACA,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAChC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iCAAiC,EAAE,GAAG,EAAE;YAC5C,aAAa,CACZ;;;;;;IAMA,EACA,CAAC,OAAO,CAAC,CACT,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACvD,aAAa,CACZ;;;;;;IAMA,EACA,CAAC,KAAK,EAAE,OAAO,CAAC,CAChB,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uCAAuC,EAAE,GAAG,EAAE;QACtD,IAAI,CAAC,gCAAgC,EAAE,GAAG,EAAE;YAC3C,UAAU,CAAC,eAAe,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;YACrD,UAAU,CAAC;;;IAGV,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC7C,aAAa,CACZ;;;;;IAKA,EACA,CAAC,OAAO,CAAC,CACT,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iDAAiD,EAAE,GAAG,EAAE;YAC5D,aAAa,CACZ;;;;;IAKA,EACA,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CACzB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;YAC1D,aAAa,CACZ;;;;IAIA,EACA,CAAC,OAAO,CAAC,CACT,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC/C,IAAI,CAAC,6DAA6D,EAAE,GAAG,EAAE;YACxE,MAAM,MAAM,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wDAAwD,EAAE,GAAG,EAAE;YACnE,MAAM,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;YAChC,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC/D,MAAM,MAAM,GAAG,UAAU,CAAC;;;;;;IAMzB,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC7C,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;YAC1C,UAAU,CAAC,YAAY,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAClE,UAAU,CAAC;;;;;;;;IAQV,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wDAAwD,EAAE,GAAG,EAAE;YACnE,aAAa,CACZ;;;IAGA,EACA,CAAC,OAAO,CAAC,CACT,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wCAAwC,EAAE,GAAG,EAAE;YACnD,aAAa,CACZ;;;IAGA,EACA,CAAC,OAAO,CAAC,CACT,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","names":[],"sources":["/workspace/test/effects_phase3.test.ts"],"sourcesContent":["// Phase 3 Effects System Tests\n// Testing effect validation, propagation, and built-in effectful functions\n\nimport { Lexer } from '../src/lexer';\nimport { parse } from '../src/parser/parser';\nimport { typeProgram } from '../src/typer';\nimport type { Effect } from '../src/ast';\n\nconst runNoolang = (code: string) => {\n\tconst lexer = new Lexer(code);\n\tconst tokens = lexer.tokenize();\n\tconst program = parse(tokens);\n\t\n\treturn typeProgram(program);\n};\n\nconst expectEffects = (code: string, expectedEffects: Effect[]) => {\n\tconst result = runNoolang(code);\n\tconst actualEffects = Array.from(result.effects).sort();\n\tconst expected = expectedEffects.sort();\n\texpect(actualEffects).toEqual(expected);\n\treturn result;\n};\n\nconst expectPure = (code: string) => {\n\tconst result = runNoolang(code);\n\texpect(result.effects.size).toBe(0);\n\treturn result;\n};\n\nconst expectError = (code: string, errorMessage?: string) => {\n\texpect(() => runNoolang(code)).toThrow(errorMessage);\n};\n\ndescribe('Effects Phase 3: Effect Validation and Built-in Functions', () => {\n\tdescribe('Built-in Effectful Functions', () => {\n\t\ttest('print function has write effect', () => {\n\t\t\texpectEffects('print 42', ['write']);\n\t\t});\n\n\t\ttest('println function has write effect', () => {\n\t\t\texpectEffects('println \"hello\"', ['write']);\n\t\t});\n\n\t\ttest('log function has log effect', () => {\n\t\t\texpectEffects('log \"debug message\"', ['log']);\n\t\t});\n\n\t\ttest('readFile function has read effect', () => {\n\t\t\texpectEffects('readFile \"test.txt\"', ['read']);\n\t\t});\n\n\t\ttest('writeFile function has write effect', () => {\n\t\t\texpectEffects('writeFile \"test.txt\" \"content\"', ['write']);\n\t\t});\n\n\t\ttest('random function has rand effect', () => {\n\t\t\texpectEffects('random', ['rand']);\n\t\t});\n\n\t\ttest('randomRange function has rand effect', () => {\n\t\t\texpectEffects('randomRange 1 10', ['rand']);\n\t\t});\n\n\t\ttest('mutSet function has state effect', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\tref = \"someRef\";\n\t\t\t\tmutSet ref 42\n\t\t\t`,\n\t\t\t\t['state']\n\t\t\t);\n\t\t});\n\n\t\ttest('mutGet function has state effect', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\tref = \"someRef\";\n\t\t\t\tmutGet ref\n\t\t\t`,\n\t\t\t\t['state']\n\t\t\t);\n\t\t});\n\t});\n\n\tdescribe('Effect Propagation in Function Composition', () => {\n\t\ttest('function calling effectful function inherits effects', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\tlogAndReturn = fn x => print x;\n\t\t\t\tlogAndReturn 42\n\t\t\t`,\n\t\t\t\t['write']\n\t\t\t);\n\t\t});\n\n\t\ttest('multiple effectful calls accumulate effects', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\tlogAndRead = fn filename => (\n\t\t\t\t\tlog \"Reading file\";\n\t\t\t\t\treadFile filename\n\t\t\t\t);\n\t\t\t\tlogAndRead \"test.txt\"\n\t\t\t`,\n\t\t\t\t['log', 'read']\n\t\t\t);\n\t\t});\n\n\t\ttest('nested function calls propagate effects', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\thelper = fn x => print x;\n\t\t\t\twrapper = fn x => helper (x + 1);\n\t\t\t\twrapper 5\n\t\t\t`,\n\t\t\t\t['write']\n\t\t\t);\n\t\t});\n\n\t\ttest('pipeline operations propagate effects', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\tlogger = fn x => print x;\n\t\t\t\t42 | logger\n\t\t\t`,\n\t\t\t\t['write']\n\t\t\t);\n\t\t});\n\n\t\ttest('composed functions merge effects', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\tprinter = fn x => print x;\n\t\t\t\trandomizer = fn _ => random;\n\t\t\t\tcompose = fn f => fn g => fn x => f (g x);\n\t\t\t\trandomPrint = compose printer randomizer;\n\t\t\t\trandomPrint 0\n\t\t\t`,\n\t\t\t\t['rand', 'write']\n\t\t\t);\n\t\t});\n\t});\n\n\tdescribe('Effect Propagation in Data Structures', () => {\n\t\ttest('lists with effectful elements propagate effects', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\t[print 1, print 2, print 3]\n\t\t\t`,\n\t\t\t\t['write']\n\t\t\t);\n\t\t});\n\n\t\ttest('records with effectful field values propagate effects', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\t{ @logged print 42, @random random }\n\t\t\t`,\n\t\t\t\t['rand', 'write']\n\t\t\t);\n\t\t});\n\n\t\ttest('tuples with effectful elements propagate effects', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\t{print 1, random, readFile \"test.txt\"}\n\t\t\t`,\n\t\t\t\t['rand', 'read', 'write']\n\t\t\t);\n\t\t});\n\t});\n\n\tdescribe('Effect Propagation in Control Flow', () => {\n\t\ttest('conditionals with effectful branches propagate effects', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\tcondition = True;\n\t\t\t\tif condition then (print \"yes\"; {}) else (log \"no\"; {})\n\t\t\t`,\n\t\t\t\t['log', 'write']\n\t\t\t);\n\t\t});\n\n\t\ttest('conditionals merge effects from both branches', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\tx = 5;\n\t\t\t\tif x > 0 then (print x; {}) else (random; {})\n\t\t\t`,\n\t\t\t\t['rand', 'write']\n\t\t\t);\n\t\t});\n\n\t\ttest('nested conditionals accumulate effects', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\tx = 5;\n\t\t\t\tif x > 0 then (\n\t\t\t\t\tif x > 10 then (readFile \"big.txt\"; {}) else (print x; {})\n\t\t\t\t) else (log \"negative\"; {})\n\t\t\t`,\n\t\t\t\t['log', 'read', 'write']\n\t\t\t);\n\t\t});\n\t});\n\n\tdescribe('Effect Propagation in Pattern Matching', () => {\n\t\ttest('pattern matching with effectful cases propagates effects', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\ttype Option a = Some a | None;\n\t\t\t\topt = Some 42;\n\t\t\t\tmatch opt with (\n\t\t\t\t\tSome x => (print x; {});\n\t\t\t\t\tNone => (log \"empty\"; {})\n\t\t\t\t)\n\t\t\t`,\n\t\t\t\t['log', 'write']\n\t\t\t);\n\t\t});\n\n\t\ttest('pattern matching merges effects from all cases', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\ttype Result a b = Ok a | Err b;\n\t\t\t\tresult = Ok 42;\n\t\t\t\tmatch result with (\n\t\t\t\t\tOk value => print value;\n\t\t\t\t\tErr msg => (log msg; random)\n\t\t\t\t)\n\t\t\t`,\n\t\t\t\t['log', 'rand', 'write']\n\t\t\t);\n\t\t});\n\t});\n\n\tdescribe('Higher-order Functions with Effects', () => {\n\t\ttest('map with effectful function propagates effects', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\tnumbers = [1, 2, 3];\n\t\t\t\tlogger = fn x => print x;\n\t\t\t\tmap logger numbers\n\t\t\t`,\n\t\t\t\t['write']\n\t\t\t);\n\t\t});\n\n\t\ttest('filter with effectful predicate propagates effects', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\tnumbers = [1, 2, 3, 4, 5];\n\t\t\t\teffectfulPred = fn x => (print x; x > 2);\n\t\t\t\tfilter effectfulPred numbers\n\t\t\t`,\n\t\t\t\t['write']\n\t\t\t);\n\t\t});\n\n\t\ttest('reduce with effectful function propagates effects', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\tnumbers = [1, 2, 3];\n\t\t\t\teffectfulSum = fn acc => fn x => (\n\t\t\t\t\tprint x;\n\t\t\t\t\tacc + x\n\t\t\t\t);\n\t\t\t\treduce effectfulSum 0 numbers\n\t\t\t`,\n\t\t\t\t['write']\n\t\t\t);\n\t\t});\n\t});\n\n\tdescribe('Complex Effect Combinations', () => {\n\t\ttest('function with multiple effect types', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\tcomplexFunction = fn filename => (\n\t\t\t\t\tnum = random;\n\t\t\t\t\tlog (concat \"Processing: \" filename);\n\t\t\t\t\tcontent = readFile filename;\n\t\t\t\t\tprint content;\n\t\t\t\t\tnum\n\t\t\t\t);\n\t\t\t\tcomplexFunction \"data.txt\"\n\t\t\t`,\n\t\t\t\t['log', 'rand', 'read', 'write']\n\t\t\t);\n\t\t});\n\n\t\ttest('recursive function with effects', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\tlogCount = fn n => (\n\t\t\t\t\tprint n;\n\t\t\t\t\tif n > 0 then logCount (n - 1) else 0\n\t\t\t\t);\n\t\t\t\tlogCount 3\n\t\t\t`,\n\t\t\t\t['write']\n\t\t\t);\n\t\t});\n\n\t\ttest('recursive functions with different effects', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\thelper = fn n effect => (\n\t\t\t\t\tif effect == \"log\" then (log \"message\"; {}) else (print \"message\"; {});\n\t\t\t\t\tif n > 0 then helper (n - 1) \"log\" else {}\n\t\t\t\t);\n\t\t\t\thelper 2 \"print\"\n\t\t\t`,\n\t\t\t\t['log', 'write']\n\t\t\t);\n\t\t});\n\t});\n\n\tdescribe('Effect System Architecture Validation', () => {\n\t\ttest('pure functions have no effects', () => {\n\t\t\texpectPure('fn x => x + 1');\n\t\t});\n\n\t\ttest('pure function application has no effects', () => {\n\t\t\texpectPure(`\n\t\t\t\tadd = fn x => fn y => x + y;\n\t\t\t\tadd 2 3\n\t\t\t`);\n\t\t});\n\n\t\ttest('effect propagation is transitive', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\tlevel1 = fn x => print x;\n\t\t\t\tlevel2 = fn x => level1 (x * 2);\n\t\t\t\tlevel3 = fn x => level2 (x + 1);\n\t\t\t\tlevel3 5\n\t\t\t`,\n\t\t\t\t['write']\n\t\t\t);\n\t\t});\n\n\t\ttest('effects are properly unioned across expressions', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\ta = print 1;     # write\n\t\t\t\tb = random;      # rand\n\t\t\t\tc = readFile \"test\"; # read\n\t\t\t\t{a, b, c}\n\t\t\t`,\n\t\t\t\t['rand', 'read', 'write']\n\t\t\t);\n\t\t});\n\n\t\ttest('function returning function preserves effects', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\tmakePrinter = fn prefix => fn x => print (concat prefix x);\n\t\t\t\tlogger = makePrinter \"LOG: \";\n\t\t\t\tlogger \"message\"\n\t\t\t`,\n\t\t\t\t['write']\n\t\t\t);\n\t\t});\n\t});\n\n\tdescribe('Effect Type System Integration', () => {\n\t\ttest('TypeResult includes effects field for effectful expressions', () => {\n\t\t\tconst result = runNoolang('print 42');\n\t\t\texpect(result).toHaveProperty('type');\n\t\t\texpect(result).toHaveProperty('effects');\n\t\t\texpect(result).toHaveProperty('state');\n\t\t\texpect(result.effects).toBeInstanceOf(Set);\n\t\t\texpect(result.effects.has('write')).toBe(true);\n\t\t});\n\n\t\ttest('TypeResult includes effects field for pure expressions', () => {\n\t\t\tconst result = runNoolang('42');\n\t\t\texpect(result).toHaveProperty('type');\n\t\t\texpect(result).toHaveProperty('effects');\n\t\t\texpect(result).toHaveProperty('state');\n\t\t\texpect(result.effects).toBeInstanceOf(Set);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('complex expressions have proper effect composition', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tloggedRandom = fn seed => (\n\t\t\t\t\tlog \"generating random\";\n\t\t\t\t\trandomRange seed (seed + 10)\n\t\t\t\t);\n\t\t\t\tloggedRandom 5\n\t\t\t`);\n\t\t\texpect(result.effects.has('log')).toBe(true);\n\t\t\texpect(result.effects.has('rand')).toBe(true);\n\t\t\texpect(result.effects.size).toBe(2);\n\t\t});\n\t});\n\n\tdescribe('Effect Validation Edge Cases', () => {\n\t\ttest('empty function has no effects', () => {\n\t\t\texpectPure('fn _ => 42');\n\t\t});\n\n\t\ttest('function with multiple pure operations has no effects', () => {\n\t\t\texpectPure(`\n\t\t\t\tcompute = fn x => (\n\t\t\t\t\ta = x + 1;\n\t\t\t\t\tb = a * 2;\n\t\t\t\t\tc = b - 3;\n\t\t\t\t\tc\n\t\t\t\t);\n\t\t\t\tcompute 5\n\t\t\t`);\n\t\t});\n\n\t\ttest('partially applied effectful function preserves effects', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\twritePartial = writeFile \"output.txt\";\n\t\t\t\twritePartial \"hello world\"\n\t\t\t`,\n\t\t\t\t['write']\n\t\t\t);\n\t\t});\n\n\t\ttest('curried effectful function composition', () => {\n\t\t\texpectEffects(\n\t\t\t\t`\n\t\t\t\twriter = writeFile \"output.txt\";\n\t\t\t\twriter \"content\"\n\t\t\t`,\n\t\t\t\t['write']\n\t\t\t);\n\t\t});\n\t});\n});"],"version":3}