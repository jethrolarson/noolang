3d3d005714860af9b55f9191c608d93f
"use strict";
// Phase 3 Effects System Tests
// Testing effect validation, propagation, and built-in effectful functions
Object.defineProperty(exports, "__esModule", { value: true });
const lexer_1 = require("../src/lexer");
const parser_1 = require("../src/parser/parser");
const typer_1 = require("../src/typer");
const runNoolang = (code) => {
    const lexer = new lexer_1.Lexer(code);
    const tokens = lexer.tokenize();
    const program = (0, parser_1.parse)(tokens);
    return (0, typer_1.typeProgram)(program);
};
const expectEffects = (code, expectedEffects) => {
    const result = runNoolang(code);
    const actualEffects = Array.from(result.effects).sort();
    const expected = expectedEffects.sort();
    expect(actualEffects).toEqual(expected);
    return result;
};
const expectPure = (code) => {
    const result = runNoolang(code);
    expect(result.effects.size).toBe(0);
    return result;
};
const expectError = (code, errorMessage) => {
    expect(() => runNoolang(code)).toThrow(errorMessage);
};
describe('Effects Phase 3: Effect Validation and Built-in Functions', () => {
    describe('Built-in Effectful Functions', () => {
        test('print function has write effect', () => {
            expectEffects('print 42', ['write']);
        });
        test('println function has write effect', () => {
            expectEffects('println "hello"', ['write']);
        });
        test('log function has log effect', () => {
            expectEffects('log "debug message"', ['log']);
        });
        test('readFile function has read effect', () => {
            expectEffects('readFile "test.txt"', ['read']);
        });
        test('writeFile function has write effect', () => {
            expectEffects('writeFile "test.txt" "content"', ['write']);
        });
        test('random function has rand effect', () => {
            expectEffects('random', ['rand']);
        });
        test('randomRange function has rand effect', () => {
            expectEffects('randomRange 1 10', ['rand']);
        });
        test('mutSet function has state effect', () => {
            expectEffects(`
				ref = "someRef";
				mutSet ref 42
			`, ['state']);
        });
        test('mutGet function has state effect', () => {
            expectEffects(`
				ref = "someRef";
				mutGet ref
			`, ['state']);
        });
    });
    describe('Effect Propagation in Function Composition', () => {
        test('function calling effectful function inherits effects', () => {
            expectEffects(`
				logAndReturn = fn x => print x;
				logAndReturn 42
			`, ['write']);
        });
        test('multiple effectful calls accumulate effects', () => {
            expectEffects(`
				logAndRead = fn filename => (
					log "Reading file";
					readFile filename
				);
				logAndRead "test.txt"
			`, ['log', 'read']);
        });
        test('nested function calls propagate effects', () => {
            expectEffects(`
				helper = fn x => print x;
				wrapper = fn x => helper (x + 1);
				wrapper 5
			`, ['write']);
        });
        test('pipeline operations propagate effects', () => {
            expectEffects(`
				logger = fn x => print x;
				42 | logger
			`, ['write']);
        });
        test('composed functions merge effects', () => {
            expectEffects(`
				printer = fn x => print x;
				randomizer = fn _ => random;
				compose = fn f => fn g => fn x => f (g x);
				randomPrint = compose printer randomizer;
				randomPrint 0
			`, ['rand', 'write']);
        });
    });
    describe('Effect Propagation in Data Structures', () => {
        test('lists with effectful elements propagate effects', () => {
            expectEffects(`
				[print 1, print 2, print 3]
			`, ['write']);
        });
        test('records with effectful field values propagate effects', () => {
            expectEffects(`
				{ @logged print 42, @random random }
			`, ['rand', 'write']);
        });
        test('tuples with effectful elements propagate effects', () => {
            expectEffects(`
				{print 1, random, readFile "test.txt"}
			`, ['rand', 'read', 'write']);
        });
    });
    describe('Effect Propagation in Control Flow', () => {
        test('conditionals with effectful branches propagate effects', () => {
            expectEffects(`
				condition = True;
				if condition then (print "yes"; {}) else (log "no"; {})
			`, ['log', 'write']);
        });
        test('conditionals merge effects from both branches', () => {
            expectEffects(`
				x = 5;
				if x > 0 then (print x; {}) else (random; {})
			`, ['rand', 'write']);
        });
        test('nested conditionals accumulate effects', () => {
            expectEffects(`
				x = 5;
				if x > 0 then (
					if x > 10 then (readFile "big.txt"; {}) else (print x; {})
				) else (log "negative"; {})
			`, ['log', 'read', 'write']);
        });
    });
    describe('Effect Propagation in Pattern Matching', () => {
        test('pattern matching with effectful cases propagates effects', () => {
            expectEffects(`
				type Option a = Some a | None;
				opt = Some 42;
				match opt with (
					Some x => (print x; {});
					None => (log "empty"; {})
				)
			`, ['log', 'write']);
        });
        test('pattern matching merges effects from all cases', () => {
            expectEffects(`
				type Result a b = Ok a | Err b;
				result = Ok 42;
				match result with (
					Ok value => print value;
					Err msg => (log msg; random)
				)
			`, ['log', 'rand', 'write']);
        });
    });
    describe('Higher-order Functions with Effects', () => {
        test('map with effectful function propagates effects', () => {
            expectEffects(`
				numbers = [1, 2, 3];
				logger = fn x => print x;
				map logger numbers
			`, ['write']);
        });
        test('filter with effectful predicate propagates effects', () => {
            expectEffects(`
				numbers = [1, 2, 3, 4, 5];
				effectfulPred = fn x => (print x; x > 2);
				filter effectfulPred numbers
			`, ['write']);
        });
        test('reduce with effectful function propagates effects', () => {
            expectEffects(`
				numbers = [1, 2, 3];
				effectfulSum = fn acc => fn x => (
					print x;
					acc + x
				);
				reduce effectfulSum 0 numbers
			`, ['write']);
        });
    });
    describe('Complex Effect Combinations', () => {
        test('function with multiple effect types', () => {
            expectEffects(`
				complexFunction = fn filename => (
					num = random;
					log (concat "Processing: " filename);
					content = readFile filename;
					print content;
					num
				);
				complexFunction "data.txt"
			`, ['log', 'rand', 'read', 'write']);
        });
        test('recursive function with effects', () => {
            expectEffects(`
				logCount = fn n => (
					print n;
					if n > 0 then logCount (n - 1) else 0
				);
				logCount 3
			`, ['write']);
        });
        test('recursive functions with different effects', () => {
            expectEffects(`
				helper = fn n effect => (
					if effect == "log" then (log "message"; {}) else (print "message"; {});
					if n > 0 then helper (n - 1) "log" else {}
				);
				helper 2 "print"
			`, ['log', 'write']);
        });
    });
    describe('Effect System Architecture Validation', () => {
        test('pure functions have no effects', () => {
            expectPure('fn x => x + 1');
        });
        test('pure function application has no effects', () => {
            expectPure(`
				add = fn x => fn y => x + y;
				add 2 3
			`);
        });
        test('effect propagation is transitive', () => {
            expectEffects(`
				level1 = fn x => print x;
				level2 = fn x => level1 (x * 2);
				level3 = fn x => level2 (x + 1);
				level3 5
			`, ['write']);
        });
        test('effects are properly unioned across expressions', () => {
            expectEffects(`
				a = print 1;     # write
				b = random;      # rand
				c = readFile "test"; # read
				{a, b, c}
			`, ['rand', 'read', 'write']);
        });
        test('function returning function preserves effects', () => {
            expectEffects(`
				makePrinter = fn prefix => fn x => print (concat prefix x);
				logger = makePrinter "LOG: ";
				logger "message"
			`, ['write']);
        });
    });
    describe('Effect Type System Integration', () => {
        test('TypeResult includes effects field for effectful expressions', () => {
            const result = runNoolang('print 42');
            expect(result).toHaveProperty('type');
            expect(result).toHaveProperty('effects');
            expect(result).toHaveProperty('state');
            expect(result.effects).toBeInstanceOf(Set);
            expect(result.effects.has('write')).toBe(true);
        });
        test('TypeResult includes effects field for pure expressions', () => {
            const result = runNoolang('42');
            expect(result).toHaveProperty('type');
            expect(result).toHaveProperty('effects');
            expect(result).toHaveProperty('state');
            expect(result.effects).toBeInstanceOf(Set);
            expect(result.effects.size).toBe(0);
        });
        test('complex expressions have proper effect composition', () => {
            const result = runNoolang(`
				loggedRandom = fn seed => (
					log "generating random";
					randomRange seed (seed + 10)
				);
				loggedRandom 5
			`);
            expect(result.effects.has('log')).toBe(true);
            expect(result.effects.has('rand')).toBe(true);
            expect(result.effects.size).toBe(2);
        });
    });
    describe('Effect Validation Edge Cases', () => {
        test('empty function has no effects', () => {
            expectPure('fn _ => 42');
        });
        test('function with multiple pure operations has no effects', () => {
            expectPure(`
				compute = fn x => (
					a = x + 1;
					b = a * 2;
					c = b - 3;
					c
				);
				compute 5
			`);
        });
        test('partially applied effectful function preserves effects', () => {
            expectEffects(`
				writePartial = writeFile "output.txt";
				writePartial "hello world"
			`, ['write']);
        });
        test('curried effectful function composition', () => {
            expectEffects(`
				writer = writeFile "output.txt";
				writer "content"
			`, ['write']);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RyxVQUFVLENBQUM7Ozs7OztJQU16QixDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDN0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtRQUM3QyxJQUFJLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO1lBQzFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyx1REFBdUQsRUFBRSxHQUFHLEVBQUU7WUFDbEUsVUFBVSxDQUFDOzs7Ozs7OztJQVFWLENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLHdEQUF3RCxFQUFFLEdBQUcsRUFBRTtZQUNuRSxhQUFhLENBQ1o7OztJQUdBLEVBQ0EsQ0FBQyxPQUFPLENBQUMsQ0FDVCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsd0NBQXdDLEVBQUUsR0FBRyxFQUFFO1lBQ25ELGFBQWEsQ0FDWjs7O0lBR0EsRUFDQSxDQUFDLE9BQU8sQ0FBQyxDQUNULENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL3dvcmtzcGFjZS90ZXN0L2VmZmVjdHNfcGhhc2UzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gUGhhc2UgMyBFZmZlY3RzIFN5c3RlbSBUZXN0c1xuLy8gVGVzdGluZyBlZmZlY3QgdmFsaWRhdGlvbiwgcHJvcGFnYXRpb24sIGFuZCBidWlsdC1pbiBlZmZlY3RmdWwgZnVuY3Rpb25zXG5cbmltcG9ydCB7IExleGVyIH0gZnJvbSAnLi4vc3JjL2xleGVyJztcbmltcG9ydCB7IHBhcnNlIH0gZnJvbSAnLi4vc3JjL3BhcnNlci9wYXJzZXInO1xuaW1wb3J0IHsgdHlwZVByb2dyYW0gfSBmcm9tICcuLi9zcmMvdHlwZXInO1xuaW1wb3J0IHR5cGUgeyBFZmZlY3QgfSBmcm9tICcuLi9zcmMvYXN0JztcblxuY29uc3QgcnVuTm9vbGFuZyA9IChjb2RlOiBzdHJpbmcpID0+IHtcblx0Y29uc3QgbGV4ZXIgPSBuZXcgTGV4ZXIoY29kZSk7XG5cdGNvbnN0IHRva2VucyA9IGxleGVyLnRva2VuaXplKCk7XG5cdGNvbnN0IHByb2dyYW0gPSBwYXJzZSh0b2tlbnMpO1xuXHRcblx0cmV0dXJuIHR5cGVQcm9ncmFtKHByb2dyYW0pO1xufTtcblxuY29uc3QgZXhwZWN0RWZmZWN0cyA9IChjb2RlOiBzdHJpbmcsIGV4cGVjdGVkRWZmZWN0czogRWZmZWN0W10pID0+IHtcblx0Y29uc3QgcmVzdWx0ID0gcnVuTm9vbGFuZyhjb2RlKTtcblx0Y29uc3QgYWN0dWFsRWZmZWN0cyA9IEFycmF5LmZyb20ocmVzdWx0LmVmZmVjdHMpLnNvcnQoKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSBleHBlY3RlZEVmZmVjdHMuc29ydCgpO1xuXHRleHBlY3QoYWN0dWFsRWZmZWN0cykudG9FcXVhbChleHBlY3RlZCk7XG5cdHJldHVybiByZXN1bHQ7XG59O1xuXG5jb25zdCBleHBlY3RQdXJlID0gKGNvZGU6IHN0cmluZykgPT4ge1xuXHRjb25zdCByZXN1bHQgPSBydW5Ob29sYW5nKGNvZGUpO1xuXHRleHBlY3QocmVzdWx0LmVmZmVjdHMuc2l6ZSkudG9CZSgwKTtcblx0cmV0dXJuIHJlc3VsdDtcbn07XG5cbmNvbnN0IGV4cGVjdEVycm9yID0gKGNvZGU6IHN0cmluZywgZXJyb3JNZXNzYWdlPzogc3RyaW5nKSA9PiB7XG5cdGV4cGVjdCgoKSA9PiBydW5Ob29sYW5nKGNvZGUpKS50b1Rocm93KGVycm9yTWVzc2FnZSk7XG59O1xuXG5kZXNjcmliZSgnRWZmZWN0cyBQaGFzZSAzOiBFZmZlY3QgVmFsaWRhdGlvbiBhbmQgQnVpbHQtaW4gRnVuY3Rpb25zJywgKCkgPT4ge1xuXHRkZXNjcmliZSgnQnVpbHQtaW4gRWZmZWN0ZnVsIEZ1bmN0aW9ucycsICgpID0+IHtcblx0XHR0ZXN0KCdwcmludCBmdW5jdGlvbiBoYXMgd3JpdGUgZWZmZWN0JywgKCkgPT4ge1xuXHRcdFx0ZXhwZWN0RWZmZWN0cygncHJpbnQgNDInLCBbJ3dyaXRlJ10pO1xuXHRcdH0pO1xuXG5cdFx0dGVzdCgncHJpbnRsbiBmdW5jdGlvbiBoYXMgd3JpdGUgZWZmZWN0JywgKCkgPT4ge1xuXHRcdFx0ZXhwZWN0RWZmZWN0cygncHJpbnRsbiBcImhlbGxvXCInLCBbJ3dyaXRlJ10pO1xuXHRcdH0pO1xuXG5cdFx0dGVzdCgnbG9nIGZ1bmN0aW9uIGhhcyBsb2cgZWZmZWN0JywgKCkgPT4ge1xuXHRcdFx0ZXhwZWN0RWZmZWN0cygnbG9nIFwiZGVidWcgbWVzc2FnZVwiJywgWydsb2cnXSk7XG5cdFx0fSk7XG5cblx0XHR0ZXN0KCdyZWFkRmlsZSBmdW5jdGlvbiBoYXMgcmVhZCBlZmZlY3QnLCAoKSA9PiB7XG5cdFx0XHRleHBlY3RFZmZlY3RzKCdyZWFkRmlsZSBcInRlc3QudHh0XCInLCBbJ3JlYWQnXSk7XG5cdFx0fSk7XG5cblx0XHR0ZXN0KCd3cml0ZUZpbGUgZnVuY3Rpb24gaGFzIHdyaXRlIGVmZmVjdCcsICgpID0+IHtcblx0XHRcdGV4cGVjdEVmZmVjdHMoJ3dyaXRlRmlsZSBcInRlc3QudHh0XCIgXCJjb250ZW50XCInLCBbJ3dyaXRlJ10pO1xuXHRcdH0pO1xuXG5cdFx0dGVzdCgncmFuZG9tIGZ1bmN0aW9uIGhhcyByYW5kIGVmZmVjdCcsICgpID0+IHtcblx0XHRcdGV4cGVjdEVmZmVjdHMoJ3JhbmRvbScsIFsncmFuZCddKTtcblx0XHR9KTtcblxuXHRcdHRlc3QoJ3JhbmRvbVJhbmdlIGZ1bmN0aW9uIGhhcyByYW5kIGVmZmVjdCcsICgpID0+IHtcblx0XHRcdGV4cGVjdEVmZmVjdHMoJ3JhbmRvbVJhbmdlIDEgMTAnLCBbJ3JhbmQnXSk7XG5cdFx0fSk7XG5cblx0XHR0ZXN0KCdtdXRTZXQgZnVuY3Rpb24gaGFzIHN0YXRlIGVmZmVjdCcsICgpID0+IHtcblx0XHRcdGV4cGVjdEVmZmVjdHMoXG5cdFx0XHRcdGBcblx0XHRcdFx0cmVmID0gXCJzb21lUmVmXCI7XG5cdFx0XHRcdG11dFNldCByZWYgNDJcblx0XHRcdGAsXG5cdFx0XHRcdFsnc3RhdGUnXVxuXHRcdFx0KTtcblx0XHR9KTtcblxuXHRcdHRlc3QoJ211dEdldCBmdW5jdGlvbiBoYXMgc3RhdGUgZWZmZWN0JywgKCkgPT4ge1xuXHRcdFx0ZXhwZWN0RWZmZWN0cyhcblx0XHRcdFx0YFxuXHRcdFx0XHRyZWYgPSBcInNvbWVSZWZcIjtcblx0XHRcdFx0bXV0R2V0IHJlZlxuXHRcdFx0YCxcblx0XHRcdFx0WydzdGF0ZSddXG5cdFx0XHQpO1xuXHRcdH0pO1xuXHR9KTtcblxuXHRkZXNjcmliZSgnRWZmZWN0IFByb3BhZ2F0aW9uIGluIEZ1bmN0aW9uIENvbXBvc2l0aW9uJywgKCkgPT4ge1xuXHRcdHRlc3QoJ2Z1bmN0aW9uIGNhbGxpbmcgZWZmZWN0ZnVsIGZ1bmN0aW9uIGluaGVyaXRzIGVmZmVjdHMnLCAoKSA9PiB7XG5cdFx0XHRleHBlY3RFZmZlY3RzKFxuXHRcdFx0XHRgXG5cdFx0XHRcdGxvZ0FuZFJldHVybiA9IGZuIHggPT4gcHJpbnQgeDtcblx0XHRcdFx0bG9nQW5kUmV0dXJuIDQyXG5cdFx0XHRgLFxuXHRcdFx0XHRbJ3dyaXRlJ11cblx0XHRcdCk7XG5cdFx0fSk7XG5cblx0XHR0ZXN0KCdtdWx0aXBsZSBlZmZlY3RmdWwgY2FsbHMgYWNjdW11bGF0ZSBlZmZlY3RzJywgKCkgPT4ge1xuXHRcdFx0ZXhwZWN0RWZmZWN0cyhcblx0XHRcdFx0YFxuXHRcdFx0XHRsb2dBbmRSZWFkID0gZm4gZmlsZW5hbWUgPT4gKFxuXHRcdFx0XHRcdGxvZyBcIlJlYWRpbmcgZmlsZVwiO1xuXHRcdFx0XHRcdHJlYWRGaWxlIGZpbGVuYW1lXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGxvZ0FuZFJlYWQgXCJ0ZXN0LnR4dFwiXG5cdFx0XHRgLFxuXHRcdFx0XHRbJ2xvZycsICdyZWFkJ11cblx0XHRcdCk7XG5cdFx0fSk7XG5cblx0XHR0ZXN0KCduZXN0ZWQgZnVuY3Rpb24gY2FsbHMgcHJvcGFnYXRlIGVmZmVjdHMnLCAoKSA9PiB7XG5cdFx0XHRleHBlY3RFZmZlY3RzKFxuXHRcdFx0XHRgXG5cdFx0XHRcdGhlbHBlciA9IGZuIHggPT4gcHJpbnQgeDtcblx0XHRcdFx0d3JhcHBlciA9IGZuIHggPT4gaGVscGVyICh4ICsgMSk7XG5cdFx0XHRcdHdyYXBwZXIgNVxuXHRcdFx0YCxcblx0XHRcdFx0Wyd3cml0ZSddXG5cdFx0XHQpO1xuXHRcdH0pO1xuXG5cdFx0dGVzdCgncGlwZWxpbmUgb3BlcmF0aW9ucyBwcm9wYWdhdGUgZWZmZWN0cycsICgpID0+IHtcblx0XHRcdGV4cGVjdEVmZmVjdHMoXG5cdFx0XHRcdGBcblx0XHRcdFx0bG9nZ2VyID0gZm4geCA9PiBwcmludCB4O1xuXHRcdFx0XHQ0MiB8IGxvZ2dlclxuXHRcdFx0YCxcblx0XHRcdFx0Wyd3cml0ZSddXG5cdFx0XHQpO1xuXHRcdH0pO1xuXG5cdFx0dGVzdCgnY29tcG9zZWQgZnVuY3Rpb25zIG1lcmdlIGVmZmVjdHMnLCAoKSA9PiB7XG5cdFx0XHRleHBlY3RFZmZlY3RzKFxuXHRcdFx0XHRgXG5cdFx0XHRcdHByaW50ZXIgPSBmbiB4ID0+IHByaW50IHg7XG5cdFx0XHRcdHJhbmRvbWl6ZXIgPSBmbiBfID0+IHJhbmRvbTtcblx0XHRcdFx0Y29tcG9zZSA9IGZuIGYgPT4gZm4gZyA9PiBmbiB4ID0+IGYgKGcgeCk7XG5cdFx0XHRcdHJhbmRvbVByaW50ID0gY29tcG9zZSBwcmludGVyIHJhbmRvbWl6ZXI7XG5cdFx0XHRcdHJhbmRvbVByaW50IDBcblx0XHRcdGAsXG5cdFx0XHRcdFsncmFuZCcsICd3cml0ZSddXG5cdFx0XHQpO1xuXHRcdH0pO1xuXHR9KTtcblxuXHRkZXNjcmliZSgnRWZmZWN0IFByb3BhZ2F0aW9uIGluIERhdGEgU3RydWN0dXJlcycsICgpID0+IHtcblx0XHR0ZXN0KCdsaXN0cyB3aXRoIGVmZmVjdGZ1bCBlbGVtZW50cyBwcm9wYWdhdGUgZWZmZWN0cycsICgpID0+IHtcblx0XHRcdGV4cGVjdEVmZmVjdHMoXG5cdFx0XHRcdGBcblx0XHRcdFx0W3ByaW50IDEsIHByaW50IDIsIHByaW50IDNdXG5cdFx0XHRgLFxuXHRcdFx0XHRbJ3dyaXRlJ11cblx0XHRcdCk7XG5cdFx0fSk7XG5cblx0XHR0ZXN0KCdyZWNvcmRzIHdpdGggZWZmZWN0ZnVsIGZpZWxkIHZhbHVlcyBwcm9wYWdhdGUgZWZmZWN0cycsICgpID0+IHtcblx0XHRcdGV4cGVjdEVmZmVjdHMoXG5cdFx0XHRcdGBcblx0XHRcdFx0eyBAbG9nZ2VkIHByaW50IDQyLCBAcmFuZG9tIHJhbmRvbSB9XG5cdFx0XHRgLFxuXHRcdFx0XHRbJ3JhbmQnLCAnd3JpdGUnXVxuXHRcdFx0KTtcblx0XHR9KTtcblxuXHRcdHRlc3QoJ3R1cGxlcyB3aXRoIGVmZmVjdGZ1bCBlbGVtZW50cyBwcm9wYWdhdGUgZWZmZWN0cycsICgpID0+IHtcblx0XHRcdGV4cGVjdEVmZmVjdHMoXG5cdFx0XHRcdGBcblx0XHRcdFx0e3ByaW50IDEsIHJhbmRvbSwgcmVhZEZpbGUgXCJ0ZXN0LnR4dFwifVxuXHRcdFx0YCxcblx0XHRcdFx0WydyYW5kJywgJ3JlYWQnLCAnd3JpdGUnXVxuXHRcdFx0KTtcblx0XHR9KTtcblx0fSk7XG5cblx0ZGVzY3JpYmUoJ0VmZmVjdCBQcm9wYWdhdGlvbiBpbiBDb250cm9sIEZsb3cnLCAoKSA9PiB7XG5cdFx0dGVzdCgnY29uZGl0aW9uYWxzIHdpdGggZWZmZWN0ZnVsIGJyYW5jaGVzIHByb3BhZ2F0ZSBlZmZlY3RzJywgKCkgPT4ge1xuXHRcdFx0ZXhwZWN0RWZmZWN0cyhcblx0XHRcdFx0YFxuXHRcdFx0XHRjb25kaXRpb24gPSBUcnVlO1xuXHRcdFx0XHRpZiBjb25kaXRpb24gdGhlbiAocHJpbnQgXCJ5ZXNcIjsge30pIGVsc2UgKGxvZyBcIm5vXCI7IHt9KVxuXHRcdFx0YCxcblx0XHRcdFx0Wydsb2cnLCAnd3JpdGUnXVxuXHRcdFx0KTtcblx0XHR9KTtcblxuXHRcdHRlc3QoJ2NvbmRpdGlvbmFscyBtZXJnZSBlZmZlY3RzIGZyb20gYm90aCBicmFuY2hlcycsICgpID0+IHtcblx0XHRcdGV4cGVjdEVmZmVjdHMoXG5cdFx0XHRcdGBcblx0XHRcdFx0eCA9IDU7XG5cdFx0XHRcdGlmIHggPiAwIHRoZW4gKHByaW50IHg7IHt9KSBlbHNlIChyYW5kb207IHt9KVxuXHRcdFx0YCxcblx0XHRcdFx0WydyYW5kJywgJ3dyaXRlJ11cblx0XHRcdCk7XG5cdFx0fSk7XG5cblx0XHR0ZXN0KCduZXN0ZWQgY29uZGl0aW9uYWxzIGFjY3VtdWxhdGUgZWZmZWN0cycsICgpID0+IHtcblx0XHRcdGV4cGVjdEVmZmVjdHMoXG5cdFx0XHRcdGBcblx0XHRcdFx0eCA9IDU7XG5cdFx0XHRcdGlmIHggPiAwIHRoZW4gKFxuXHRcdFx0XHRcdGlmIHggPiAxMCB0aGVuIChyZWFkRmlsZSBcImJpZy50eHRcIjsge30pIGVsc2UgKHByaW50IHg7IHt9KVxuXHRcdFx0XHQpIGVsc2UgKGxvZyBcIm5lZ2F0aXZlXCI7IHt9KVxuXHRcdFx0YCxcblx0XHRcdFx0Wydsb2cnLCAncmVhZCcsICd3cml0ZSddXG5cdFx0XHQpO1xuXHRcdH0pO1xuXHR9KTtcblxuXHRkZXNjcmliZSgnRWZmZWN0IFByb3BhZ2F0aW9uIGluIFBhdHRlcm4gTWF0Y2hpbmcnLCAoKSA9PiB7XG5cdFx0dGVzdCgncGF0dGVybiBtYXRjaGluZyB3aXRoIGVmZmVjdGZ1bCBjYXNlcyBwcm9wYWdhdGVzIGVmZmVjdHMnLCAoKSA9PiB7XG5cdFx0XHRleHBlY3RFZmZlY3RzKFxuXHRcdFx0XHRgXG5cdFx0XHRcdHR5cGUgT3B0aW9uIGEgPSBTb21lIGEgfCBOb25lO1xuXHRcdFx0XHRvcHQgPSBTb21lIDQyO1xuXHRcdFx0XHRtYXRjaCBvcHQgd2l0aCAoXG5cdFx0XHRcdFx0U29tZSB4ID0+IChwcmludCB4OyB7fSk7XG5cdFx0XHRcdFx0Tm9uZSA9PiAobG9nIFwiZW1wdHlcIjsge30pXG5cdFx0XHRcdClcblx0XHRcdGAsXG5cdFx0XHRcdFsnbG9nJywgJ3dyaXRlJ11cblx0XHRcdCk7XG5cdFx0fSk7XG5cblx0XHR0ZXN0KCdwYXR0ZXJuIG1hdGNoaW5nIG1lcmdlcyBlZmZlY3RzIGZyb20gYWxsIGNhc2VzJywgKCkgPT4ge1xuXHRcdFx0ZXhwZWN0RWZmZWN0cyhcblx0XHRcdFx0YFxuXHRcdFx0XHR0eXBlIFJlc3VsdCBhIGIgPSBPayBhIHwgRXJyIGI7XG5cdFx0XHRcdHJlc3VsdCA9IE9rIDQyO1xuXHRcdFx0XHRtYXRjaCByZXN1bHQgd2l0aCAoXG5cdFx0XHRcdFx0T2sgdmFsdWUgPT4gcHJpbnQgdmFsdWU7XG5cdFx0XHRcdFx0RXJyIG1zZyA9PiAobG9nIG1zZzsgcmFuZG9tKVxuXHRcdFx0XHQpXG5cdFx0XHRgLFxuXHRcdFx0XHRbJ2xvZycsICdyYW5kJywgJ3dyaXRlJ11cblx0XHRcdCk7XG5cdFx0fSk7XG5cdH0pO1xuXG5cdGRlc2NyaWJlKCdIaWdoZXItb3JkZXIgRnVuY3Rpb25zIHdpdGggRWZmZWN0cycsICgpID0+IHtcblx0XHR0ZXN0KCdtYXAgd2l0aCBlZmZlY3RmdWwgZnVuY3Rpb24gcHJvcGFnYXRlcyBlZmZlY3RzJywgKCkgPT4ge1xuXHRcdFx0ZXhwZWN0RWZmZWN0cyhcblx0XHRcdFx0YFxuXHRcdFx0XHRudW1iZXJzID0gWzEsIDIsIDNdO1xuXHRcdFx0XHRsb2dnZXIgPSBmbiB4ID0+IHByaW50IHg7XG5cdFx0XHRcdG1hcCBsb2dnZXIgbnVtYmVyc1xuXHRcdFx0YCxcblx0XHRcdFx0Wyd3cml0ZSddXG5cdFx0XHQpO1xuXHRcdH0pO1xuXG5cdFx0dGVzdCgnZmlsdGVyIHdpdGggZWZmZWN0ZnVsIHByZWRpY2F0ZSBwcm9wYWdhdGVzIGVmZmVjdHMnLCAoKSA9PiB7XG5cdFx0XHRleHBlY3RFZmZlY3RzKFxuXHRcdFx0XHRgXG5cdFx0XHRcdG51bWJlcnMgPSBbMSwgMiwgMywgNCwgNV07XG5cdFx0XHRcdGVmZmVjdGZ1bFByZWQgPSBmbiB4ID0+IChwcmludCB4OyB4ID4gMik7XG5cdFx0XHRcdGZpbHRlciBlZmZlY3RmdWxQcmVkIG51bWJlcnNcblx0XHRcdGAsXG5cdFx0XHRcdFsnd3JpdGUnXVxuXHRcdFx0KTtcblx0XHR9KTtcblxuXHRcdHRlc3QoJ3JlZHVjZSB3aXRoIGVmZmVjdGZ1bCBmdW5jdGlvbiBwcm9wYWdhdGVzIGVmZmVjdHMnLCAoKSA9PiB7XG5cdFx0XHRleHBlY3RFZmZlY3RzKFxuXHRcdFx0XHRgXG5cdFx0XHRcdG51bWJlcnMgPSBbMSwgMiwgM107XG5cdFx0XHRcdGVmZmVjdGZ1bFN1bSA9IGZuIGFjYyA9PiBmbiB4ID0+IChcblx0XHRcdFx0XHRwcmludCB4O1xuXHRcdFx0XHRcdGFjYyArIHhcblx0XHRcdFx0KTtcblx0XHRcdFx0cmVkdWNlIGVmZmVjdGZ1bFN1bSAwIG51bWJlcnNcblx0XHRcdGAsXG5cdFx0XHRcdFsnd3JpdGUnXVxuXHRcdFx0KTtcblx0XHR9KTtcblx0fSk7XG5cblx0ZGVzY3JpYmUoJ0NvbXBsZXggRWZmZWN0IENvbWJpbmF0aW9ucycsICgpID0+IHtcblx0XHR0ZXN0KCdmdW5jdGlvbiB3aXRoIG11bHRpcGxlIGVmZmVjdCB0eXBlcycsICgpID0+IHtcblx0XHRcdGV4cGVjdEVmZmVjdHMoXG5cdFx0XHRcdGBcblx0XHRcdFx0Y29tcGxleEZ1bmN0aW9uID0gZm4gZmlsZW5hbWUgPT4gKFxuXHRcdFx0XHRcdG51bSA9IHJhbmRvbTtcblx0XHRcdFx0XHRsb2cgKGNvbmNhdCBcIlByb2Nlc3Npbmc6IFwiIGZpbGVuYW1lKTtcblx0XHRcdFx0XHRjb250ZW50ID0gcmVhZEZpbGUgZmlsZW5hbWU7XG5cdFx0XHRcdFx0cHJpbnQgY29udGVudDtcblx0XHRcdFx0XHRudW1cblx0XHRcdFx0KTtcblx0XHRcdFx0Y29tcGxleEZ1bmN0aW9uIFwiZGF0YS50eHRcIlxuXHRcdFx0YCxcblx0XHRcdFx0Wydsb2cnLCAncmFuZCcsICdyZWFkJywgJ3dyaXRlJ11cblx0XHRcdCk7XG5cdFx0fSk7XG5cblx0XHR0ZXN0KCdyZWN1cnNpdmUgZnVuY3Rpb24gd2l0aCBlZmZlY3RzJywgKCkgPT4ge1xuXHRcdFx0ZXhwZWN0RWZmZWN0cyhcblx0XHRcdFx0YFxuXHRcdFx0XHRsb2dDb3VudCA9IGZuIG4gPT4gKFxuXHRcdFx0XHRcdHByaW50IG47XG5cdFx0XHRcdFx0aWYgbiA+IDAgdGhlbiBsb2dDb3VudCAobiAtIDEpIGVsc2UgMFxuXHRcdFx0XHQpO1xuXHRcdFx0XHRsb2dDb3VudCAzXG5cdFx0XHRgLFxuXHRcdFx0XHRbJ3dyaXRlJ11cblx0XHRcdCk7XG5cdFx0fSk7XG5cblx0XHR0ZXN0KCdyZWN1cnNpdmUgZnVuY3Rpb25zIHdpdGggZGlmZmVyZW50IGVmZmVjdHMnLCAoKSA9PiB7XG5cdFx0XHRleHBlY3RFZmZlY3RzKFxuXHRcdFx0XHRgXG5cdFx0XHRcdGhlbHBlciA9IGZuIG4gZWZmZWN0ID0+IChcblx0XHRcdFx0XHRpZiBlZmZlY3QgPT0gXCJsb2dcIiB0aGVuIChsb2cgXCJtZXNzYWdlXCI7IHt9KSBlbHNlIChwcmludCBcIm1lc3NhZ2VcIjsge30pO1xuXHRcdFx0XHRcdGlmIG4gPiAwIHRoZW4gaGVscGVyIChuIC0gMSkgXCJsb2dcIiBlbHNlIHt9XG5cdFx0XHRcdCk7XG5cdFx0XHRcdGhlbHBlciAyIFwicHJpbnRcIlxuXHRcdFx0YCxcblx0XHRcdFx0Wydsb2cnLCAnd3JpdGUnXVxuXHRcdFx0KTtcblx0XHR9KTtcblx0fSk7XG5cblx0ZGVzY3JpYmUoJ0VmZmVjdCBTeXN0ZW0gQXJjaGl0ZWN0dXJlIFZhbGlkYXRpb24nLCAoKSA9PiB7XG5cdFx0dGVzdCgncHVyZSBmdW5jdGlvbnMgaGF2ZSBubyBlZmZlY3RzJywgKCkgPT4ge1xuXHRcdFx0ZXhwZWN0UHVyZSgnZm4geCA9PiB4ICsgMScpO1xuXHRcdH0pO1xuXG5cdFx0dGVzdCgncHVyZSBmdW5jdGlvbiBhcHBsaWNhdGlvbiBoYXMgbm8gZWZmZWN0cycsICgpID0+IHtcblx0XHRcdGV4cGVjdFB1cmUoYFxuXHRcdFx0XHRhZGQgPSBmbiB4ID0+IGZuIHkgPT4geCArIHk7XG5cdFx0XHRcdGFkZCAyIDNcblx0XHRcdGApO1xuXHRcdH0pO1xuXG5cdFx0dGVzdCgnZWZmZWN0IHByb3BhZ2F0aW9uIGlzIHRyYW5zaXRpdmUnLCAoKSA9PiB7XG5cdFx0XHRleHBlY3RFZmZlY3RzKFxuXHRcdFx0XHRgXG5cdFx0XHRcdGxldmVsMSA9IGZuIHggPT4gcHJpbnQgeDtcblx0XHRcdFx0bGV2ZWwyID0gZm4geCA9PiBsZXZlbDEgKHggKiAyKTtcblx0XHRcdFx0bGV2ZWwzID0gZm4geCA9PiBsZXZlbDIgKHggKyAxKTtcblx0XHRcdFx0bGV2ZWwzIDVcblx0XHRcdGAsXG5cdFx0XHRcdFsnd3JpdGUnXVxuXHRcdFx0KTtcblx0XHR9KTtcblxuXHRcdHRlc3QoJ2VmZmVjdHMgYXJlIHByb3Blcmx5IHVuaW9uZWQgYWNyb3NzIGV4cHJlc3Npb25zJywgKCkgPT4ge1xuXHRcdFx0ZXhwZWN0RWZmZWN0cyhcblx0XHRcdFx0YFxuXHRcdFx0XHRhID0gcHJpbnQgMTsgICAgICMgd3JpdGVcblx0XHRcdFx0YiA9IHJhbmRvbTsgICAgICAjIHJhbmRcblx0XHRcdFx0YyA9IHJlYWRGaWxlIFwidGVzdFwiOyAjIHJlYWRcblx0XHRcdFx0e2EsIGIsIGN9XG5cdFx0XHRgLFxuXHRcdFx0XHRbJ3JhbmQnLCAncmVhZCcsICd3cml0ZSddXG5cdFx0XHQpO1xuXHRcdH0pO1xuXG5cdFx0dGVzdCgnZnVuY3Rpb24gcmV0dXJuaW5nIGZ1bmN0aW9uIHByZXNlcnZlcyBlZmZlY3RzJywgKCkgPT4ge1xuXHRcdFx0ZXhwZWN0RWZmZWN0cyhcblx0XHRcdFx0YFxuXHRcdFx0XHRtYWtlUHJpbnRlciA9IGZuIHByZWZpeCA9PiBmbiB4ID0+IHByaW50IChjb25jYXQgcHJlZml4IHgpO1xuXHRcdFx0XHRsb2dnZXIgPSBtYWtlUHJpbnRlciBcIkxPRzogXCI7XG5cdFx0XHRcdGxvZ2dlciBcIm1lc3NhZ2VcIlxuXHRcdFx0YCxcblx0XHRcdFx0Wyd3cml0ZSddXG5cdFx0XHQpO1xuXHRcdH0pO1xuXHR9KTtcblxuXHRkZXNjcmliZSgnRWZmZWN0IFR5cGUgU3lzdGVtIEludGVncmF0aW9uJywgKCkgPT4ge1xuXHRcdHRlc3QoJ1R5cGVSZXN1bHQgaW5jbHVkZXMgZWZmZWN0cyBmaWVsZCBmb3IgZWZmZWN0ZnVsIGV4cHJlc3Npb25zJywgKCkgPT4ge1xuXHRcdFx0Y29uc3QgcmVzdWx0ID0gcnVuTm9vbGFuZygncHJpbnQgNDInKTtcblx0XHRcdGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCd0eXBlJyk7XG5cdFx0XHRleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgnZWZmZWN0cycpO1xuXHRcdFx0ZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ3N0YXRlJyk7XG5cdFx0XHRleHBlY3QocmVzdWx0LmVmZmVjdHMpLnRvQmVJbnN0YW5jZU9mKFNldCk7XG5cdFx0XHRleHBlY3QocmVzdWx0LmVmZmVjdHMuaGFzKCd3cml0ZScpKS50b0JlKHRydWUpO1xuXHRcdH0pO1xuXG5cdFx0dGVzdCgnVHlwZVJlc3VsdCBpbmNsdWRlcyBlZmZlY3RzIGZpZWxkIGZvciBwdXJlIGV4cHJlc3Npb25zJywgKCkgPT4ge1xuXHRcdFx0Y29uc3QgcmVzdWx0ID0gcnVuTm9vbGFuZygnNDInKTtcblx0XHRcdGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCd0eXBlJyk7XG5cdFx0XHRleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgnZWZmZWN0cycpO1xuXHRcdFx0ZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ3N0YXRlJyk7XG5cdFx0XHRleHBlY3QocmVzdWx0LmVmZmVjdHMpLnRvQmVJbnN0YW5jZU9mKFNldCk7XG5cdFx0XHRleHBlY3QocmVzdWx0LmVmZmVjdHMuc2l6ZSkudG9CZSgwKTtcblx0XHR9KTtcblxuXHRcdHRlc3QoJ2NvbXBsZXggZXhwcmVzc2lvbnMgaGF2ZSBwcm9wZXIgZWZmZWN0IGNvbXBvc2l0aW9uJywgKCkgPT4ge1xuXHRcdFx0Y29uc3QgcmVzdWx0ID0gcnVuTm9vbGFuZyhgXG5cdFx0XHRcdGxvZ2dlZFJhbmRvbSA9IGZuIHNlZWQgPT4gKFxuXHRcdFx0XHRcdGxvZyBcImdlbmVyYXRpbmcgcmFuZG9tXCI7XG5cdFx0XHRcdFx0cmFuZG9tUmFuZ2Ugc2VlZCAoc2VlZCArIDEwKVxuXHRcdFx0XHQpO1xuXHRcdFx0XHRsb2dnZWRSYW5kb20gNVxuXHRcdFx0YCk7XG5cdFx0XHRleHBlY3QocmVzdWx0LmVmZmVjdHMuaGFzKCdsb2cnKSkudG9CZSh0cnVlKTtcblx0XHRcdGV4cGVjdChyZXN1bHQuZWZmZWN0cy5oYXMoJ3JhbmQnKSkudG9CZSh0cnVlKTtcblx0XHRcdGV4cGVjdChyZXN1bHQuZWZmZWN0cy5zaXplKS50b0JlKDIpO1xuXHRcdH0pO1xuXHR9KTtcblxuXHRkZXNjcmliZSgnRWZmZWN0IFZhbGlkYXRpb24gRWRnZSBDYXNlcycsICgpID0+IHtcblx0XHR0ZXN0KCdlbXB0eSBmdW5jdGlvbiBoYXMgbm8gZWZmZWN0cycsICgpID0+IHtcblx0XHRcdGV4cGVjdFB1cmUoJ2ZuIF8gPT4gNDInKTtcblx0XHR9KTtcblxuXHRcdHRlc3QoJ2Z1bmN0aW9uIHdpdGggbXVsdGlwbGUgcHVyZSBvcGVyYXRpb25zIGhhcyBubyBlZmZlY3RzJywgKCkgPT4ge1xuXHRcdFx0ZXhwZWN0UHVyZShgXG5cdFx0XHRcdGNvbXB1dGUgPSBmbiB4ID0+IChcblx0XHRcdFx0XHRhID0geCArIDE7XG5cdFx0XHRcdFx0YiA9IGEgKiAyO1xuXHRcdFx0XHRcdGMgPSBiIC0gMztcblx0XHRcdFx0XHRjXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGNvbXB1dGUgNVxuXHRcdFx0YCk7XG5cdFx0fSk7XG5cblx0XHR0ZXN0KCdwYXJ0aWFsbHkgYXBwbGllZCBlZmZlY3RmdWwgZnVuY3Rpb24gcHJlc2VydmVzIGVmZmVjdHMnLCAoKSA9PiB7XG5cdFx0XHRleHBlY3RFZmZlY3RzKFxuXHRcdFx0XHRgXG5cdFx0XHRcdHdyaXRlUGFydGlhbCA9IHdyaXRlRmlsZSBcIm91dHB1dC50eHRcIjtcblx0XHRcdFx0d3JpdGVQYXJ0aWFsIFwiaGVsbG8gd29ybGRcIlxuXHRcdFx0YCxcblx0XHRcdFx0Wyd3cml0ZSddXG5cdFx0XHQpO1xuXHRcdH0pO1xuXG5cdFx0dGVzdCgnY3VycmllZCBlZmZlY3RmdWwgZnVuY3Rpb24gY29tcG9zaXRpb24nLCAoKSA9PiB7XG5cdFx0XHRleHBlY3RFZmZlY3RzKFxuXHRcdFx0XHRgXG5cdFx0XHRcdHdyaXRlciA9IHdyaXRlRmlsZSBcIm91dHB1dC50eHRcIjtcblx0XHRcdFx0d3JpdGVyIFwiY29udGVudFwiXG5cdFx0XHRgLFxuXHRcdFx0XHRbJ3dyaXRlJ11cblx0XHRcdCk7XG5cdFx0fSk7XG5cdH0pO1xufSk7Il0sInZlcnNpb24iOjN9