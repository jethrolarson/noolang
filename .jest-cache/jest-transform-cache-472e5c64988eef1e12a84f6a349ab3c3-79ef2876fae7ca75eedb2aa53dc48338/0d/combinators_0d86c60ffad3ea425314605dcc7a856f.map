{"file":"/workspace/src/parser/combinators.ts","mappings":"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","names":[],"sources":["/workspace/src/parser/combinators.ts"],"sourcesContent":["import type { Token, TokenType } from \"../lexer\";\n\nexport type ParseError = {\n  success: false;\n  error: string;\n  position: number;\n};\n\nexport type ParseSuccess<T> = {\n  success: true;\n  value: T;\n  remaining: Token[];\n};\n\nexport type ParseResult<T> = ParseSuccess<T> | ParseError;\n\nexport type Parser<T> = (tokens: Token[]) => ParseResult<T>;\n\n// Basic token matching\nexport const token =\n  (type: TokenType, value?: string): Parser<Token> =>\n  (tokens: Token[]) => {\n    if (tokens.length === 0) {\n      return {\n        success: false,\n        error: `Expected ${type}${\n          value ? ` '${value}'` : \"\"\n        }, but got end of input`,\n        position: 0,\n      };\n    }\n\n    const [first, ...rest] = tokens;\n    if (first.type === type && (value === undefined || first.value === value)) {\n      return {\n        success: true,\n        value: first,\n        remaining: rest,\n      };\n    }\n\n    return {\n      success: false,\n      error: `Expected ${type}${value ? ` '${value}'` : \"\"}, but got ${\n        first.type\n      } '${first.value}'`,\n      position: first.location.start.line,\n    };\n  };\n\n// Match any token\nexport const anyToken = (): Parser<Token> => (tokens: Token[]) => {\n  if (tokens.length === 0) {\n    return {\n      success: false,\n      error: \"Expected any token, but got end of input\",\n      position: 0,\n    };\n  }\n\n  const [first, ...rest] = tokens;\n  return {\n    success: true,\n    value: first,\n    remaining: rest,\n  };\n};\n\n// Sequence of parsers\nexport const seq =\n  <T extends any[]>(...parsers: { [K in keyof T]: Parser<T[K]> }): Parser<T> =>\n  (tokens: Token[]) => {\n    const results: T[] = [];\n    let remaining = tokens;\n\n    for (const parser of parsers) {\n      const result = parser(remaining);\n      if (!result.success) {\n        return result;\n      }\n      results.push(result.value);\n      remaining = result.remaining;\n    }\n\n    return {\n      success: true,\n      value: results as T,\n      remaining,\n    };\n  };\n\n// Choice between parsers (try each until one succeeds)\nexport const choice =\n  <T>(...parsers: Parser<T>[]): Parser<T> =>\n  (tokens: Token[]) => {\n    let lastError: string = \"\";\n    let lastPosition: number = 0;\n\n    for (const parser of parsers) {\n      const result = parser(tokens);\n      if (result.success) {\n        return result;\n      }\n      // Keep track of the error from the parser that got furthest\n      if (result.position > lastPosition) {\n        lastError = result.error;\n        lastPosition = result.position;\n      }\n    }\n\n    return {\n      success: false,\n      error: lastError,\n      position: lastPosition,\n    };\n  };\n\n// Zero or more repetitions\nexport const many =\n  <T>(parser: Parser<T>): Parser<T[]> =>\n  (tokens: Token[]) => {\n    const results: T[] = [];\n    let remaining = tokens;\n\n    while (remaining.length > 0) {\n      const result = parser(remaining);\n      if (!result.success) {\n        break;\n      }\n      results.push(result.value);\n      remaining = result.remaining;\n    }\n\n    return {\n      success: true,\n      value: results,\n      remaining,\n    };\n  };\n\n// One or more repetitions\nexport const many1 =\n  <T>(parser: Parser<T>): Parser<T[]> =>\n  (tokens: Token[]) => {\n    const manyResult = many(parser)(tokens);\n    if (!manyResult.success || manyResult.value.length === 0) {\n      return {\n        success: false,\n        error: \"Expected at least one occurrence\",\n        position: tokens[0]?.location.start.line || 0,\n      };\n    }\n    return manyResult;\n  };\n\n// Optional parser (zero or one)\nexport const optional =\n  <T>(parser: Parser<T>): Parser<T | null> =>\n  (tokens: Token[]) => {\n    const result = parser(tokens);\n    return result.success\n\t\t\t\t\t? result\n\t\t\t\t\t: {\n\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t\tvalue: null,\n\t\t\t\t\t\t\tremaining: tokens,\n\t\t\t\t\t\t};\n  };\n\n// Transform parse result\nexport const map =\n  <T, U>(parser: Parser<T>, fn: (value: T) => U): Parser<U> =>\n  (tokens: Token[]) => {\n    const result = parser(tokens);\n    return result.success\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\t\tvalue: fn(result.value),\n\t\t\t\t\t\t\tremaining: result.remaining,\n\t\t\t\t\t\t}\n\t\t\t\t\t: result;\n  };\n\n// Lazy parser for recursive grammars\nexport const lazy =\n  <T>(parserFn: () => Parser<T>): Parser<T> =>\n  (tokens: Token[]) =>\n    parserFn()(tokens);\n\n// Separated by something\nexport const sepBy = <T, S>(\n  parser: Parser<T>,\n  separator: Parser<S>,\n): Parser<T[]> => {\n  return (tokens: Token[]) => {\n    const results: T[] = [];\n    let remaining = tokens;\n\n    // Parse first element\n    const firstResult = parser(remaining);\n    if (!firstResult.success) {\n      return {\n        success: true,\n        value: [],\n        remaining,\n      };\n    }\n\n    results.push(firstResult.value);\n    remaining = firstResult.remaining;\n\n    // Parse subsequent elements separated by separator\n    while (remaining.length > 0) {\n      const sepResult = separator(remaining);\n      if (!sepResult.success) {\n        break;\n      }\n\n      const elemResult = parser(sepResult.remaining);\n      if (!elemResult.success) {\n        break;\n      }\n\n      results.push(elemResult.value);\n      remaining = elemResult.remaining;\n    }\n\n    return {\n      success: true,\n      value: results,\n      remaining,\n    };\n  };\n};\n\n// Parse until end of input\nexport const parseAll =\n\t<T>(parser: Parser<T>): Parser<T> =>\n\t(tokens: Token[]) => {\n\t\tconst result = parser(tokens);\n\t\tif (!result.success || !result.remaining.length) {\n\t\t\treturn result;\n\t\t}\n\n\t\tconst unexpected = result.remaining[0];\n\t\treturn {\n\t\t\tsuccess: false,\n\t\t\terror: `Unexpected ${unexpected.type} '${unexpected.value}' at end of input`,\n\t\t\tposition: unexpected.location.start.line,\n\t\t};\n\t};\n\n// Convenience parsers for common token types\nexport const identifier = (): Parser<Token> => token(\"IDENTIFIER\");\nexport const number = (): Parser<Token> => token(\"NUMBER\");\nexport const string = (): Parser<Token> => token(\"STRING\");\nexport const keyword = (value: string): Parser<Token> =>\n\ttoken(\"KEYWORD\", value);\nexport const operator = (value: string): Parser<Token> =>\n\ttoken(\"OPERATOR\", value);\nexport const punctuation = (value: string): Parser<Token> =>\n\ttoken(\"PUNCTUATION\", value);\nexport const accessor = (): Parser<Token> => token(\"ACCESSOR\");"],"version":3}