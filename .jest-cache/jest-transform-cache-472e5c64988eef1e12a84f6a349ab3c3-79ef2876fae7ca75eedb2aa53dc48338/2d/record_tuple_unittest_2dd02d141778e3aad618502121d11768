e950fb47485c4b0928776a3a9a256fab
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lexer_1 = require("../src/lexer");
const parser_1 = require("../src/parser/parser");
describe("Records, Tuples, and Unit", () => {
    function parseNoo(src) {
        const lexer = new lexer_1.Lexer(src);
        const tokens = lexer.tokenize();
        return (0, parser_1.parse)(tokens);
    }
    test("parses named record", () => {
        const program = parseNoo("{ @a 1, @b 2 }");
        const record = program.statements[0];
        expect(record.kind).toBe("record");
        if (record.kind === "record") {
            expect(record.fields).toEqual([
                { name: "a", value: expect.anything() },
                { name: "b", value: expect.anything() },
            ]);
        }
    });
    test("parses tuple (nameless record)", () => {
        const program = parseNoo("{ 1, 2 }");
        const tuple = program.statements[0];
        expect(tuple.kind).toBe("tuple");
        if (tuple.kind === "tuple") {
            expect(tuple.elements.length).toBe(2);
            expect(tuple.elements[0]).toEqual(expect.anything());
            expect(tuple.elements[1]).toEqual(expect.anything());
        }
    });
    test("parses unit (empty braces)", () => {
        const program = parseNoo("{ }");
        const unit = program.statements[0];
        expect(unit.kind).toBe("unit");
    });
    test("throws on mixed named and positional fields", () => {
        expect(() => parseNoo("{ 1, @a 2 }")).toThrow();
        expect(() => parseNoo("{ @a 2, 1 }")).toThrow();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cyI6W10sInNvdXJjZXMiOlsiL3dvcmtzcGFjZS90ZXN0L3JlY29yZF90dXBsZV91bml0LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGV4ZXIgfSBmcm9tIFwiLi4vc3JjL2xleGVyXCI7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gXCIuLi9zcmMvcGFyc2VyL3BhcnNlclwiO1xuXG5kZXNjcmliZShcIlJlY29yZHMsIFR1cGxlcywgYW5kIFVuaXRcIiwgKCkgPT4ge1xuICBmdW5jdGlvbiBwYXJzZU5vbyhzcmM6IHN0cmluZykge1xuICAgIGNvbnN0IGxleGVyID0gbmV3IExleGVyKHNyYyk7XG4gICAgY29uc3QgdG9rZW5zID0gbGV4ZXIudG9rZW5pemUoKTtcbiAgICByZXR1cm4gcGFyc2UodG9rZW5zKTtcbiAgfVxuXG4gIHRlc3QoXCJwYXJzZXMgbmFtZWQgcmVjb3JkXCIsICgpID0+IHtcbiAgICBjb25zdCBwcm9ncmFtID0gcGFyc2VOb28oXCJ7IEBhIDEsIEBiIDIgfVwiKTtcbiAgICBjb25zdCByZWNvcmQgPSBwcm9ncmFtLnN0YXRlbWVudHNbMF07XG4gICAgZXhwZWN0KHJlY29yZC5raW5kKS50b0JlKFwicmVjb3JkXCIpO1xuICAgIGlmIChyZWNvcmQua2luZCA9PT0gXCJyZWNvcmRcIikge1xuICAgICAgZXhwZWN0KHJlY29yZC5maWVsZHMpLnRvRXF1YWwoW1xuICAgICAgICB7IG5hbWU6IFwiYVwiLCB2YWx1ZTogZXhwZWN0LmFueXRoaW5nKCkgfSxcbiAgICAgICAgeyBuYW1lOiBcImJcIiwgdmFsdWU6IGV4cGVjdC5hbnl0aGluZygpIH0sXG4gICAgICBdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHRlc3QoXCJwYXJzZXMgdHVwbGUgKG5hbWVsZXNzIHJlY29yZClcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHByb2dyYW0gPSBwYXJzZU5vbyhcInsgMSwgMiB9XCIpO1xuICAgIGNvbnN0IHR1cGxlID0gcHJvZ3JhbS5zdGF0ZW1lbnRzWzBdO1xuICAgIGV4cGVjdCh0dXBsZS5raW5kKS50b0JlKFwidHVwbGVcIik7XG4gICAgaWYgKHR1cGxlLmtpbmQgPT09IFwidHVwbGVcIikge1xuICAgICAgZXhwZWN0KHR1cGxlLmVsZW1lbnRzLmxlbmd0aCkudG9CZSgyKTtcbiAgICAgIGV4cGVjdCh0dXBsZS5lbGVtZW50c1swXSkudG9FcXVhbChleHBlY3QuYW55dGhpbmcoKSk7XG4gICAgICBleHBlY3QodHVwbGUuZWxlbWVudHNbMV0pLnRvRXF1YWwoZXhwZWN0LmFueXRoaW5nKCkpO1xuICAgIH1cbiAgfSk7XG5cbiAgdGVzdChcInBhcnNlcyB1bml0IChlbXB0eSBicmFjZXMpXCIsICgpID0+IHtcbiAgICBjb25zdCBwcm9ncmFtID0gcGFyc2VOb28oXCJ7IH1cIik7XG4gICAgY29uc3QgdW5pdCA9IHByb2dyYW0uc3RhdGVtZW50c1swXTtcbiAgICBleHBlY3QodW5pdC5raW5kKS50b0JlKFwidW5pdFwiKTtcbiAgfSk7XG5cbiAgdGVzdChcInRocm93cyBvbiBtaXhlZCBuYW1lZCBhbmQgcG9zaXRpb25hbCBmaWVsZHNcIiwgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiBwYXJzZU5vbyhcInsgMSwgQGEgMiB9XCIpKS50b1Rocm93KCk7XG4gICAgZXhwZWN0KCgpID0+IHBhcnNlTm9vKFwieyBAYSAyLCAxIH1cIikpLnRvVGhyb3coKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==