{"file":"/workspace/src/format.ts","mappings":";AAAA,yCAAyC;AACzC,2CAA2C;;AAiB3C,kCAuCC;AAtDD,2CAaqB;AAErB,SAAgB,WAAW,CAAC,KAAY;IACtC,IAAI,IAAA,oBAAQ,EAAC,KAAK,CAAC,EAAE,CAAC;QACpB,OAAO,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;IAChC,CAAC;IACD,IAAI,IAAA,oBAAQ,EAAC,KAAK,CAAC,EAAE,CAAC;QACpB,gCAAgC;QAClC,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC;IACtE,CAAC;IACD,IAAI,IAAA,kBAAM,EAAC,KAAK,CAAC,EAAE,CAAC;QAClB,OAAO,IAAA,qBAAS,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;IAC7C,CAAC;IACD,IAAI,IAAA,kBAAM,EAAC,KAAK,CAAC,EAAE,CAAC;QAClB,OAAO,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;IACzD,CAAC;IACD,IAAI,IAAA,mBAAO,EAAC,KAAK,CAAC,EAAE,CAAC;QACpB,OAAO,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;IACxD,CAAC;IACD,IAAI,IAAA,oBAAQ,EAAC,KAAK,CAAC,EAAE,CAAC;QACpB,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC;aACrC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;aAC1C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IACD,IAAI,IAAA,sBAAU,EAAC,KAAK,CAAC,EAAE,CAAC;QACtB,OAAO,YAAY,CAAC;IACtB,CAAC;IACD,IAAI,IAAA,4BAAgB,EAAC,KAAK,CAAC,EAAE,CAAC;QAC5B,OAAO,WAAW,KAAK,CAAC,IAAI,GAAG,CAAC;IAClC,CAAC;IACD,IAAI,IAAA,kBAAM,EAAC,KAAK,CAAC,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,IAAA,yBAAa,EAAC,KAAK,CAAC,EAAE,CAAC;QACzB,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC5B,OAAO,KAAK,CAAC,IAAI,CAAC;QACpB,CAAC;aAAM,CAAC;YACN,OAAO,GAAG,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;QAClE,CAAC;IACH,CAAC;IACD,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,kBAAe,WAAW,CAAC","names":[],"sources":["/workspace/src/format.ts"],"sourcesContent":["// Noolang value pretty-printer/formatter\n// Usage: formatValue(value: Value): string\n\nimport {\n\tisNumber,\n\tisString,\n\tisBool,\n\tisList,\n\tisRecord,\n\tisTuple,\n\tisFunction,\n\tisNativeFunction,\n\tisUnit,\n\tisConstructor,\n\ttype Value,\n\tboolValue,\n} from \"./evaluator\";\n\nexport function formatValue(value: Value): string {\n  if (isNumber(value)) {\n    return value.value.toString();\n  }\n  if (isString(value)) {\n    // Escape quotes and backslashes\n\t\treturn `\"${value.value.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"')}\"`;\n  }\n  if (isBool(value)) {\n    return boolValue(value) ? \"True\" : \"False\";\n  }\n  if (isList(value)) {\n    return `[${value.values.map(formatValue).join(\"; \")}]`;\n  }\n  if (isTuple(value)) {\n\t\t\treturn `{${value.values.map(formatValue).join(\"; \")}}`;\n\t\t}\n  if (isRecord(value)) {\n    return `{${Object.entries(value.fields)\n\t\t\t\t\t.map(([k, v]) => `@${k} ${formatValue(v)}`)\n\t\t\t\t\t.join(\"; \")}}`;\n  }\n  if (isFunction(value)) {\n    return \"<function>\";\n  }\n  if (isNativeFunction(value)) {\n    return `<native:${value.name}>`;\n  }\n  if (isUnit(value)) {\n    return \"()\";\n  }\n  if (isConstructor(value)) {\n    if (value.args.length === 0) {\n      return value.name;\n    } else {\n      return `${value.name} ${value.args.map(formatValue).join(\" \")}`;\n    }\n  }\n  return \"<unknown>\";\n}\n\nexport default formatValue;\n"],"version":3}