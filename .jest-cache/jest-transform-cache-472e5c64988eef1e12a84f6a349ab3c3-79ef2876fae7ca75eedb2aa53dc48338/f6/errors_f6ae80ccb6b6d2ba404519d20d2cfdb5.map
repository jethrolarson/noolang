{"file":"/workspace/src/errors.ts","mappings":";;;AAoCA,sCAgBC;AA9BM,MAAM,WAAW,GAAG,CAC1B,IAAe,EACf,OAAe,EACf,QAAwB,EACxB,OAAgB,EAChB,UAAmB,EACJ,EAAE,CAAC,CAAC;IACnB,IAAI;IACJ,OAAO;IACP,QAAQ;IACR,OAAO;IACP,UAAU;CACV,CAAC,CAAC;AAZU,QAAA,WAAW,eAYrB;AAEH,SAAgB,aAAa,CAAC,KAAmB;IAC/C,IAAI,MAAM,GAAG,GAAG,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,OAAO,EAAE,CAAC;IAE/C,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;QACnB,MAAM,IAAI,YAAY,KAAK,CAAC,QAAQ,CAAC,IAAI,YAAY,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;IAC/E,CAAC;IAED,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;QAClB,MAAM,IAAI,cAAc,KAAK,CAAC,OAAO,EAAE,CAAC;IAC1C,CAAC;IAED,IAAI,KAAK,CAAC,UAAU,EAAE,CAAC;QACrB,MAAM,IAAI,iBAAiB,KAAK,CAAC,UAAU,EAAE,CAAC;IAChD,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAEM,MAAM,WAAW,GAAG,CAAC,KAAmB,EAAU,EAAE,CAC1D,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AADnB,QAAA,WAAW,eACQ","names":[],"sources":["/workspace/src/errors.ts"],"sourcesContent":["export type ErrorType =\n  | \"ParseError\"\n  | \"TypeError\"\n  | \"RuntimeError\"\n  | \"ImportError\"\n  | \"LexerError\";\n\nexport interface ErrorLocation {\n  line: number;\n  column: number;\n  start?: number;\n  end?: number;\n}\n\nexport interface NoolangError {\n  type: ErrorType;\n  message: string;\n  location?: ErrorLocation;\n  context?: string;\n  suggestion?: string;\n}\n\nexport const createError = (\n\ttype: ErrorType,\n\tmessage: string,\n\tlocation?: ErrorLocation,\n\tcontext?: string,\n\tsuggestion?: string,\n): NoolangError => ({\n\ttype,\n\tmessage,\n\tlocation,\n\tcontext,\n\tsuggestion,\n});\n\nexport function errorToString(error: NoolangError): string {\n  let result = `${error.type}: ${error.message}`;\n\n  if (error.location) {\n    result += ` at line ${error.location.line}, column ${error.location.column}`;\n  }\n\n  if (error.context) {\n    result += `\\nContext: ${error.context}`;\n  }\n\n  if (error.suggestion) {\n    result += `\\nSuggestion: ${error.suggestion}`;\n  }\n\n  return result;\n}\n\nexport const errorToJSON = (error: NoolangError): string =>\n\tJSON.stringify(error, null, 2);\n"],"version":3}