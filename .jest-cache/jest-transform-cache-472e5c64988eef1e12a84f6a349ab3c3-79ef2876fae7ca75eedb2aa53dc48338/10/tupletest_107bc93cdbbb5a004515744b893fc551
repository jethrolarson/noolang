c4b294cbcdeb97d09b3cfc03b4d36616
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const evaluator_1 = require("../src/evaluator");
const parser_1 = require("../src/parser/parser");
const lexer_1 = require("../src/lexer");
function unwrapValue(val) {
    if (val === null)
        return null;
    if (typeof val !== "object")
        return val;
    switch (val.tag) {
        case "number":
            return val.value;
        case "string":
            return val.value;
        case "constructor":
            if (val.name === "True")
                return true;
            if (val.name === "False")
                return false;
            return val;
        case "list":
            return val.values.map(unwrapValue);
        case "tuple":
            return val.values.map(unwrapValue);
        case "record": {
            const obj = {};
            for (const k in val.fields)
                obj[k] = unwrapValue(val.fields[k]);
            return obj;
        }
        default:
            return val;
    }
}
describe("Tuple Native Functions", () => {
    const evaluateSource = (source) => {
        const evaluator = new evaluator_1.Evaluator();
        const lexer = new lexer_1.Lexer(source);
        return evaluator.evaluateProgram((0, parser_1.parse)(lexer.tokenize()));
    };
    describe("tupleLength", () => {
        test("length of empty tuple", () => {
            const source = "tuple = {}; tupleLength tuple";
            // { } is now unit, not an empty tuple, so this should throw an error
            expect(() => evaluateSource(source)).toThrow("tupleLength requires a tuple");
        });
        test("length of singleton tuple", () => {
            const source = "tuple = { 1 }; tupleLength tuple";
            const result = evaluateSource(source);
            expect(unwrapValue(result.finalResult)).toBe(1);
        });
        test("length of pair tuple", () => {
            const source = "tuple = { 1, 2 }; tupleLength tuple";
            const result = evaluateSource(source);
            expect(unwrapValue(result.finalResult)).toBe(2);
        });
    });
    describe("tupleIsEmpty", () => {
        test("returns true for empty tuple", () => {
            const source = "tuple = {}; tupleIsEmpty tuple";
            // { } is now unit, not an empty tuple, so this should throw an error
            expect(() => evaluateSource(source)).toThrow("tupleIsEmpty requires a tuple");
        });
        test("returns false for non-empty tuple", () => {
            const source = "tuple = { 1, 2, 3 }; tupleIsEmpty tuple";
            const result = evaluateSource(source);
            expect(unwrapValue(result.finalResult)).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUM7UUFDbEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFO1FBQzVCLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7WUFDeEMsTUFBTSxNQUFNLEdBQUcsZ0NBQWdDLENBQUM7WUFDaEQscUVBQXFFO1lBQ3JFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQzFDLCtCQUErQixDQUNoQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsbUNBQW1DLEVBQUUsR0FBRyxFQUFFO1lBQzdDLE1BQU0sTUFBTSxHQUFHLHlDQUF5QyxDQUFDO1lBQ3pELE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0QyxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL3dvcmtzcGFjZS90ZXN0L3R1cGxlLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZhbHVhdG9yLCBWYWx1ZSB9IGZyb20gXCIuLi9zcmMvZXZhbHVhdG9yXCI7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gXCIuLi9zcmMvcGFyc2VyL3BhcnNlclwiO1xuaW1wb3J0IHsgTGV4ZXIgfSBmcm9tIFwiLi4vc3JjL2xleGVyXCI7XG5cbmZ1bmN0aW9uIHVud3JhcFZhbHVlKHZhbDogVmFsdWUpOiBhbnkge1xuICBpZiAodmFsID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgaWYgKHR5cGVvZiB2YWwgIT09IFwib2JqZWN0XCIpIHJldHVybiB2YWw7XG4gIHN3aXRjaCAodmFsLnRhZykge1xuICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgIHJldHVybiB2YWwudmFsdWU7XG4gICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgcmV0dXJuIHZhbC52YWx1ZTtcbiAgICBjYXNlIFwiY29uc3RydWN0b3JcIjpcbiAgICAgIGlmICh2YWwubmFtZSA9PT0gXCJUcnVlXCIpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHZhbC5uYW1lID09PSBcIkZhbHNlXCIpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgY2FzZSBcImxpc3RcIjpcbiAgICAgIHJldHVybiB2YWwudmFsdWVzLm1hcCh1bndyYXBWYWx1ZSk7XG4gICAgY2FzZSBcInR1cGxlXCI6XG4gICAgICByZXR1cm4gdmFsLnZhbHVlcy5tYXAodW53cmFwVmFsdWUpO1xuICAgIGNhc2UgXCJyZWNvcmRcIjoge1xuICAgICAgY29uc3Qgb2JqOiBhbnkgPSB7fTtcbiAgICAgIGZvciAoY29uc3QgayBpbiB2YWwuZmllbGRzKSBvYmpba10gPSB1bndyYXBWYWx1ZSh2YWwuZmllbGRzW2tdKTtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdmFsO1xuICB9XG59XG5cbmRlc2NyaWJlKFwiVHVwbGUgTmF0aXZlIEZ1bmN0aW9uc1wiLCAoKSA9PiB7XG4gIGNvbnN0IGV2YWx1YXRlU291cmNlID0gKHNvdXJjZTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgZXZhbHVhdG9yID0gbmV3IEV2YWx1YXRvcigpO1xuICAgIGNvbnN0IGxleGVyID0gbmV3IExleGVyKHNvdXJjZSk7XG4gICAgcmV0dXJuIGV2YWx1YXRvci5ldmFsdWF0ZVByb2dyYW0ocGFyc2UobGV4ZXIudG9rZW5pemUoKSkpO1xuICB9O1xuXG4gIGRlc2NyaWJlKFwidHVwbGVMZW5ndGhcIiwgKCkgPT4ge1xuICAgIHRlc3QoXCJsZW5ndGggb2YgZW1wdHkgdHVwbGVcIiwgKCkgPT4ge1xuICAgICAgY29uc3Qgc291cmNlID0gXCJ0dXBsZSA9IHt9OyB0dXBsZUxlbmd0aCB0dXBsZVwiO1xuICAgICAgLy8geyB9IGlzIG5vdyB1bml0LCBub3QgYW4gZW1wdHkgdHVwbGUsIHNvIHRoaXMgc2hvdWxkIHRocm93IGFuIGVycm9yXG4gICAgICBleHBlY3QoKCkgPT4gZXZhbHVhdGVTb3VyY2Uoc291cmNlKSkudG9UaHJvdyhcbiAgICAgICAgXCJ0dXBsZUxlbmd0aCByZXF1aXJlcyBhIHR1cGxlXCIsXG4gICAgICApO1xuICAgIH0pO1xuICAgIHRlc3QoXCJsZW5ndGggb2Ygc2luZ2xldG9uIHR1cGxlXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IFwidHVwbGUgPSB7IDEgfTsgdHVwbGVMZW5ndGggdHVwbGVcIjtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGV2YWx1YXRlU291cmNlKHNvdXJjZSk7XG4gICAgICBleHBlY3QodW53cmFwVmFsdWUocmVzdWx0LmZpbmFsUmVzdWx0KSkudG9CZSgxKTtcbiAgICB9KTtcbiAgICB0ZXN0KFwibGVuZ3RoIG9mIHBhaXIgdHVwbGVcIiwgKCkgPT4ge1xuICAgICAgY29uc3Qgc291cmNlID0gXCJ0dXBsZSA9IHsgMSwgMiB9OyB0dXBsZUxlbmd0aCB0dXBsZVwiO1xuICAgICAgY29uc3QgcmVzdWx0ID0gZXZhbHVhdGVTb3VyY2Uoc291cmNlKTtcbiAgICAgIGV4cGVjdCh1bndyYXBWYWx1ZShyZXN1bHQuZmluYWxSZXN1bHQpKS50b0JlKDIpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZShcInR1cGxlSXNFbXB0eVwiLCAoKSA9PiB7XG4gICAgdGVzdChcInJldHVybnMgdHJ1ZSBmb3IgZW1wdHkgdHVwbGVcIiwgKCkgPT4ge1xuICAgICAgY29uc3Qgc291cmNlID0gXCJ0dXBsZSA9IHt9OyB0dXBsZUlzRW1wdHkgdHVwbGVcIjtcbiAgICAgIC8vIHsgfSBpcyBub3cgdW5pdCwgbm90IGFuIGVtcHR5IHR1cGxlLCBzbyB0aGlzIHNob3VsZCB0aHJvdyBhbiBlcnJvclxuICAgICAgZXhwZWN0KCgpID0+IGV2YWx1YXRlU291cmNlKHNvdXJjZSkpLnRvVGhyb3coXG4gICAgICAgIFwidHVwbGVJc0VtcHR5IHJlcXVpcmVzIGEgdHVwbGVcIixcbiAgICAgICk7XG4gICAgfSk7XG4gICAgdGVzdChcInJldHVybnMgZmFsc2UgZm9yIG5vbi1lbXB0eSB0dXBsZVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBzb3VyY2UgPSBcInR1cGxlID0geyAxLCAyLCAzIH07IHR1cGxlSXNFbXB0eSB0dXBsZVwiO1xuICAgICAgY29uc3QgcmVzdWx0ID0gZXZhbHVhdGVTb3VyY2Uoc291cmNlKTtcbiAgICAgIGV4cGVjdCh1bndyYXBWYWx1ZShyZXN1bHQuZmluYWxSZXN1bHQpKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==