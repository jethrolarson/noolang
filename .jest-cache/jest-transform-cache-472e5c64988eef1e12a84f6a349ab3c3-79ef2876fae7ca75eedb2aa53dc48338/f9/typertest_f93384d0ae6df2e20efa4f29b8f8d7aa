491353e7b01ebdc8b1157aec421f3ef0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const lexer_1 = require("../../lexer");
const parser_1 = require("../../parser/parser");
const __1 = require("..");
const helpers_1 = require("../helpers");
const __2 = require("..");
const builtins_1 = require("../builtins");
// Helper function to parse a string into a program
const parseProgram = (source) => {
    const lexer = new lexer_1.Lexer(source);
    const tokens = lexer.tokenize();
    return (0, parser_1.parse)(tokens);
};
(0, globals_1.describe)("Functional Type Inference", () => {
    (0, globals_1.describe)("Basic Types", () => {
        (0, globals_1.it)("should infer integer literal", () => {
            const program = parseProgram("42");
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
        (0, globals_1.it)("should infer string literal", () => {
            const program = parseProgram('"hello"');
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("String");
        });
        (0, globals_1.it)("should infer boolean literal", () => {
            const program = parseProgram("True");
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("Bool");
        });
    });
    (0, globals_1.describe)("Function Types", () => {
        (0, globals_1.it)("should infer identity function", () => {
            const program = parseProgram("fn x => x");
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("(α) -> α");
        });
        (0, globals_1.it)("should infer function with multiple parameters", () => {
            const program = parseProgram("fn x y => x + y");
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("(Int) -> (Int) -> Int");
        });
        (0, globals_1.it)("should infer nested function", () => {
            const program = parseProgram("fn x => fn y => x + y");
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("(Int) -> (Int) -> Int");
        });
    });
    (0, globals_1.describe)("Let Polymorphism", () => {
        (0, globals_1.it)("should generalize identity function", () => {
            const program = parseProgram("id = fn x => x; id 42");
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
        (0, globals_1.it)("should allow polymorphic function to be used with different types", () => {
            const program = parseProgram('id = fn x => x; id 42; id "hello"');
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("String");
        });
        (0, globals_1.it)("should handle recursive definitions", () => {
            const program = parseProgram("fact = fn n => if n == 0 then 1 else n * (fact (n - 1)); fact 5");
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
    });
    (0, globals_1.describe)("Function Application", () => {
        (0, globals_1.it)("should apply function to argument", () => {
            const program = parseProgram("(fn x => x + 1) 42");
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
        (0, globals_1.it)("should handle partial application", () => {
            const program = parseProgram("add = fn x y => x + y; add5 = add 5; add5 3");
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
        (0, globals_1.it)("should handle curried application", () => {
            const program = parseProgram("add = fn x y => x + y; add 2 3");
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
    });
    (0, globals_1.describe)("Binary Operators", () => {
        (0, globals_1.it)("should infer arithmetic operations", () => {
            const program = parseProgram("2 + 3");
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
        (0, globals_1.it)("should infer comparison operations", () => {
            const program = parseProgram("2 < 3");
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("Bool");
        });
        (0, globals_1.it)("should infer equality operations", () => {
            const program = parseProgram("2 == 3");
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("Bool");
        });
    });
    (0, globals_1.describe)("If Expressions", () => {
        (0, globals_1.it)("should infer if expression with same types", () => {
            const program = parseProgram("if True then 1 else 2");
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
        (0, globals_1.it)("should handle if expression with different types", () => {
            const program = parseProgram('if True then 1 else "hello"');
            (0, globals_1.expect)(() => (0, __1.typeProgram)(program)).toThrow();
        });
    });
    (0, globals_1.describe)("Sequences", () => {
        (0, globals_1.it)("should handle semicolon sequences", () => {
            const program = parseProgram("1; 2; 3");
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
        (0, globals_1.it)("should handle sequences with definitions", () => {
            const program = parseProgram("x = 1; y = 2; x + y");
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
    });
    (0, globals_1.describe)("Built-in Functions", () => {
        (0, globals_1.it)("should handle built-in arithmetic operators", () => {
            const program = parseProgram("2 + 3");
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
        (0, globals_1.it)("should handle built-in comparison operators", () => {
            const program = parseProgram("2 == 3");
            const result = (0, __1.typeProgram)(program);
            (0, globals_1.expect)((0, helpers_1.typeToString)(result.type, result.state.substitution)).toBe("Bool");
        });
    });
    (0, globals_1.describe)("Type Environment", () => {
        (0, globals_1.it)("should initialize with built-ins", () => {
            const state = (0, __2.createTypeState)();
            const newState = (0, builtins_1.initializeBuiltins)(state);
            (0, globals_1.expect)(newState.environment.has("+")).toBe(true);
            (0, globals_1.expect)(newState.environment.has("-")).toBe(true);
            (0, globals_1.expect)(newState.environment.has("*")).toBe(true);
            (0, globals_1.expect)(newState.environment.has("/")).toBe(true);
            (0, globals_1.expect)(newState.environment.has("==")).toBe(true);
            (0, globals_1.expect)(newState.environment.has(";")).toBe(true);
        });
    });
    (0, globals_1.describe)("Error Cases", () => {
        (0, globals_1.it)("should reject undefined variables", () => {
            const program = parseProgram("undefined_var");
            (0, globals_1.expect)(() => (0, __1.typeProgram)(program)).toThrow("Undefined variable");
        });
        (0, globals_1.it)("should reject type mismatches in function application", () => {
            const program = parseProgram('(fn x => x + 1) "hello"');
            (0, globals_1.expect)(() => (0, __1.typeProgram)(program)).toThrow();
        });
        (0, globals_1.it)("should reject non-boolean conditions in if expressions", () => {
            const program = parseProgram("if 42 then 1 else 2");
            (0, globals_1.expect)(() => (0, __1.typeProgram)(program)).toThrow();
        });
    });
});
(0, globals_1.describe)("Constraint Propagation (Functional Typer)", () => {
    (0, globals_1.it)("should throw a type error when constraints are not satisfied in composition", () => {
        const program = parseProgram(`
      compose = fn f g => fn x => f (g x);
      safeHead = compose head;
      listId = fn x => x;
      result = safeHead listId [1, 2, 3]
    `);
        // This should work now since head is safe and returns Option
        const result = (0, __1.typeProgram)(program);
        (0, globals_1.expect)(result).toBeDefined();
    });
    (0, globals_1.it)("should allow composition when constraints are satisfied (functional typer)", () => {
        const program = parseProgram(`
      compose = fn f g => fn x => f (g x);
      safeHead = compose head;
      listId = fn x => x;
      result = safeHead listId [[1, 2, 3], [4, 5, 6]]
    `);
        const result = (0, __1.typeProgram)(program);
        const typeStr = (0, helpers_1.typeToString)(result.type, result.state.substitution);
        // head now returns Option List Int instead of List Int
        (0, globals_1.expect)(typeStr).toBe("Option List Int");
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,