{"file":"/workspace/src/typer/index.ts","mappings":";;;AAAA,gCAAwE;AAGxE,mCAA8F;AAG9F,uDAAgE;AAChE,mEAAyD;AAEzD,yCAAgD;AAEhD,4DAA4D;AAC5D,iCAOiB;AALhB,qGAAA,YAAY,OAAA;AACZ,qGAAA,YAAY,OAAA;AACZ,qGAAA,YAAY,OAAA;AACZ,yGAAA,gBAAgB,OAAA;AAChB,6GAAA,oBAAoB,OAAA;AAGrB,wDAAwD;AACxD,qDAAwE;AAA/D,kHAAA,eAAe,OAAA;AAAE,qHAAA,kBAAkB,OAAA;AAE5C,0DAA0D;AAC1D,qDAAsD;AAA7C,oHAAA,iBAAiB,OAAA;AAG1B,qDAAqD;AACrD,qDAAiD;AAAxC,+GAAA,YAAY,OAAA;AAErB,wDAAwD;AACxD,qDAAoD;AAA3C,kHAAA,eAAe,OAAA;AAExB,mDAAmD;AACnD,qDAA+C;AAAtC,6GAAA,UAAU,OAAA;AAEnB,oDAAoD;AACpD,qDAAgD;AAAvC,8GAAA,WAAW,OAAA;AAEpB,6DAA6D;AAC7D,qDAAyD;AAAhD,uHAAA,oBAAoB,OAAA;AAG7B,mDAAmD;AACnD,qDAA+C;AAAtC,6GAAA,UAAU,OAAA;AAEnB,6DAA6D;AAC7D,iEAAyD;AAAhD,uHAAA,cAAc,OAAA;AAGvB,mEAAmE;AACnE,mDAiB0B;AAhBzB,6GAAA,WAAW,OAAA;AACX,kHAAA,gBAAgB,OAAA;AAChB,8GAAA,YAAY,OAAA;AACZ,gHAAA,cAAc,OAAA;AACd,wGAAA,MAAM,OAAA;AACN,4GAAA,UAAU,OAAA;AACV,uHAAA,qBAAqB,OAAA;AACrB,8GAAA,YAAY,OAAA;AACZ,4GAAA,UAAU,OAAA;AACV,4GAAA,UAAU,OAAA;AACV,8GAAA,YAAY,OAAA;AACZ,2GAAA,SAAS,OAAA;AACT,0GAAA,QAAQ,OAAA;AACR,2GAAA,SAAS,OAAA;AACT,2GAAA,SAAS,OAAA;AACT,iHAAA,eAAe,OAAA;AAGhB,+DAGgC;AAF/B,uHAAA,eAAe,OAAA;AACf,oHAAA,YAAY,OAAA;AAGb,uDAG4B;AAF3B,6GAAA,SAAS,OAAA;AACT,sHAAA,kBAAkB,OAAA;AAGnB,2CAEsB;AADrB,6GAAA,eAAe,OAAA;AAGhB,gDAAgD;AAChD,6CAAmE;AAA1D,iIAAA,kCAAkC,OAAA;AAC3C,0CAA0C;AACnC,MAAM,WAAW,GAAG,CAAC,OAAgB,EAAc,EAAE;IAC3D,IAAI,KAAK,GAAG,IAAA,iCAAe,GAAE,CAAC;IAC9B,KAAK,GAAG,IAAA,6BAAkB,EAAC,KAAK,CAAC,CAAC;IAClC,KAAK,GAAG,IAAA,4BAAU,EAAC,KAAK,CAAC,CAAC;IAE1B,IAAI,SAAS,GAAgB,IAAI,CAAC;IAClC,IAAI,UAAU,GAAG,IAAI,GAAG,EAAU,CAAC;IAEnC,KAAK,MAAM,SAAS,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;QAC5C,MAAM,MAAM,GAAG,IAAA,sCAAc,EAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAChD,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QACrB,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,UAAU,GAAG,IAAA,oBAAY,EAAC,UAAU,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC;IAED,IAAI,CAAC,SAAS,EAAE,CAAC;QAChB,SAAS,GAAG,IAAA,cAAQ,GAAE,CAAC;IACxB,CAAC;IAED,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC;AACxD,CAAC,CAAC;AApBW,QAAA,WAAW,eAoBtB","names":[],"sources":["/workspace/src/typer/index.ts"],"sourcesContent":["import { type Program, type Type, unitType, type Effect } from '../ast';\nimport { formatTypeError, createTypeError } from './type-errors';\nimport { typeToString } from './helpers';\nimport { type TypeState, type TypeResult, createPureTypeResult, unionEffects } from './types';\nimport { satisfiesConstraint, validateAllSubstitutionConstraints } from './constraints';\nimport { substitute } from './substitute';\nimport { createTypeState, loadStdlib } from './type-operations';\nimport { typeExpression } from './expression-dispatcher';\nimport { typeAndDecorate } from './decoration';\nimport { initializeBuiltins } from './builtins';\n\n// Re-export TypeResult and effect helpers from types module\nexport { \n\ttype TypeResult,\n\temptyEffects,\n\tsingleEffect,\n\tunionEffects,\n\tcreateTypeResult,\n\tcreatePureTypeResult\n} from './types';\n\n// Re-export createTypeState from type-operations module\nexport { createTypeState, cleanSubstitutions } from './type-operations';\n\n// Re-export freshTypeVariable from type-operations module\nexport { freshTypeVariable } from './type-operations';\n\n\n// Re-export freeTypeVars from type-operations module\nexport { freeTypeVars } from './type-operations';\n\n// Re-export freeTypeVarsEnv from type-operations module\nexport { freeTypeVarsEnv } from './type-operations';\n\n// Re-export generalize from type-operations module\nexport { generalize } from './type-operations';\n\n// Re-export instantiate from type-operations module\nexport { instantiate } from './type-operations';\n\n// Re-export freshenTypeVariables from type-operations module\nexport { freshenTypeVariables } from './type-operations';\n\n\n// Re-export loadStdlib from type-operations module\nexport { loadStdlib } from './type-operations';\n\n// Re-export typeExpression from expression-dispatcher module\nexport { typeExpression } from './expression-dispatcher';\n\n\n// Re-export type inference functions from their respective modules\nexport {\n\ttypeLiteral,\n\ttypeVariableExpr,\n\ttypeFunction,\n\ttypeDefinition,\n\ttypeIf,\n\ttypeBinary,\n\ttypeMutableDefinition,\n\ttypeMutation,\n\ttypeImport,\n\ttypeRecord,\n\ttypeAccessor,\n\ttypeTuple,\n\ttypeList,\n\ttypeWhere,\n\ttypeTyped,\n\ttypeConstrained,\n} from './type-inference';\n\nexport {\n\ttypeApplication,\n\ttypePipeline,\n} from './function-application';\n\nexport {\n\ttypeMatch,\n\ttypeTypeDefinition,\n} from './pattern-matching';\n\nexport {\n\ttypeAndDecorate,\n} from './decoration';\n\n// Re-export helper functions from their modules\nexport { validateAllSubstitutionConstraints } from './constraints';\n// Export the main program typing function\nexport const typeProgram = (program: Program): TypeResult => {\n\tlet state = createTypeState();\n\tstate = initializeBuiltins(state);\n\tstate = loadStdlib(state);\n\n\tlet finalType: Type | null = null;\n\tlet allEffects = new Set<Effect>();\n\n\tfor (const statement of program.statements) {\n\t\tconst result = typeExpression(statement, state);\n\t\tstate = result.state;\n\t\tfinalType = result.type;\n\t\tallEffects = unionEffects(allEffects, result.effects);\n\t}\n\n\tif (!finalType) {\n\t\tfinalType = unitType();\n\t}\n\n\treturn { type: finalType, effects: allEffects, state };\n};\n"],"version":3}