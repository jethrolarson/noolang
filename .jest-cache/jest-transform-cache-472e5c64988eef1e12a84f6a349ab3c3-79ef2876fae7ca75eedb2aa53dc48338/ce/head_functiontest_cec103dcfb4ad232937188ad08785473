03344a37fd78f4bf20ee827d2a9dfa63
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lexer_1 = require("../src/lexer");
const parser_1 = require("../src/parser/parser");
const typer_1 = require("../src/typer");
const evaluator_1 = require("../src/evaluator");
function unwrapValue(val) {
    if (val === null)
        return null;
    if (typeof val !== "object")
        return val;
    switch (val.tag) {
        case "number":
            return val.value;
        case "string":
            return val.value;
        case "constructor":
            if (val.name === "True")
                return true;
            if (val.name === "False")
                return false;
            return { name: val.name, args: val.args.map(unwrapValue) };
        case "list":
            return val.values.map(unwrapValue);
        case "tuple":
            return val.values.map(unwrapValue);
        case "record": {
            const obj = {};
            for (const k in val.fields)
                obj[k] = unwrapValue(val.fields[k]);
            return obj;
        }
        default:
            return val;
    }
}
describe("Head Function Tests", () => {
    let evaluator;
    beforeEach(() => {
        evaluator = new evaluator_1.Evaluator();
    });
    const runCode = (code) => {
        const lexer = new lexer_1.Lexer(code);
        const tokens = lexer.tokenize();
        const ast = (0, parser_1.parse)(tokens);
        const decoratedResult = (0, typer_1.typeAndDecorate)(ast);
        return evaluator.evaluateProgram(decoratedResult.program);
    };
    test("should work with integer lists", () => {
        const code = `
      numbers = [1, 2, 3, 4, 5];
      head numbers
    `;
        const result = runCode(code);
        // head now returns Some 1, so we check for the constructor
        const finalResult = unwrapValue(result.finalResult);
        expect(finalResult.name).toBe("Some");
        expect(unwrapValue(finalResult.args[0])).toBe(1);
    });
    test("should work with string lists", () => {
        const code = `
      strings = ["hello", "world", "noolang"];
      head strings
    `;
        const result = runCode(code);
        // head now returns Some "hello"
        const finalResult = unwrapValue(result.finalResult);
        expect(finalResult.name).toBe("Some");
        expect(unwrapValue(finalResult.args[0])).toBe("hello");
    });
    test("should work with boolean lists", () => {
        const code = `
      bools = [True, False, True];
      head bools
    `;
        const result = runCode(code);
        // head now returns Some True
        const finalResult = unwrapValue(result.finalResult);
        expect(finalResult.name).toBe("Some");
        const boolResult = finalResult.args[0];
        // The Bool constructor gets unwrapped to JavaScript boolean
        expect(boolResult).toBe(true);
    });
    test("should work with nested lists", () => {
        const code = `
      nested = [[1, 2], [3, 4]];
      head nested
    `;
        const result = runCode(code);
        // head now returns Some [1, 2]
        const finalResult = unwrapValue(result.finalResult);
        expect(finalResult.name).toBe("Some");
        expect(unwrapValue(finalResult.args[0])).toEqual([1, 2]);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,