04957bea8a34f2326a8bbc7a6dd535ce
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.accessor = exports.punctuation = exports.operator = exports.keyword = exports.string = exports.number = exports.identifier = exports.parseAll = exports.sepBy = exports.lazy = exports.map = exports.optional = exports.many1 = exports.many = exports.choice = exports.seq = exports.anyToken = exports.token = void 0;
// Basic token matching
const token = (type, value) => (tokens) => {
    if (tokens.length === 0) {
        return {
            success: false,
            error: `Expected ${type}${value ? ` '${value}'` : ""}, but got end of input`,
            position: 0,
        };
    }
    const [first, ...rest] = tokens;
    if (first.type === type && (value === undefined || first.value === value)) {
        return {
            success: true,
            value: first,
            remaining: rest,
        };
    }
    return {
        success: false,
        error: `Expected ${type}${value ? ` '${value}'` : ""}, but got ${first.type} '${first.value}'`,
        position: first.location.start.line,
    };
};
exports.token = token;
// Match any token
const anyToken = () => (tokens) => {
    if (tokens.length === 0) {
        return {
            success: false,
            error: "Expected any token, but got end of input",
            position: 0,
        };
    }
    const [first, ...rest] = tokens;
    return {
        success: true,
        value: first,
        remaining: rest,
    };
};
exports.anyToken = anyToken;
// Sequence of parsers
const seq = (...parsers) => (tokens) => {
    const results = [];
    let remaining = tokens;
    for (const parser of parsers) {
        const result = parser(remaining);
        if (!result.success) {
            return result;
        }
        results.push(result.value);
        remaining = result.remaining;
    }
    return {
        success: true,
        value: results,
        remaining,
    };
};
exports.seq = seq;
// Choice between parsers (try each until one succeeds)
const choice = (...parsers) => (tokens) => {
    let lastError = "";
    let lastPosition = 0;
    for (const parser of parsers) {
        const result = parser(tokens);
        if (result.success) {
            return result;
        }
        // Keep track of the error from the parser that got furthest
        if (result.position > lastPosition) {
            lastError = result.error;
            lastPosition = result.position;
        }
    }
    return {
        success: false,
        error: lastError,
        position: lastPosition,
    };
};
exports.choice = choice;
// Zero or more repetitions
const many = (parser) => (tokens) => {
    const results = [];
    let remaining = tokens;
    while (remaining.length > 0) {
        const result = parser(remaining);
        if (!result.success) {
            break;
        }
        results.push(result.value);
        remaining = result.remaining;
    }
    return {
        success: true,
        value: results,
        remaining,
    };
};
exports.many = many;
// One or more repetitions
const many1 = (parser) => (tokens) => {
    const manyResult = (0, exports.many)(parser)(tokens);
    if (!manyResult.success || manyResult.value.length === 0) {
        return {
            success: false,
            error: "Expected at least one occurrence",
            position: tokens[0]?.location.start.line || 0,
        };
    }
    return manyResult;
};
exports.many1 = many1;
// Optional parser (zero or one)
const optional = (parser) => (tokens) => {
    const result = parser(tokens);
    return result.success
        ? result
        : {
            success: true,
            value: null,
            remaining: tokens,
        };
};
exports.optional = optional;
// Transform parse result
const map = (parser, fn) => (tokens) => {
    const result = parser(tokens);
    return result.success
        ? {
            success: true,
            value: fn(result.value),
            remaining: result.remaining,
        }
        : result;
};
exports.map = map;
// Lazy parser for recursive grammars
const lazy = (parserFn) => (tokens) => parserFn()(tokens);
exports.lazy = lazy;
// Separated by something
const sepBy = (parser, separator) => {
    return (tokens) => {
        const results = [];
        let remaining = tokens;
        // Parse first element
        const firstResult = parser(remaining);
        if (!firstResult.success) {
            return {
                success: true,
                value: [],
                remaining,
            };
        }
        results.push(firstResult.value);
        remaining = firstResult.remaining;
        // Parse subsequent elements separated by separator
        while (remaining.length > 0) {
            const sepResult = separator(remaining);
            if (!sepResult.success) {
                break;
            }
            const elemResult = parser(sepResult.remaining);
            if (!elemResult.success) {
                break;
            }
            results.push(elemResult.value);
            remaining = elemResult.remaining;
        }
        return {
            success: true,
            value: results,
            remaining,
        };
    };
};
exports.sepBy = sepBy;
// Parse until end of input
const parseAll = (parser) => (tokens) => {
    const result = parser(tokens);
    if (!result.success || !result.remaining.length) {
        return result;
    }
    const unexpected = result.remaining[0];
    return {
        success: false,
        error: `Unexpected ${unexpected.type} '${unexpected.value}' at end of input`,
        position: unexpected.location.start.line,
    };
};
exports.parseAll = parseAll;
// Convenience parsers for common token types
const identifier = () => (0, exports.token)("IDENTIFIER");
exports.identifier = identifier;
const number = () => (0, exports.token)("NUMBER");
exports.number = number;
const string = () => (0, exports.token)("STRING");
exports.string = string;
const keyword = (value) => (0, exports.token)("KEYWORD", value);
exports.keyword = keyword;
const operator = (value) => (0, exports.token)("OPERATOR", value);
exports.operator = operator;
const punctuation = (value) => (0, exports.token)("PUNCTUATION", value);
exports.punctuation = punctuation;
const accessor = () => (0, exports.token)("ACCESSOR");
exports.accessor = accessor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,