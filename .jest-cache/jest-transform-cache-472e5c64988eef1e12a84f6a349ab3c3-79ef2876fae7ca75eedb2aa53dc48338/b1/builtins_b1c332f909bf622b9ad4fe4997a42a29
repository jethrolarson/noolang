e5455694617266a3dacbd1a21eded7c1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeBuiltins = void 0;
const ast_1 = require("../ast");
// Helper: Create common function types
const createUnaryFunctionType = (paramType, returnType) => (0, ast_1.functionType)([paramType], returnType);
const createBinaryFunctionType = (param1Type, param2Type, returnType) => (0, ast_1.functionType)([param1Type, param2Type], returnType);
// Initialize built-in types
const initializeBuiltins = (state) => {
    const newEnv = new Map(state.environment);
    // Arithmetic operators
    newEnv.set('+', {
        type: (0, ast_1.functionType)([(0, ast_1.intType)(), (0, ast_1.intType)()], (0, ast_1.intType)()),
        quantifiedVars: [],
    });
    newEnv.set('-', {
        type: (0, ast_1.functionType)([(0, ast_1.intType)(), (0, ast_1.intType)()], (0, ast_1.intType)()),
        quantifiedVars: [],
    });
    newEnv.set('*', {
        type: (0, ast_1.functionType)([(0, ast_1.intType)(), (0, ast_1.intType)()], (0, ast_1.intType)()),
        quantifiedVars: [],
    });
    newEnv.set('/', {
        type: (0, ast_1.functionType)([(0, ast_1.intType)(), (0, ast_1.intType)()], (0, ast_1.intType)()),
        quantifiedVars: [],
    });
    // Comparison operators
    newEnv.set('==', {
        type: (0, ast_1.functionType)([(0, ast_1.typeVariable)('a'), (0, ast_1.typeVariable)('a')], (0, ast_1.boolType)()),
        quantifiedVars: ['a'],
    });
    newEnv.set('!=', {
        type: (0, ast_1.functionType)([(0, ast_1.typeVariable)('a'), (0, ast_1.typeVariable)('a')], (0, ast_1.boolType)()),
        quantifiedVars: ['a'],
    });
    newEnv.set('<', {
        type: (0, ast_1.functionType)([(0, ast_1.intType)(), (0, ast_1.intType)()], (0, ast_1.boolType)()),
        quantifiedVars: [],
    });
    newEnv.set('>', {
        type: (0, ast_1.functionType)([(0, ast_1.intType)(), (0, ast_1.intType)()], (0, ast_1.boolType)()),
        quantifiedVars: [],
    });
    newEnv.set('<=', {
        type: (0, ast_1.functionType)([(0, ast_1.intType)(), (0, ast_1.intType)()], (0, ast_1.boolType)()),
        quantifiedVars: [],
    });
    newEnv.set('>=', {
        type: (0, ast_1.functionType)([(0, ast_1.intType)(), (0, ast_1.intType)()], (0, ast_1.boolType)()),
        quantifiedVars: [],
    });
    const tailType = (0, ast_1.functionType)([(0, ast_1.listTypeWithElement)((0, ast_1.typeVariable)('a'))], (0, ast_1.listTypeWithElement)((0, ast_1.typeVariable)('a')));
    newEnv.set('tail', {
        type: tailType,
        quantifiedVars: ['a'],
    });
    newEnv.set('cons', {
        type: (0, ast_1.functionType)([(0, ast_1.typeVariable)('a'), (0, ast_1.listTypeWithElement)((0, ast_1.typeVariable)('a'))], (0, ast_1.listTypeWithElement)((0, ast_1.typeVariable)('a'))),
        quantifiedVars: ['a'],
    });
    // Pipeline operator (pure)
    newEnv.set('|>', {
        type: (0, ast_1.functionType)([(0, ast_1.typeVariable)('a'), (0, ast_1.functionType)([(0, ast_1.typeVariable)('a')], (0, ast_1.typeVariable)('b'))], (0, ast_1.typeVariable)('b')),
        quantifiedVars: ['a', 'b'],
    });
    // Compose operator
    newEnv.set('<|', {
        type: (0, ast_1.functionType)([(0, ast_1.typeVariable)('a'), (0, ast_1.functionType)([(0, ast_1.typeVariable)('a')], (0, ast_1.typeVariable)('b'))], (0, ast_1.typeVariable)('b')),
        quantifiedVars: ['a', 'b'],
    });
    // Thrush operator (pure) - same as pipeline
    newEnv.set('|', {
        type: (0, ast_1.functionType)([(0, ast_1.typeVariable)('a'), (0, ast_1.functionType)([(0, ast_1.typeVariable)('a')], (0, ast_1.typeVariable)('b'))], (0, ast_1.typeVariable)('b')),
        quantifiedVars: ['a', 'b'],
    });
    // Semicolon operator (effectful - effects are unioned)
    newEnv.set(';', {
        type: (0, ast_1.functionType)([(0, ast_1.typeVariable)('a'), (0, ast_1.typeVariable)('b')], (0, ast_1.typeVariable)('b')),
        quantifiedVars: ['a', 'b'],
    });
    // Dollar operator (low precedence function application)
    newEnv.set('$', {
        type: (0, ast_1.functionType)([(0, ast_1.functionType)([(0, ast_1.typeVariable)('a')], (0, ast_1.typeVariable)('b')), (0, ast_1.typeVariable)('a')], (0, ast_1.typeVariable)('b')),
        quantifiedVars: ['a', 'b'],
    });
    // Effectful functions - I/O and logging
    newEnv.set('print', {
        type: (0, ast_1.functionType)([(0, ast_1.typeVariable)('a')], (0, ast_1.typeVariable)('a'), new Set(['write'])),
        quantifiedVars: ['a'],
    });
    newEnv.set('println', {
        type: (0, ast_1.functionType)([(0, ast_1.typeVariable)('a')], (0, ast_1.typeVariable)('a'), new Set(['write'])),
        quantifiedVars: ['a'],
    });
    newEnv.set('readFile', {
        type: (0, ast_1.functionType)([(0, ast_1.stringType)()], (0, ast_1.stringType)(), new Set(['read'])),
        quantifiedVars: [],
    });
    newEnv.set('writeFile', {
        type: (0, ast_1.functionType)([(0, ast_1.stringType)(), (0, ast_1.stringType)()], (0, ast_1.unitType)(), new Set(['write'])),
        quantifiedVars: [],
    });
    newEnv.set('log', {
        type: (0, ast_1.functionType)([(0, ast_1.stringType)()], (0, ast_1.unitType)(), new Set(['log'])),
        quantifiedVars: [],
    });
    // Random number generation - special zero-arg function syntax
    newEnv.set('random', {
        type: (0, ast_1.intType)(), // For now, treat as a value with effects
        quantifiedVars: [],
        effects: new Set(['rand']), // Store effects separately
    });
    newEnv.set('randomRange', {
        type: (0, ast_1.functionType)([(0, ast_1.intType)(), (0, ast_1.intType)()], (0, ast_1.intType)(), new Set(['rand'])),
        quantifiedVars: [],
    });
    // Mutable state operations
    newEnv.set('mutSet', {
        type: (0, ast_1.functionType)([(0, ast_1.typeVariable)('ref'), (0, ast_1.typeVariable)('a')], (0, ast_1.unitType)(), new Set(['state'])),
        quantifiedVars: ['ref', 'a'],
    });
    newEnv.set('mutGet', {
        type: (0, ast_1.functionType)([(0, ast_1.typeVariable)('ref')], (0, ast_1.typeVariable)('a'), new Set(['state'])),
        quantifiedVars: ['ref', 'a'],
    });
    // List utility functions (pure)
    newEnv.set('map', {
        type: (0, ast_1.functionType)([
            (0, ast_1.functionType)([(0, ast_1.typeVariable)('a')], (0, ast_1.typeVariable)('b')),
            (0, ast_1.listTypeWithElement)((0, ast_1.typeVariable)('a')),
        ], (0, ast_1.listTypeWithElement)((0, ast_1.typeVariable)('b'))),
        quantifiedVars: ['a', 'b'],
    });
    newEnv.set('filter', {
        type: (0, ast_1.functionType)([
            (0, ast_1.functionType)([(0, ast_1.typeVariable)('a')], (0, ast_1.boolType)()),
            (0, ast_1.listTypeWithElement)((0, ast_1.typeVariable)('a')),
        ], (0, ast_1.listTypeWithElement)((0, ast_1.typeVariable)('a'))),
        quantifiedVars: ['a'],
    });
    newEnv.set('reduce', {
        type: (0, ast_1.functionType)([
            (0, ast_1.functionType)([(0, ast_1.typeVariable)('b')], (0, ast_1.functionType)([(0, ast_1.typeVariable)('a')], (0, ast_1.typeVariable)('b'))),
            (0, ast_1.typeVariable)('b'),
            (0, ast_1.listTypeWithElement)((0, ast_1.typeVariable)('a')),
        ], (0, ast_1.typeVariable)('b')),
        quantifiedVars: ['a', 'b'],
    });
    const lengthType = createUnaryFunctionType((0, ast_1.listTypeWithElement)((0, ast_1.typeVariable)('a')), (0, ast_1.intType)());
    newEnv.set('length', {
        type: lengthType,
        quantifiedVars: ['a'],
    });
    newEnv.set('isEmpty', {
        type: createUnaryFunctionType((0, ast_1.listTypeWithElement)((0, ast_1.typeVariable)('a')), (0, ast_1.boolType)()),
        quantifiedVars: ['a'],
    });
    newEnv.set('append', {
        type: createBinaryFunctionType((0, ast_1.listTypeWithElement)((0, ast_1.typeVariable)('a')), (0, ast_1.listTypeWithElement)((0, ast_1.typeVariable)('a')), (0, ast_1.listTypeWithElement)((0, ast_1.typeVariable)('a'))),
        quantifiedVars: ['a'],
    });
    // Math utilities (pure)
    newEnv.set('abs', {
        type: createUnaryFunctionType((0, ast_1.intType)(), (0, ast_1.intType)()),
        quantifiedVars: [],
    });
    newEnv.set('max', {
        type: createBinaryFunctionType((0, ast_1.intType)(), (0, ast_1.intType)(), (0, ast_1.intType)()),
        quantifiedVars: [],
    });
    newEnv.set('min', {
        type: createBinaryFunctionType((0, ast_1.intType)(), (0, ast_1.intType)(), (0, ast_1.intType)()),
        quantifiedVars: [],
    });
    // String utilities (pure)
    newEnv.set('concat', {
        type: createBinaryFunctionType((0, ast_1.stringType)(), (0, ast_1.stringType)(), (0, ast_1.stringType)()),
        quantifiedVars: [],
    });
    newEnv.set('toString', {
        type: createUnaryFunctionType((0, ast_1.typeVariable)('a'), (0, ast_1.stringType)()),
        quantifiedVars: ['a'],
    });
    // Record utilities
    newEnv.set('hasKey', {
        type: createBinaryFunctionType((0, ast_1.recordType)({}), (0, ast_1.stringType)(), (0, ast_1.boolType)()),
        quantifiedVars: [],
    });
    newEnv.set('hasValue', {
        type: createBinaryFunctionType((0, ast_1.recordType)({}), (0, ast_1.typeVariable)('a'), (0, ast_1.boolType)()),
        quantifiedVars: ['a'],
    });
    newEnv.set('set', {
        type: (0, ast_1.functionType)([
            (0, ast_1.typeVariable)('accessor'), // Accept any accessor function type
            (0, ast_1.recordType)({}),
            (0, ast_1.typeVariable)('a'),
        ], (0, ast_1.recordType)({})),
        quantifiedVars: ['accessor', 'a'],
    });
    // Tuple operations - only keep sound ones
    newEnv.set('tupleLength', { type: (0, ast_1.functionType)([(0, ast_1.tupleType)([])], (0, ast_1.intType)()), quantifiedVars: [] } // Any tuple -> Int
    );
    newEnv.set('tupleIsEmpty', { type: (0, ast_1.functionType)([(0, ast_1.tupleType)([])], (0, ast_1.boolType)()), quantifiedVars: [] } // Any tuple -> Bool
    );
    // head function is now self-hosted in stdlib.noo
    // Minimal built-in for self-hosted functions
    newEnv.set('list_get', {
        type: (0, ast_1.functionType)([(0, ast_1.intType)(), (0, ast_1.listTypeWithElement)((0, ast_1.typeVariable)('a'))], (0, ast_1.typeVariable)('a')),
        quantifiedVars: ['a'],
    });
    return { ...state, environment: newEnv };
};
exports.initializeBuiltins = initializeBuiltins;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQ2pCLENBQUMsSUFBQSxhQUFPLEdBQUUsRUFBRSxJQUFBLHlCQUFtQixFQUFDLElBQUEsa0JBQVksRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQ25ELElBQUEsa0JBQVksRUFBQyxHQUFHLENBQUMsQ0FDakI7UUFDRCxjQUFjLEVBQUUsQ0FBQyxHQUFHLENBQUM7S0FDckIsQ0FBQyxDQUFDO0lBRUgsT0FBTyxFQUFFLEdBQUcsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUMxQyxDQUFDLENBQUM7QUFuVFcsUUFBQSxrQkFBa0Isc0JBbVQ3QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvd29ya3NwYWNlL3NyYy90eXBlci9idWlsdGlucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUeXBlU3RhdGUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7XG5cdGZ1bmN0aW9uVHlwZSxcblx0aW50VHlwZSxcblx0Ym9vbFR5cGUsXG5cdHN0cmluZ1R5cGUsXG5cdHJlY29yZFR5cGUsXG5cdHR1cGxlVHlwZSxcblx0bGlzdFR5cGVXaXRoRWxlbWVudCxcblx0dHlwZVZhcmlhYmxlLFxuXHR1bml0VHlwZSxcblx0VHlwZSxcblx0RWZmZWN0LFxufSBmcm9tICcuLi9hc3QnO1xuXG4vLyBIZWxwZXI6IENyZWF0ZSBjb21tb24gZnVuY3Rpb24gdHlwZXNcbmNvbnN0IGNyZWF0ZVVuYXJ5RnVuY3Rpb25UeXBlID0gKHBhcmFtVHlwZTogVHlwZSwgcmV0dXJuVHlwZTogVHlwZSk6IFR5cGUgPT5cblx0ZnVuY3Rpb25UeXBlKFtwYXJhbVR5cGVdLCByZXR1cm5UeXBlKTtcblxuY29uc3QgY3JlYXRlQmluYXJ5RnVuY3Rpb25UeXBlID0gKFxuXHRwYXJhbTFUeXBlOiBUeXBlLFxuXHRwYXJhbTJUeXBlOiBUeXBlLFxuXHRyZXR1cm5UeXBlOiBUeXBlXG4pOiBUeXBlID0+IGZ1bmN0aW9uVHlwZShbcGFyYW0xVHlwZSwgcGFyYW0yVHlwZV0sIHJldHVyblR5cGUpO1xuXG4vLyBJbml0aWFsaXplIGJ1aWx0LWluIHR5cGVzXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZUJ1aWx0aW5zID0gKHN0YXRlOiBUeXBlU3RhdGUpOiBUeXBlU3RhdGUgPT4ge1xuXHRjb25zdCBuZXdFbnYgPSBuZXcgTWFwKHN0YXRlLmVudmlyb25tZW50KTtcblxuXHQvLyBBcml0aG1ldGljIG9wZXJhdG9yc1xuXHRuZXdFbnYuc2V0KCcrJywge1xuXHRcdHR5cGU6IGZ1bmN0aW9uVHlwZShbaW50VHlwZSgpLCBpbnRUeXBlKCldLCBpbnRUeXBlKCkpLFxuXHRcdHF1YW50aWZpZWRWYXJzOiBbXSxcblx0fSk7XG5cdG5ld0Vudi5zZXQoJy0nLCB7XG5cdFx0dHlwZTogZnVuY3Rpb25UeXBlKFtpbnRUeXBlKCksIGludFR5cGUoKV0sIGludFR5cGUoKSksXG5cdFx0cXVhbnRpZmllZFZhcnM6IFtdLFxuXHR9KTtcblx0bmV3RW52LnNldCgnKicsIHtcblx0XHR0eXBlOiBmdW5jdGlvblR5cGUoW2ludFR5cGUoKSwgaW50VHlwZSgpXSwgaW50VHlwZSgpKSxcblx0XHRxdWFudGlmaWVkVmFyczogW10sXG5cdH0pO1xuXHRuZXdFbnYuc2V0KCcvJywge1xuXHRcdHR5cGU6IGZ1bmN0aW9uVHlwZShbaW50VHlwZSgpLCBpbnRUeXBlKCldLCBpbnRUeXBlKCkpLFxuXHRcdHF1YW50aWZpZWRWYXJzOiBbXSxcblx0fSk7XG5cblx0Ly8gQ29tcGFyaXNvbiBvcGVyYXRvcnNcblx0bmV3RW52LnNldCgnPT0nLCB7XG5cdFx0dHlwZTogZnVuY3Rpb25UeXBlKFt0eXBlVmFyaWFibGUoJ2EnKSwgdHlwZVZhcmlhYmxlKCdhJyldLCBib29sVHlwZSgpKSxcblx0XHRxdWFudGlmaWVkVmFyczogWydhJ10sXG5cdH0pO1xuXHRuZXdFbnYuc2V0KCchPScsIHtcblx0XHR0eXBlOiBmdW5jdGlvblR5cGUoW3R5cGVWYXJpYWJsZSgnYScpLCB0eXBlVmFyaWFibGUoJ2EnKV0sIGJvb2xUeXBlKCkpLFxuXHRcdHF1YW50aWZpZWRWYXJzOiBbJ2EnXSxcblx0fSk7XG5cdG5ld0Vudi5zZXQoJzwnLCB7XG5cdFx0dHlwZTogZnVuY3Rpb25UeXBlKFtpbnRUeXBlKCksIGludFR5cGUoKV0sIGJvb2xUeXBlKCkpLFxuXHRcdHF1YW50aWZpZWRWYXJzOiBbXSxcblx0fSk7XG5cdG5ld0Vudi5zZXQoJz4nLCB7XG5cdFx0dHlwZTogZnVuY3Rpb25UeXBlKFtpbnRUeXBlKCksIGludFR5cGUoKV0sIGJvb2xUeXBlKCkpLFxuXHRcdHF1YW50aWZpZWRWYXJzOiBbXSxcblx0fSk7XG5cdG5ld0Vudi5zZXQoJzw9Jywge1xuXHRcdHR5cGU6IGZ1bmN0aW9uVHlwZShbaW50VHlwZSgpLCBpbnRUeXBlKCldLCBib29sVHlwZSgpKSxcblx0XHRxdWFudGlmaWVkVmFyczogW10sXG5cdH0pO1xuXHRuZXdFbnYuc2V0KCc+PScsIHtcblx0XHR0eXBlOiBmdW5jdGlvblR5cGUoW2ludFR5cGUoKSwgaW50VHlwZSgpXSwgYm9vbFR5cGUoKSksXG5cdFx0cXVhbnRpZmllZFZhcnM6IFtdLFxuXHR9KTtcblxuXHRjb25zdCB0YWlsVHlwZSA9IGZ1bmN0aW9uVHlwZShcblx0XHRbbGlzdFR5cGVXaXRoRWxlbWVudCh0eXBlVmFyaWFibGUoJ2EnKSldLFxuXHRcdGxpc3RUeXBlV2l0aEVsZW1lbnQodHlwZVZhcmlhYmxlKCdhJykpXG5cdCk7XG5cdG5ld0Vudi5zZXQoJ3RhaWwnLCB7XG5cdFx0dHlwZTogdGFpbFR5cGUsXG5cdFx0cXVhbnRpZmllZFZhcnM6IFsnYSddLFxuXHR9KTtcblx0bmV3RW52LnNldCgnY29ucycsIHtcblx0XHR0eXBlOiBmdW5jdGlvblR5cGUoXG5cdFx0XHRbdHlwZVZhcmlhYmxlKCdhJyksIGxpc3RUeXBlV2l0aEVsZW1lbnQodHlwZVZhcmlhYmxlKCdhJykpXSxcblx0XHRcdGxpc3RUeXBlV2l0aEVsZW1lbnQodHlwZVZhcmlhYmxlKCdhJykpXG5cdFx0KSxcblx0XHRxdWFudGlmaWVkVmFyczogWydhJ10sXG5cdH0pO1xuXG5cdC8vIFBpcGVsaW5lIG9wZXJhdG9yIChwdXJlKVxuXHRuZXdFbnYuc2V0KCd8PicsIHtcblx0XHR0eXBlOiBmdW5jdGlvblR5cGUoXG5cdFx0XHRbdHlwZVZhcmlhYmxlKCdhJyksIGZ1bmN0aW9uVHlwZShbdHlwZVZhcmlhYmxlKCdhJyldLCB0eXBlVmFyaWFibGUoJ2InKSldLFxuXHRcdFx0dHlwZVZhcmlhYmxlKCdiJylcblx0XHQpLFxuXHRcdHF1YW50aWZpZWRWYXJzOiBbJ2EnLCAnYiddLFxuXHR9KTtcblxuXHQvLyBDb21wb3NlIG9wZXJhdG9yXG5cdG5ld0Vudi5zZXQoJzx8Jywge1xuXHRcdHR5cGU6IGZ1bmN0aW9uVHlwZShcblx0XHRcdFt0eXBlVmFyaWFibGUoJ2EnKSwgZnVuY3Rpb25UeXBlKFt0eXBlVmFyaWFibGUoJ2EnKV0sIHR5cGVWYXJpYWJsZSgnYicpKV0sXG5cdFx0XHR0eXBlVmFyaWFibGUoJ2InKVxuXHRcdCksXG5cdFx0cXVhbnRpZmllZFZhcnM6IFsnYScsICdiJ10sXG5cdH0pO1xuXG5cdC8vIFRocnVzaCBvcGVyYXRvciAocHVyZSkgLSBzYW1lIGFzIHBpcGVsaW5lXG5cdG5ld0Vudi5zZXQoJ3wnLCB7XG5cdFx0dHlwZTogZnVuY3Rpb25UeXBlKFxuXHRcdFx0W3R5cGVWYXJpYWJsZSgnYScpLCBmdW5jdGlvblR5cGUoW3R5cGVWYXJpYWJsZSgnYScpXSwgdHlwZVZhcmlhYmxlKCdiJykpXSxcblx0XHRcdHR5cGVWYXJpYWJsZSgnYicpXG5cdFx0KSxcblx0XHRxdWFudGlmaWVkVmFyczogWydhJywgJ2InXSxcblx0fSk7XG5cblx0Ly8gU2VtaWNvbG9uIG9wZXJhdG9yIChlZmZlY3RmdWwgLSBlZmZlY3RzIGFyZSB1bmlvbmVkKVxuXHRuZXdFbnYuc2V0KCc7Jywge1xuXHRcdHR5cGU6IGZ1bmN0aW9uVHlwZShcblx0XHRcdFt0eXBlVmFyaWFibGUoJ2EnKSwgdHlwZVZhcmlhYmxlKCdiJyldLFxuXHRcdFx0dHlwZVZhcmlhYmxlKCdiJylcblx0XHQpLFxuXHRcdHF1YW50aWZpZWRWYXJzOiBbJ2EnLCAnYiddLFxuXHR9KTtcblxuXHQvLyBEb2xsYXIgb3BlcmF0b3IgKGxvdyBwcmVjZWRlbmNlIGZ1bmN0aW9uIGFwcGxpY2F0aW9uKVxuXHRuZXdFbnYuc2V0KCckJywge1xuXHRcdHR5cGU6IGZ1bmN0aW9uVHlwZShcblx0XHRcdFtmdW5jdGlvblR5cGUoW3R5cGVWYXJpYWJsZSgnYScpXSwgdHlwZVZhcmlhYmxlKCdiJykpLCB0eXBlVmFyaWFibGUoJ2EnKV0sXG5cdFx0XHR0eXBlVmFyaWFibGUoJ2InKVxuXHRcdCksXG5cdFx0cXVhbnRpZmllZFZhcnM6IFsnYScsICdiJ10sXG5cdH0pO1xuXG5cdC8vIEVmZmVjdGZ1bCBmdW5jdGlvbnMgLSBJL08gYW5kIGxvZ2dpbmdcblx0bmV3RW52LnNldCgncHJpbnQnLCB7XG5cdFx0dHlwZTogZnVuY3Rpb25UeXBlKFxuXHRcdFx0W3R5cGVWYXJpYWJsZSgnYScpXSxcblx0XHRcdHR5cGVWYXJpYWJsZSgnYScpLFxuXHRcdFx0bmV3IFNldChbJ3dyaXRlJ10pXG5cdFx0KSxcblx0XHRxdWFudGlmaWVkVmFyczogWydhJ10sXG5cdH0pO1xuXG5cdG5ld0Vudi5zZXQoJ3ByaW50bG4nLCB7XG5cdFx0dHlwZTogZnVuY3Rpb25UeXBlKFxuXHRcdFx0W3R5cGVWYXJpYWJsZSgnYScpXSxcblx0XHRcdHR5cGVWYXJpYWJsZSgnYScpLFxuXHRcdFx0bmV3IFNldChbJ3dyaXRlJ10pXG5cdFx0KSxcblx0XHRxdWFudGlmaWVkVmFyczogWydhJ10sXG5cdH0pO1xuXG5cdG5ld0Vudi5zZXQoJ3JlYWRGaWxlJywge1xuXHRcdHR5cGU6IGZ1bmN0aW9uVHlwZShbc3RyaW5nVHlwZSgpXSwgc3RyaW5nVHlwZSgpLCBuZXcgU2V0KFsncmVhZCddKSksXG5cdFx0cXVhbnRpZmllZFZhcnM6IFtdLFxuXHR9KTtcblxuXHRuZXdFbnYuc2V0KCd3cml0ZUZpbGUnLCB7XG5cdFx0dHlwZTogZnVuY3Rpb25UeXBlKFxuXHRcdFx0W3N0cmluZ1R5cGUoKSwgc3RyaW5nVHlwZSgpXSxcblx0XHRcdHVuaXRUeXBlKCksXG5cdFx0XHRuZXcgU2V0KFsnd3JpdGUnXSlcblx0XHQpLFxuXHRcdHF1YW50aWZpZWRWYXJzOiBbXSxcblx0fSk7XG5cblx0bmV3RW52LnNldCgnbG9nJywge1xuXHRcdHR5cGU6IGZ1bmN0aW9uVHlwZShbc3RyaW5nVHlwZSgpXSwgdW5pdFR5cGUoKSwgbmV3IFNldChbJ2xvZyddKSksXG5cdFx0cXVhbnRpZmllZFZhcnM6IFtdLFxuXHR9KTtcblxuXHQvLyBSYW5kb20gbnVtYmVyIGdlbmVyYXRpb24gLSBzcGVjaWFsIHplcm8tYXJnIGZ1bmN0aW9uIHN5bnRheFxuXHRuZXdFbnYuc2V0KCdyYW5kb20nLCB7XG5cdFx0dHlwZTogaW50VHlwZSgpLCAvLyBGb3Igbm93LCB0cmVhdCBhcyBhIHZhbHVlIHdpdGggZWZmZWN0c1xuXHRcdHF1YW50aWZpZWRWYXJzOiBbXSxcblx0XHRlZmZlY3RzOiBuZXcgU2V0KFsncmFuZCddIGFzIEVmZmVjdFtdKSwgLy8gU3RvcmUgZWZmZWN0cyBzZXBhcmF0ZWx5XG5cdH0pO1xuXG5cdG5ld0Vudi5zZXQoJ3JhbmRvbVJhbmdlJywge1xuXHRcdHR5cGU6IGZ1bmN0aW9uVHlwZShbaW50VHlwZSgpLCBpbnRUeXBlKCldLCBpbnRUeXBlKCksIG5ldyBTZXQoWydyYW5kJ10pKSxcblx0XHRxdWFudGlmaWVkVmFyczogW10sXG5cdH0pO1xuXG5cdC8vIE11dGFibGUgc3RhdGUgb3BlcmF0aW9uc1xuXHRuZXdFbnYuc2V0KCdtdXRTZXQnLCB7XG5cdFx0dHlwZTogZnVuY3Rpb25UeXBlKFxuXHRcdFx0W3R5cGVWYXJpYWJsZSgncmVmJyksIHR5cGVWYXJpYWJsZSgnYScpXSxcblx0XHRcdHVuaXRUeXBlKCksXG5cdFx0XHRuZXcgU2V0KFsnc3RhdGUnXSlcblx0XHQpLFxuXHRcdHF1YW50aWZpZWRWYXJzOiBbJ3JlZicsICdhJ10sXG5cdH0pO1xuXG5cdG5ld0Vudi5zZXQoJ211dEdldCcsIHtcblx0XHR0eXBlOiBmdW5jdGlvblR5cGUoXG5cdFx0XHRbdHlwZVZhcmlhYmxlKCdyZWYnKV0sXG5cdFx0XHR0eXBlVmFyaWFibGUoJ2EnKSxcblx0XHRcdG5ldyBTZXQoWydzdGF0ZSddKVxuXHRcdCksXG5cdFx0cXVhbnRpZmllZFZhcnM6IFsncmVmJywgJ2EnXSxcblx0fSk7XG5cblx0Ly8gTGlzdCB1dGlsaXR5IGZ1bmN0aW9ucyAocHVyZSlcblx0bmV3RW52LnNldCgnbWFwJywge1xuXHRcdHR5cGU6IGZ1bmN0aW9uVHlwZShcblx0XHRcdFtcblx0XHRcdFx0ZnVuY3Rpb25UeXBlKFt0eXBlVmFyaWFibGUoJ2EnKV0sIHR5cGVWYXJpYWJsZSgnYicpKSxcblx0XHRcdFx0bGlzdFR5cGVXaXRoRWxlbWVudCh0eXBlVmFyaWFibGUoJ2EnKSksXG5cdFx0XHRdLFxuXHRcdFx0bGlzdFR5cGVXaXRoRWxlbWVudCh0eXBlVmFyaWFibGUoJ2InKSlcblx0XHQpLFxuXHRcdHF1YW50aWZpZWRWYXJzOiBbJ2EnLCAnYiddLFxuXHR9KTtcblx0bmV3RW52LnNldCgnZmlsdGVyJywge1xuXHRcdHR5cGU6IGZ1bmN0aW9uVHlwZShcblx0XHRcdFtcblx0XHRcdFx0ZnVuY3Rpb25UeXBlKFt0eXBlVmFyaWFibGUoJ2EnKV0sIGJvb2xUeXBlKCkpLFxuXHRcdFx0XHRsaXN0VHlwZVdpdGhFbGVtZW50KHR5cGVWYXJpYWJsZSgnYScpKSxcblx0XHRcdF0sXG5cdFx0XHRsaXN0VHlwZVdpdGhFbGVtZW50KHR5cGVWYXJpYWJsZSgnYScpKVxuXHRcdCksXG5cdFx0cXVhbnRpZmllZFZhcnM6IFsnYSddLFxuXHR9KTtcblx0bmV3RW52LnNldCgncmVkdWNlJywge1xuXHRcdHR5cGU6IGZ1bmN0aW9uVHlwZShcblx0XHRcdFtcblx0XHRcdFx0ZnVuY3Rpb25UeXBlKFxuXHRcdFx0XHRcdFt0eXBlVmFyaWFibGUoJ2InKV0sXG5cdFx0XHRcdFx0ZnVuY3Rpb25UeXBlKFt0eXBlVmFyaWFibGUoJ2EnKV0sIHR5cGVWYXJpYWJsZSgnYicpKVxuXHRcdFx0XHQpLFxuXHRcdFx0XHR0eXBlVmFyaWFibGUoJ2InKSxcblx0XHRcdFx0bGlzdFR5cGVXaXRoRWxlbWVudCh0eXBlVmFyaWFibGUoJ2EnKSksXG5cdFx0XHRdLFxuXHRcdFx0dHlwZVZhcmlhYmxlKCdiJylcblx0XHQpLFxuXHRcdHF1YW50aWZpZWRWYXJzOiBbJ2EnLCAnYiddLFxuXHR9KTtcblx0Y29uc3QgbGVuZ3RoVHlwZSA9IGNyZWF0ZVVuYXJ5RnVuY3Rpb25UeXBlKFxuXHRcdGxpc3RUeXBlV2l0aEVsZW1lbnQodHlwZVZhcmlhYmxlKCdhJykpLFxuXHRcdGludFR5cGUoKVxuXHQpO1xuXHRuZXdFbnYuc2V0KCdsZW5ndGgnLCB7XG5cdFx0dHlwZTogbGVuZ3RoVHlwZSxcblx0XHRxdWFudGlmaWVkVmFyczogWydhJ10sXG5cdH0pO1xuXHRuZXdFbnYuc2V0KCdpc0VtcHR5Jywge1xuXHRcdHR5cGU6IGNyZWF0ZVVuYXJ5RnVuY3Rpb25UeXBlKFxuXHRcdFx0bGlzdFR5cGVXaXRoRWxlbWVudCh0eXBlVmFyaWFibGUoJ2EnKSksXG5cdFx0XHRib29sVHlwZSgpXG5cdFx0KSxcblx0XHRxdWFudGlmaWVkVmFyczogWydhJ10sXG5cdH0pO1xuXHRuZXdFbnYuc2V0KCdhcHBlbmQnLCB7XG5cdFx0dHlwZTogY3JlYXRlQmluYXJ5RnVuY3Rpb25UeXBlKFxuXHRcdFx0bGlzdFR5cGVXaXRoRWxlbWVudCh0eXBlVmFyaWFibGUoJ2EnKSksXG5cdFx0XHRsaXN0VHlwZVdpdGhFbGVtZW50KHR5cGVWYXJpYWJsZSgnYScpKSxcblx0XHRcdGxpc3RUeXBlV2l0aEVsZW1lbnQodHlwZVZhcmlhYmxlKCdhJykpXG5cdFx0KSxcblx0XHRxdWFudGlmaWVkVmFyczogWydhJ10sXG5cdH0pO1xuXG5cdC8vIE1hdGggdXRpbGl0aWVzIChwdXJlKVxuXHRuZXdFbnYuc2V0KCdhYnMnLCB7XG5cdFx0dHlwZTogY3JlYXRlVW5hcnlGdW5jdGlvblR5cGUoaW50VHlwZSgpLCBpbnRUeXBlKCkpLFxuXHRcdHF1YW50aWZpZWRWYXJzOiBbXSxcblx0fSk7XG5cdG5ld0Vudi5zZXQoJ21heCcsIHtcblx0XHR0eXBlOiBjcmVhdGVCaW5hcnlGdW5jdGlvblR5cGUoaW50VHlwZSgpLCBpbnRUeXBlKCksIGludFR5cGUoKSksXG5cdFx0cXVhbnRpZmllZFZhcnM6IFtdLFxuXHR9KTtcblx0bmV3RW52LnNldCgnbWluJywge1xuXHRcdHR5cGU6IGNyZWF0ZUJpbmFyeUZ1bmN0aW9uVHlwZShpbnRUeXBlKCksIGludFR5cGUoKSwgaW50VHlwZSgpKSxcblx0XHRxdWFudGlmaWVkVmFyczogW10sXG5cdH0pO1xuXG5cdC8vIFN0cmluZyB1dGlsaXRpZXMgKHB1cmUpXG5cdG5ld0Vudi5zZXQoJ2NvbmNhdCcsIHtcblx0XHR0eXBlOiBjcmVhdGVCaW5hcnlGdW5jdGlvblR5cGUoc3RyaW5nVHlwZSgpLCBzdHJpbmdUeXBlKCksIHN0cmluZ1R5cGUoKSksXG5cdFx0cXVhbnRpZmllZFZhcnM6IFtdLFxuXHR9KTtcblx0bmV3RW52LnNldCgndG9TdHJpbmcnLCB7XG5cdFx0dHlwZTogY3JlYXRlVW5hcnlGdW5jdGlvblR5cGUodHlwZVZhcmlhYmxlKCdhJyksIHN0cmluZ1R5cGUoKSksXG5cdFx0cXVhbnRpZmllZFZhcnM6IFsnYSddLFxuXHR9KTtcblxuXHQvLyBSZWNvcmQgdXRpbGl0aWVzXG5cdG5ld0Vudi5zZXQoJ2hhc0tleScsIHtcblx0XHR0eXBlOiBjcmVhdGVCaW5hcnlGdW5jdGlvblR5cGUocmVjb3JkVHlwZSh7fSksIHN0cmluZ1R5cGUoKSwgYm9vbFR5cGUoKSksXG5cdFx0cXVhbnRpZmllZFZhcnM6IFtdLFxuXHR9KTtcblx0bmV3RW52LnNldCgnaGFzVmFsdWUnLCB7XG5cdFx0dHlwZTogY3JlYXRlQmluYXJ5RnVuY3Rpb25UeXBlKFxuXHRcdFx0cmVjb3JkVHlwZSh7fSksXG5cdFx0XHR0eXBlVmFyaWFibGUoJ2EnKSxcblx0XHRcdGJvb2xUeXBlKClcblx0XHQpLFxuXHRcdHF1YW50aWZpZWRWYXJzOiBbJ2EnXSxcblx0fSk7XG5cdG5ld0Vudi5zZXQoJ3NldCcsIHtcblx0XHR0eXBlOiBmdW5jdGlvblR5cGUoXG5cdFx0XHRbXG5cdFx0XHRcdHR5cGVWYXJpYWJsZSgnYWNjZXNzb3InKSwgLy8gQWNjZXB0IGFueSBhY2Nlc3NvciBmdW5jdGlvbiB0eXBlXG5cdFx0XHRcdHJlY29yZFR5cGUoe30pLFxuXHRcdFx0XHR0eXBlVmFyaWFibGUoJ2EnKSxcblx0XHRcdF0sXG5cdFx0XHRyZWNvcmRUeXBlKHt9KVxuXHRcdCksXG5cdFx0cXVhbnRpZmllZFZhcnM6IFsnYWNjZXNzb3InLCAnYSddLFxuXHR9KTtcblxuXHQvLyBUdXBsZSBvcGVyYXRpb25zIC0gb25seSBrZWVwIHNvdW5kIG9uZXNcblx0bmV3RW52LnNldChcblx0XHQndHVwbGVMZW5ndGgnLFxuXHRcdHsgdHlwZTogZnVuY3Rpb25UeXBlKFt0dXBsZVR5cGUoW10pXSwgaW50VHlwZSgpKSwgcXVhbnRpZmllZFZhcnM6IFtdIH0gLy8gQW55IHR1cGxlIC0+IEludFxuXHQpO1xuXHRuZXdFbnYuc2V0KFxuXHRcdCd0dXBsZUlzRW1wdHknLFxuXHRcdHsgdHlwZTogZnVuY3Rpb25UeXBlKFt0dXBsZVR5cGUoW10pXSwgYm9vbFR5cGUoKSksIHF1YW50aWZpZWRWYXJzOiBbXSB9IC8vIEFueSB0dXBsZSAtPiBCb29sXG5cdCk7XG5cblx0Ly8gaGVhZCBmdW5jdGlvbiBpcyBub3cgc2VsZi1ob3N0ZWQgaW4gc3RkbGliLm5vb1xuXG5cdC8vIE1pbmltYWwgYnVpbHQtaW4gZm9yIHNlbGYtaG9zdGVkIGZ1bmN0aW9uc1xuXHRuZXdFbnYuc2V0KCdsaXN0X2dldCcsIHtcblx0XHR0eXBlOiBmdW5jdGlvblR5cGUoXG5cdFx0XHRbaW50VHlwZSgpLCBsaXN0VHlwZVdpdGhFbGVtZW50KHR5cGVWYXJpYWJsZSgnYScpKV0sXG5cdFx0XHR0eXBlVmFyaWFibGUoJ2EnKVxuXHRcdCksXG5cdFx0cXVhbnRpZmllZFZhcnM6IFsnYSddLFxuXHR9KTtcblxuXHRyZXR1cm4geyAuLi5zdGF0ZSwgZW52aXJvbm1lbnQ6IG5ld0VudiB9O1xufTtcbiJdLCJ2ZXJzaW9uIjozfQ==