{"file":"/workspace/src/typer/builtins.ts","mappings":"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","names":[],"sources":["/workspace/src/typer/builtins.ts"],"sourcesContent":["import { TypeState } from './types';\nimport {\n\tfunctionType,\n\tintType,\n\tboolType,\n\tstringType,\n\trecordType,\n\ttupleType,\n\tlistTypeWithElement,\n\ttypeVariable,\n\tunitType,\n\tType,\n\tEffect,\n} from '../ast';\n\n// Helper: Create common function types\nconst createUnaryFunctionType = (paramType: Type, returnType: Type): Type =>\n\tfunctionType([paramType], returnType);\n\nconst createBinaryFunctionType = (\n\tparam1Type: Type,\n\tparam2Type: Type,\n\treturnType: Type\n): Type => functionType([param1Type, param2Type], returnType);\n\n// Initialize built-in types\nexport const initializeBuiltins = (state: TypeState): TypeState => {\n\tconst newEnv = new Map(state.environment);\n\n\t// Arithmetic operators\n\tnewEnv.set('+', {\n\t\ttype: functionType([intType(), intType()], intType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('-', {\n\t\ttype: functionType([intType(), intType()], intType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('*', {\n\t\ttype: functionType([intType(), intType()], intType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('/', {\n\t\ttype: functionType([intType(), intType()], intType()),\n\t\tquantifiedVars: [],\n\t});\n\n\t// Comparison operators\n\tnewEnv.set('==', {\n\t\ttype: functionType([typeVariable('a'), typeVariable('a')], boolType()),\n\t\tquantifiedVars: ['a'],\n\t});\n\tnewEnv.set('!=', {\n\t\ttype: functionType([typeVariable('a'), typeVariable('a')], boolType()),\n\t\tquantifiedVars: ['a'],\n\t});\n\tnewEnv.set('<', {\n\t\ttype: functionType([intType(), intType()], boolType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('>', {\n\t\ttype: functionType([intType(), intType()], boolType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('<=', {\n\t\ttype: functionType([intType(), intType()], boolType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('>=', {\n\t\ttype: functionType([intType(), intType()], boolType()),\n\t\tquantifiedVars: [],\n\t});\n\n\tconst tailType = functionType(\n\t\t[listTypeWithElement(typeVariable('a'))],\n\t\tlistTypeWithElement(typeVariable('a'))\n\t);\n\tnewEnv.set('tail', {\n\t\ttype: tailType,\n\t\tquantifiedVars: ['a'],\n\t});\n\tnewEnv.set('cons', {\n\t\ttype: functionType(\n\t\t\t[typeVariable('a'), listTypeWithElement(typeVariable('a'))],\n\t\t\tlistTypeWithElement(typeVariable('a'))\n\t\t),\n\t\tquantifiedVars: ['a'],\n\t});\n\n\t// Pipeline operator (pure)\n\tnewEnv.set('|>', {\n\t\ttype: functionType(\n\t\t\t[typeVariable('a'), functionType([typeVariable('a')], typeVariable('b'))],\n\t\t\ttypeVariable('b')\n\t\t),\n\t\tquantifiedVars: ['a', 'b'],\n\t});\n\n\t// Compose operator\n\tnewEnv.set('<|', {\n\t\ttype: functionType(\n\t\t\t[typeVariable('a'), functionType([typeVariable('a')], typeVariable('b'))],\n\t\t\ttypeVariable('b')\n\t\t),\n\t\tquantifiedVars: ['a', 'b'],\n\t});\n\n\t// Thrush operator (pure) - same as pipeline\n\tnewEnv.set('|', {\n\t\ttype: functionType(\n\t\t\t[typeVariable('a'), functionType([typeVariable('a')], typeVariable('b'))],\n\t\t\ttypeVariable('b')\n\t\t),\n\t\tquantifiedVars: ['a', 'b'],\n\t});\n\n\t// Semicolon operator (effectful - effects are unioned)\n\tnewEnv.set(';', {\n\t\ttype: functionType(\n\t\t\t[typeVariable('a'), typeVariable('b')],\n\t\t\ttypeVariable('b')\n\t\t),\n\t\tquantifiedVars: ['a', 'b'],\n\t});\n\n\t// Dollar operator (low precedence function application)\n\tnewEnv.set('$', {\n\t\ttype: functionType(\n\t\t\t[functionType([typeVariable('a')], typeVariable('b')), typeVariable('a')],\n\t\t\ttypeVariable('b')\n\t\t),\n\t\tquantifiedVars: ['a', 'b'],\n\t});\n\n\t// Effectful functions - I/O and logging\n\tnewEnv.set('print', {\n\t\ttype: functionType(\n\t\t\t[typeVariable('a')],\n\t\t\ttypeVariable('a'),\n\t\t\tnew Set(['write'])\n\t\t),\n\t\tquantifiedVars: ['a'],\n\t});\n\n\tnewEnv.set('println', {\n\t\ttype: functionType(\n\t\t\t[typeVariable('a')],\n\t\t\ttypeVariable('a'),\n\t\t\tnew Set(['write'])\n\t\t),\n\t\tquantifiedVars: ['a'],\n\t});\n\n\tnewEnv.set('readFile', {\n\t\ttype: functionType([stringType()], stringType(), new Set(['read'])),\n\t\tquantifiedVars: [],\n\t});\n\n\tnewEnv.set('writeFile', {\n\t\ttype: functionType(\n\t\t\t[stringType(), stringType()],\n\t\t\tunitType(),\n\t\t\tnew Set(['write'])\n\t\t),\n\t\tquantifiedVars: [],\n\t});\n\n\tnewEnv.set('log', {\n\t\ttype: functionType([stringType()], unitType(), new Set(['log'])),\n\t\tquantifiedVars: [],\n\t});\n\n\t// Random number generation - special zero-arg function syntax\n\tnewEnv.set('random', {\n\t\ttype: intType(), // For now, treat as a value with effects\n\t\tquantifiedVars: [],\n\t\teffects: new Set(['rand'] as Effect[]), // Store effects separately\n\t});\n\n\tnewEnv.set('randomRange', {\n\t\ttype: functionType([intType(), intType()], intType(), new Set(['rand'])),\n\t\tquantifiedVars: [],\n\t});\n\n\t// Mutable state operations\n\tnewEnv.set('mutSet', {\n\t\ttype: functionType(\n\t\t\t[typeVariable('ref'), typeVariable('a')],\n\t\t\tunitType(),\n\t\t\tnew Set(['state'])\n\t\t),\n\t\tquantifiedVars: ['ref', 'a'],\n\t});\n\n\tnewEnv.set('mutGet', {\n\t\ttype: functionType(\n\t\t\t[typeVariable('ref')],\n\t\t\ttypeVariable('a'),\n\t\t\tnew Set(['state'])\n\t\t),\n\t\tquantifiedVars: ['ref', 'a'],\n\t});\n\n\t// List utility functions (pure)\n\tnewEnv.set('map', {\n\t\ttype: functionType(\n\t\t\t[\n\t\t\t\tfunctionType([typeVariable('a')], typeVariable('b')),\n\t\t\t\tlistTypeWithElement(typeVariable('a')),\n\t\t\t],\n\t\t\tlistTypeWithElement(typeVariable('b'))\n\t\t),\n\t\tquantifiedVars: ['a', 'b'],\n\t});\n\tnewEnv.set('filter', {\n\t\ttype: functionType(\n\t\t\t[\n\t\t\t\tfunctionType([typeVariable('a')], boolType()),\n\t\t\t\tlistTypeWithElement(typeVariable('a')),\n\t\t\t],\n\t\t\tlistTypeWithElement(typeVariable('a'))\n\t\t),\n\t\tquantifiedVars: ['a'],\n\t});\n\tnewEnv.set('reduce', {\n\t\ttype: functionType(\n\t\t\t[\n\t\t\t\tfunctionType(\n\t\t\t\t\t[typeVariable('b')],\n\t\t\t\t\tfunctionType([typeVariable('a')], typeVariable('b'))\n\t\t\t\t),\n\t\t\t\ttypeVariable('b'),\n\t\t\t\tlistTypeWithElement(typeVariable('a')),\n\t\t\t],\n\t\t\ttypeVariable('b')\n\t\t),\n\t\tquantifiedVars: ['a', 'b'],\n\t});\n\tconst lengthType = createUnaryFunctionType(\n\t\tlistTypeWithElement(typeVariable('a')),\n\t\tintType()\n\t);\n\tnewEnv.set('length', {\n\t\ttype: lengthType,\n\t\tquantifiedVars: ['a'],\n\t});\n\tnewEnv.set('isEmpty', {\n\t\ttype: createUnaryFunctionType(\n\t\t\tlistTypeWithElement(typeVariable('a')),\n\t\t\tboolType()\n\t\t),\n\t\tquantifiedVars: ['a'],\n\t});\n\tnewEnv.set('append', {\n\t\ttype: createBinaryFunctionType(\n\t\t\tlistTypeWithElement(typeVariable('a')),\n\t\t\tlistTypeWithElement(typeVariable('a')),\n\t\t\tlistTypeWithElement(typeVariable('a'))\n\t\t),\n\t\tquantifiedVars: ['a'],\n\t});\n\n\t// Math utilities (pure)\n\tnewEnv.set('abs', {\n\t\ttype: createUnaryFunctionType(intType(), intType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('max', {\n\t\ttype: createBinaryFunctionType(intType(), intType(), intType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('min', {\n\t\ttype: createBinaryFunctionType(intType(), intType(), intType()),\n\t\tquantifiedVars: [],\n\t});\n\n\t// String utilities (pure)\n\tnewEnv.set('concat', {\n\t\ttype: createBinaryFunctionType(stringType(), stringType(), stringType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('toString', {\n\t\ttype: createUnaryFunctionType(typeVariable('a'), stringType()),\n\t\tquantifiedVars: ['a'],\n\t});\n\n\t// Record utilities\n\tnewEnv.set('hasKey', {\n\t\ttype: createBinaryFunctionType(recordType({}), stringType(), boolType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('hasValue', {\n\t\ttype: createBinaryFunctionType(\n\t\t\trecordType({}),\n\t\t\ttypeVariable('a'),\n\t\t\tboolType()\n\t\t),\n\t\tquantifiedVars: ['a'],\n\t});\n\tnewEnv.set('set', {\n\t\ttype: functionType(\n\t\t\t[\n\t\t\t\ttypeVariable('accessor'), // Accept any accessor function type\n\t\t\t\trecordType({}),\n\t\t\t\ttypeVariable('a'),\n\t\t\t],\n\t\t\trecordType({})\n\t\t),\n\t\tquantifiedVars: ['accessor', 'a'],\n\t});\n\n\t// Tuple operations - only keep sound ones\n\tnewEnv.set(\n\t\t'tupleLength',\n\t\t{ type: functionType([tupleType([])], intType()), quantifiedVars: [] } // Any tuple -> Int\n\t);\n\tnewEnv.set(\n\t\t'tupleIsEmpty',\n\t\t{ type: functionType([tupleType([])], boolType()), quantifiedVars: [] } // Any tuple -> Bool\n\t);\n\n\t// head function is now self-hosted in stdlib.noo\n\n\t// Minimal built-in for self-hosted functions\n\tnewEnv.set('list_get', {\n\t\ttype: functionType(\n\t\t\t[intType(), listTypeWithElement(typeVariable('a'))],\n\t\t\ttypeVariable('a')\n\t\t),\n\t\tquantifiedVars: ['a'],\n\t});\n\n\treturn { ...state, environment: newEnv };\n};\n"],"version":3}