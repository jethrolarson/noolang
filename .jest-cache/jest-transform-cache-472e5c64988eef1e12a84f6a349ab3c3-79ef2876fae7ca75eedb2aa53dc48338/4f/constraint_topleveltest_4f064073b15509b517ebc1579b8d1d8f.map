{"file":"/workspace/test/constraint_toplevel.test.ts","mappings":"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","names":[],"sources":["/workspace/test/constraint_toplevel.test.ts"],"sourcesContent":["import { Lexer } from \"../src/lexer\";\nimport { parse } from \"../src/parser/parser\";\nimport { typeAndDecorate } from \"../src/typer/decoration\";\n\ndescribe(\"Top-level Constraint and Implement Definitions\", () => {\n  const runConstraintCode = (code: string) => {\n    const lexer = new Lexer(code);\n    const tokens = lexer.tokenize();\n    const ast = parse(tokens);\n    const typedResult = typeAndDecorate(ast);\n    return typedResult;\n  };\n\n  test(\"should parse constraint definition at top level\", () => {\n    const code = `constraint Show a ( show : a -> String )`;\n    const result = runConstraintCode(code);\n    \n    expect(result.program.statements).toHaveLength(1);\n    expect(result.program.statements[0].kind).toBe(\"constraint-definition\");\n    \n    const constraintDef = result.program.statements[0] as any;\n    expect(constraintDef.name).toBe(\"Show\");\n    expect(constraintDef.typeParam).toBe(\"a\");\n    expect(constraintDef.functions).toHaveLength(1);\n    expect(constraintDef.functions[0].name).toBe(\"show\");\n  });\n\n  test(\"should parse implement definition at top level\", () => {\n    const code = `\n      constraint Show a ( show : a -> String );\n      implement Show Int ( show = toString )\n    `;\n    const result = runConstraintCode(code);\n    \n    expect(result.program.statements).toHaveLength(1);\n    expect(result.program.statements[0].kind).toBe(\"binary\");\n    \n    // Navigate the binary expression tree: constraint ; implement\n    const binaryExpr = result.program.statements[0] as any;\n    expect(binaryExpr.operator).toBe(\";\");\n    expect(binaryExpr.left.kind).toBe(\"constraint-definition\");\n    expect(binaryExpr.right.kind).toBe(\"implement-definition\");\n    \n    const constraintDef = binaryExpr.left;\n    expect(constraintDef.name).toBe(\"Show\");\n    \n    const implementDef = binaryExpr.right;\n    expect(implementDef.constraintName).toBe(\"Show\");\n    expect(implementDef.typeName).toBe(\"Int\");\n    expect(implementDef.implementations).toHaveLength(1);\n    expect(implementDef.implementations[0].name).toBe(\"show\");\n  });\n\n  test(\"should resolve constraint functions from implementations\", () => {\n    const code = `\n      constraint Show a ( show : a -> String );\n      implement Show Int ( show = toString );\n      x = show 42\n    `;\n    const result = runConstraintCode(code);\n    \n    expect(result.program.statements).toHaveLength(1);\n    expect(result.program.statements[0].kind).toBe(\"binary\");\n    \n    // Navigate the binary expression tree: (constraint ; implement) ; definition\n    const outerBinary = result.program.statements[0] as any;\n    expect(outerBinary.operator).toBe(\";\");\n    expect(outerBinary.left.kind).toBe(\"binary\"); // constraint ; implement\n    expect(outerBinary.right.kind).toBe(\"definition\"); // x = show 42\n    \n    const definition = outerBinary.right;\n    expect(definition.name).toBe(\"x\");\n  });\n\n  test(\"should support multiple constraint functions\", () => {\n    const code = `\n      constraint Eq a ( \n        equals : a -> a -> Bool; \n        notEquals : a -> a -> Bool \n      );\n      implement Eq Int ( \n        equals = fn a b => a == b;\n        notEquals = fn a b => a != b\n      );\n      result = equals 1 2\n    `;\n    const result = runConstraintCode(code);\n    \n    expect(result.program.statements).toHaveLength(1);\n    expect(result.program.statements[0].kind).toBe(\"binary\");\n    \n    // Navigate the binary expression tree: (constraint ; implement) ; definition\n    const outerBinary = result.program.statements[0] as any;\n    const innerBinary = outerBinary.left; // constraint ; implement\n    \n    const constraintDef = innerBinary.left;\n    expect(constraintDef.kind).toBe(\"constraint-definition\");\n    expect(constraintDef.functions).toHaveLength(2);\n    expect(constraintDef.functions[0].name).toBe(\"equals\");\n    expect(constraintDef.functions[1].name).toBe(\"notEquals\");\n    \n    const implementDef = innerBinary.right;\n    expect(implementDef.kind).toBe(\"implement-definition\");\n    expect(implementDef.implementations).toHaveLength(2);\n    expect(implementDef.implementations[0].name).toBe(\"equals\");\n    expect(implementDef.implementations[1].name).toBe(\"notEquals\");\n  });\n});"],"version":3}