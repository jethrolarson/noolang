1ffe31b1b24afb8d20ce43ec18686b07
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.satisfiesConstraint = exports.validateConstraintName = exports.solveConstraint = exports.solveConstraints = void 0;
exports.propagateConstraintToType = propagateConstraintToType;
exports.collectAllConstraintsForVar = collectAllConstraintsForVar;
exports.validateAllSubstitutionConstraints = validateAllSubstitutionConstraints;
const ast_1 = require("../ast");
const type_errors_1 = require("./type-errors");
const substitute_1 = require("./substitute");
const helpers_1 = require("./helpers");
const unify_1 = require("./unify");
// Constraint solving functions
const solveConstraints = (constraints, state, location) => {
    let currentState = state;
    for (const constraint of constraints) {
        currentState = (0, exports.solveConstraint)(constraint, currentState, location);
    }
    return currentState;
};
exports.solveConstraints = solveConstraints;
const solveConstraint = (constraint, state, location) => {
    switch (constraint.kind) {
        case "is":
            return solveIsConstraint(constraint, state, location);
        case "hasField":
            return solveHasFieldConstraint(constraint, state, location);
        case "implements":
            return solveImplementsConstraint(constraint, state, location);
        case "custom":
            return solveCustomConstraint(constraint, state, location);
        default:
            return state;
    }
};
exports.solveConstraint = solveConstraint;
const solveIsConstraint = (constraint, state, location) => {
    // Validate constraint name first
    (0, exports.validateConstraintName)(constraint.constraint);
    const typeVar = (0, substitute_1.substitute)((0, ast_1.typeVariable)(constraint.typeVar), state.substitution);
    // If the type variable has been unified to a concrete type, check if it satisfies the constraint
    if (typeVar.kind !== "variable") {
        // Check if the concrete type satisfies the constraint
        if (!(0, exports.satisfiesConstraint)(typeVar, constraint.constraint)) {
            throw new Error((0, type_errors_1.formatTypeError)((0, type_errors_1.createTypeError)(`Type ${(0, helpers_1.typeToString)(typeVar, state.substitution)} does not satisfy constraint '${constraint.constraint}'. This often occurs when trying to use a partial function (one that can fail) in an unsafe context like function composition. Consider using total functions that return Option or Result types instead.`, {}, location || { line: 1, column: 1 })));
        }
    }
    else {
        // For type variables, we need to track the constraint for later solving
        // Add the constraint to the type variable if it doesn't already have it
        if (!typeVar.constraints) {
            typeVar.constraints = [];
        }
        // Check if this constraint is already present
        const existingConstraint = typeVar.constraints.find((c) => c.kind === "is" &&
            c.typeVar === constraint.typeVar &&
            c.constraint === constraint.constraint);
        if (!existingConstraint) {
            typeVar.constraints.push(constraint);
        }
    }
    return state;
};
const solveHasFieldConstraint = (constraint, state, location) => {
    const typeVar = (0, substitute_1.substitute)((0, ast_1.typeVariable)(constraint.typeVar), state.substitution);
    if (typeVar.kind === "record") {
        // Check if the record has the required field with the right type
        if (!(constraint.field in typeVar.fields)) {
            throw new Error((0, type_errors_1.formatTypeError)((0, type_errors_1.createTypeError)(`Record type missing required field '${constraint.field}'`, {}, location || { line: 1, column: 1 })));
        }
        // Unify the field type
        let newState = state;
        newState = (0, unify_1.unify)(typeVar.fields[constraint.field], constraint.fieldType, newState, location);
        return newState;
    }
    else if (typeVar.kind === "variable") {
        // For type variables, we'll track the constraint for later solving
        return state;
    }
    else {
        throw new Error((0, type_errors_1.formatTypeError)((0, type_errors_1.createTypeError)(`Type ${(0, helpers_1.typeToString)(typeVar, state.substitution)} cannot have fields`, {}, location || { line: 1, column: 1 })));
    }
};
const solveImplementsConstraint = (constraint, state, location) => {
    // For now, we'll just track the constraint
    // In a full implementation, we'd check if the type implements the interface
    return state;
};
const solveCustomConstraint = (constraint, state, location) => {
    // For now, we'll just track the constraint
    // In a full implementation, we'd call the custom constraint solver
    return state;
};
// Validate that a constraint name is valid
const validateConstraintName = (constraint) => {
    // All constraints are now meaningless type checks, so reject them all
    throw new Error(`Constraint '${constraint}' is not supported. Use hasField constraints for record typing instead.`);
};
exports.validateConstraintName = validateConstraintName;
const satisfiesConstraint = (type, constraint) => {
    // All non-hasField constraints are meaningless, so they're not supported
    return false;
};
exports.satisfiesConstraint = satisfiesConstraint;
// Helper: Recursively push a constraint to all type variables inside a type
function propagateConstraintToType(type, constraint) {
    switch (type.kind) {
        case "variable":
            type.constraints = type.constraints || [];
            if (!type.constraints.some((c) => (0, helpers_1.constraintsEqual)(c, constraint))) {
                type.constraints.push(constraint);
            }
            else {
            }
            break;
        case "function":
            for (const param of type.params) {
                propagateConstraintToType(param, constraint);
            }
            propagateConstraintToType(type.return, constraint);
            break;
        case "list":
            propagateConstraintToType(type.element, constraint);
            break;
        case "tuple":
            for (const el of type.elements) {
                propagateConstraintToType(el, constraint);
            }
            break;
        case "record":
            for (const fieldType of Object.values(type.fields)) {
                propagateConstraintToType(fieldType, constraint);
            }
            break;
        case "union":
            for (const t of type.types) {
                propagateConstraintToType(t, constraint);
            }
            break;
        // For primitives, unit, unknown: do nothing
    }
}
// Collect all constraints for a variable, following the substitution chain
function collectAllConstraintsForVar(varName, substitution) {
    const seen = new Set();
    let constraints = [];
    let currentVarName = varName;
    let currentType = substitution.get(currentVarName);
    while (currentType && (0, helpers_1.isTypeKind)(currentType, "variable")) {
        if (seen.has(currentVarName)) {
            break; // Prevent cycles
        }
        seen.add(currentVarName);
        if (currentType.constraints) {
            constraints = constraints.concat(currentType.constraints);
        }
        currentVarName = currentType.name;
        currentType = substitution.get(currentVarName);
    }
    // Also check the original variable
    const origType = substitution.get(varName);
    if (origType && (0, helpers_1.isTypeKind)(origType, "variable") && origType.constraints) {
        constraints = constraints.concat(origType.constraints);
    }
    return constraints;
}
// After type inference, validate all constraints in the substitution map
function validateAllSubstitutionConstraints(state) {
    for (const [varName, concreteType] of state.substitution.entries()) {
        // Only check if the concreteType is not a variable
        if (concreteType.kind !== "variable") {
            // Collect all constraints from the substitution chain
            const constraintsToCheck = collectAllConstraintsForVar(varName, state.substitution);
            for (const constraint of constraintsToCheck) {
                if (constraint.kind === "hasField" &&
                    (0, helpers_1.isTypeKind)(concreteType, "record")) {
                    if (!(constraint.field in concreteType.fields)) {
                        throw new Error(`Record type missing required field '${constraint.field}'`);
                    }
                    // Optionally, unify field types here if needed
                }
                else if (constraint.kind === "is") {
                    if (!(0, exports.satisfiesConstraint)(concreteType, constraint.constraint)) {
                        throw new Error(`Type variable '${varName}' was unified to ${(0, helpers_1.typeToString)(concreteType)} but does not satisfy constraint '${constraint.constraint}'. This typically means a partial function is being used in an unsafe context. Consider using total functions that return Option or Result types instead of partial functions with constraints.`);
                    }
                }
            }
        }
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,