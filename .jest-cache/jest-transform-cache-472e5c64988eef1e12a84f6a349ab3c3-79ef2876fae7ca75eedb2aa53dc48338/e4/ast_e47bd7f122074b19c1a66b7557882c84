4856a16e6504bb05cf3e9b4a78b3ddb1
"use strict";
// AST types for Noolang
Object.defineProperty(exports, "__esModule", { value: true });
exports.constrainedFunctionType = exports.constrainedTypeVariable = exports.customConstraint = exports.implementsConstraint = exports.hasFieldConstraint = exports.isConstraint = exports.resultString = exports.optionInt = exports.resultType = exports.optionType = exports.unitType = exports.adtType = exports.variantType = exports.unionType = exports.variableType = exports.primitiveType = exports.recordType = exports.tupleTypeConstructor = exports.tupleType = exports.listTypeWithElement = exports.unknownType = exports.typeVariable = exports.functionType = exports.listType = exports.boolType = exports.stringType = exports.numberType = exports.intType = exports.createPosition = exports.createLocation = void 0;
// Utility functions
const createLocation = (start, end) => ({
    start,
    end,
});
exports.createLocation = createLocation;
const createPosition = (line, column) => ({
    line,
    column,
});
exports.createPosition = createPosition;
// Type constructors
const intType = () => ({
    kind: 'primitive',
    name: 'Int',
});
exports.intType = intType;
const numberType = () => ({
    kind: 'primitive',
    name: 'Int',
}); // Alias for backwards compatibility
exports.numberType = numberType;
const stringType = () => ({
    kind: 'primitive',
    name: 'String',
});
exports.stringType = stringType;
const boolType = () => ({
    kind: 'variant',
    name: 'Bool',
    args: [],
});
exports.boolType = boolType;
const listType = () => ({
    kind: 'primitive',
    name: 'List',
});
exports.listType = listType;
const functionType = (params, returnType, effects = new Set()) => ({
    kind: 'function',
    params,
    return: returnType,
    effects,
});
exports.functionType = functionType;
const typeVariable = (name) => ({
    kind: 'variable',
    name,
});
exports.typeVariable = typeVariable;
const unknownType = () => ({ kind: 'unknown' });
exports.unknownType = unknownType;
// New type constructors
const listTypeWithElement = (element) => ({
    kind: 'list',
    element,
});
exports.listTypeWithElement = listTypeWithElement;
const tupleType = (elements) => ({
    kind: 'tuple',
    elements,
});
exports.tupleType = tupleType;
// Add tuple type constructor for Tuple T1 T2 syntax
const tupleTypeConstructor = (elementTypes) => ({
    kind: 'tuple',
    elements: elementTypes,
});
exports.tupleTypeConstructor = tupleTypeConstructor;
const recordType = (fields) => ({
    kind: 'record',
    fields,
});
exports.recordType = recordType;
// Constructor functions for new types
const primitiveType = (name) => ({
    kind: 'primitive',
    name,
});
exports.primitiveType = primitiveType;
const variableType = (name, constraints) => ({
    kind: 'variable',
    name,
    constraints,
});
exports.variableType = variableType;
const unionType = (types) => ({
    kind: 'union',
    types,
});
exports.unionType = unionType;
const variantType = (name, args) => ({
    kind: 'variant',
    name,
    args,
});
exports.variantType = variantType;
const adtType = (name, typeParams, constructors) => ({
    kind: 'adt',
    name,
    typeParams,
    constructors,
});
exports.adtType = adtType;
const unitType = () => ({ kind: 'unit' });
exports.unitType = unitType;
// Helper functions to create ADT variant types
const optionType = (element) => ({
    kind: 'variant',
    name: 'Option',
    args: [element],
});
exports.optionType = optionType;
const resultType = (success, error) => ({
    kind: 'variant',
    name: 'Result',
    args: [success, error],
});
exports.resultType = resultType;
// Convenience functions for common types
const optionInt = () => (0, exports.optionType)((0, exports.intType)());
exports.optionInt = optionInt;
const resultString = (error) => (0, exports.resultType)((0, exports.stringType)(), error);
exports.resultString = resultString;
// Constraint helper functions
const isConstraint = (typeVar, constraint) => ({
    kind: 'is',
    typeVar,
    constraint,
});
exports.isConstraint = isConstraint;
const hasFieldConstraint = (typeVar, field, fieldType) => ({
    kind: 'hasField',
    typeVar,
    field,
    fieldType,
});
exports.hasFieldConstraint = hasFieldConstraint;
const implementsConstraint = (typeVar, interfaceName) => ({
    kind: 'implements',
    typeVar,
    interfaceName,
});
exports.implementsConstraint = implementsConstraint;
const customConstraint = (typeVar, constraint, args) => ({
    kind: 'custom',
    typeVar,
    constraint,
    args,
});
exports.customConstraint = customConstraint;
// Constrained type variable
const constrainedTypeVariable = (name, constraints) => ({
    kind: 'variable',
    name,
    constraints,
});
exports.constrainedTypeVariable = constrainedTypeVariable;
// Constrained function type
const constrainedFunctionType = (params, returnType, effects = new Set(), constraints = []) => ({
    kind: 'function',
    params,
    return: returnType,
    effects,
    constraints,
});
exports.constrainedFunctionType = constrainedFunctionType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,