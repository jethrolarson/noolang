af1720554ff433a99f4e380ae90cc40f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../types");
const type_operations_1 = require("../type-operations");
const constraint_resolution_1 = require("../constraint-resolution");
const ast_1 = require("../../ast");
describe('Constraint Resolution', () => {
    test('should resolve constraint function calls', () => {
        const state = (0, type_operations_1.createTypeState)();
        // Add Show constraint
        const showSignature = {
            name: 'Show',
            typeParam: 'a',
            functions: new Map([
                ['show', (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.stringType)())]
            ])
        };
        (0, types_1.addConstraintDefinition)(state.constraintRegistry, 'Show', showSignature);
        // Add Int implementation
        const intImpl = {
            functions: new Map([
                ['show', {
                        type: (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.stringType)()),
                        quantifiedVars: [],
                        effects: new Set()
                    }]
            ])
        };
        (0, types_1.addConstraintImplementation)(state.constraintRegistry, 'Show', 'Int', intImpl);
        // Try to resolve a constraint function call
        const argTypes = [(0, ast_1.intType)()];
        const resolution = (0, constraint_resolution_1.tryResolveConstraintFunction)('show', [], // args expressions (not used in current implementation)
        argTypes, state);
        expect(resolution.resolved).toBe(true);
        expect(resolution.specializedName).toBe('__Show_show_Int');
        expect(resolution.typeScheme).toBeTruthy();
    });
    test('should detect constraint variables', () => {
        const state = (0, type_operations_1.createTypeState)();
        // Add Show constraint
        const showSignature = {
            name: 'Show',
            typeParam: 'a',
            functions: new Map([
                ['show', (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.stringType)())]
            ])
        };
        (0, types_1.addConstraintDefinition)(state.constraintRegistry, 'Show', showSignature);
        // Test constraint variable detection
        const resolution = (0, constraint_resolution_1.resolveConstraintVariable)('show', state);
        expect(resolution.resolved).toBe(true);
        expect(resolution.needsResolution).toBe(true);
        expect(resolution.constraintName).toBe('Show');
        expect(resolution.functionName).toBe('show');
    });
    test('should create constraint function types', () => {
        const state = (0, type_operations_1.createTypeState)();
        // Add Show constraint
        const showSignature = {
            name: 'Show',
            typeParam: 'a',
            functions: new Map([
                ['show', (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.stringType)())]
            ])
        };
        (0, types_1.addConstraintDefinition)(state.constraintRegistry, 'Show', showSignature);
        // Create constraint function type
        const constraintType = (0, constraint_resolution_1.createConstraintFunctionType)('Show', 'show', state);
        expect(constraintType.kind).toBe('function');
        if (constraintType.kind === 'function') {
            expect(constraintType.params).toHaveLength(1);
            expect(constraintType.params[0]).toEqual((0, ast_1.intType)());
            expect(constraintType.return).toEqual((0, ast_1.stringType)());
        }
    });
    test('should decorate environment with specialized functions', () => {
        const state = (0, type_operations_1.createTypeState)();
        // Add Show constraint and implementation
        const showSignature = {
            name: 'Show',
            typeParam: 'a',
            functions: new Map([
                ['show', (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.stringType)())]
            ])
        };
        (0, types_1.addConstraintDefinition)(state.constraintRegistry, 'Show', showSignature);
        const intImpl = {
            functions: new Map([
                ['show', {
                        type: (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.stringType)()),
                        quantifiedVars: [],
                        effects: new Set()
                    }]
            ])
        };
        (0, types_1.addConstraintImplementation)(state.constraintRegistry, 'Show', 'Int', intImpl);
        // Decorate environment
        const decoratedState = (0, constraint_resolution_1.decorateEnvironmentWithConstraintFunctions)(state);
        // Check that specialized function was added
        const specializedName = '__Show_show_Int';
        expect(decoratedState.environment.has(specializedName)).toBe(true);
        const specializedScheme = decoratedState.environment.get(specializedName);
        expect(specializedScheme).toBeTruthy();
        expect(specializedScheme?.type.kind).toBe('function');
    });
    test('should handle multiple constraints and implementations', () => {
        const state = (0, type_operations_1.createTypeState)();
        // Add Show constraint
        const showSignature = {
            name: 'Show',
            typeParam: 'a',
            functions: new Map([
                ['show', (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.stringType)())]
            ])
        };
        (0, types_1.addConstraintDefinition)(state.constraintRegistry, 'Show', showSignature);
        // Add Eq constraint
        const eqSignature = {
            name: 'Eq',
            typeParam: 'a',
            functions: new Map([
                ['equals', (0, ast_1.functionType)([(0, ast_1.intType)(), (0, ast_1.intType)()], (0, ast_1.stringType)())]
            ])
        };
        (0, types_1.addConstraintDefinition)(state.constraintRegistry, 'Eq', eqSignature);
        // Add implementations for both
        const showImpl = {
            functions: new Map([
                ['show', {
                        type: (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.stringType)()),
                        quantifiedVars: [],
                        effects: new Set()
                    }]
            ])
        };
        (0, types_1.addConstraintImplementation)(state.constraintRegistry, 'Show', 'Int', showImpl);
        const eqImpl = {
            functions: new Map([
                ['equals', {
                        type: (0, ast_1.functionType)([(0, ast_1.intType)(), (0, ast_1.intType)()], (0, ast_1.stringType)()),
                        quantifiedVars: [],
                        effects: new Set()
                    }]
            ])
        };
        (0, types_1.addConstraintImplementation)(state.constraintRegistry, 'Eq', 'Int', eqImpl);
        // Test resolution for both
        const showResolution = (0, constraint_resolution_1.tryResolveConstraintFunction)('show', [], [(0, ast_1.intType)()], state);
        const eqResolution = (0, constraint_resolution_1.tryResolveConstraintFunction)('equals', [], [(0, ast_1.intType)(), (0, ast_1.intType)()], state);
        expect(showResolution.resolved).toBe(true);
        expect(showResolution.specializedName).toBe('__Show_show_Int');
        expect(eqResolution.resolved).toBe(true);
        expect(eqResolution.specializedName).toBe('__Eq_equals_Int');
    });
    test('should fail to resolve when no implementation exists', () => {
        const state = (0, type_operations_1.createTypeState)();
        // Add Show constraint but no implementation
        const showSignature = {
            name: 'Show',
            typeParam: 'a',
            functions: new Map([
                ['show', (0, ast_1.functionType)([(0, ast_1.intType)()], (0, ast_1.stringType)())]
            ])
        };
        (0, types_1.addConstraintDefinition)(state.constraintRegistry, 'Show', showSignature);
        // Try to resolve without implementation
        const resolution = (0, constraint_resolution_1.tryResolveConstraintFunction)('show', [], [(0, ast_1.intType)()], state);
        expect(resolution.resolved).toBe(false);
        expect(resolution.specializedName).toBeUndefined();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,