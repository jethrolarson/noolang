62f96b82b465f10777ef371991519a3e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lexer_1 = require("../src/lexer");
const parser_1 = require("../src/parser/parser");
const typer_1 = require("../src/typer");
const evaluator_1 = require("../src/evaluator");
function unwrapValue(val) {
    if (val === null)
        return null;
    if (typeof val !== "object")
        return val;
    switch (val.tag) {
        case "number":
            return val.value;
        case "string":
            return val.value;
        case "constructor":
            if (val.name === "True")
                return true;
            if (val.name === "False")
                return false;
            return { name: val.name, args: val.args.map(unwrapValue) };
        case "list":
            return val.values.map(unwrapValue);
        case "tuple":
            return val.values.map(unwrapValue);
        case "record": {
            const obj = {};
            for (const k in val.fields)
                obj[k] = unwrapValue(val.fields[k]);
            return obj;
        }
        default:
            return val;
    }
}
describe("Option Type Unification Tests", () => {
    let evaluator;
    beforeEach(() => {
        evaluator = new evaluator_1.Evaluator();
    });
    const runCode = (code) => {
        const lexer = new lexer_1.Lexer(code);
        const tokens = lexer.tokenize();
        const ast = (0, parser_1.parse)(tokens);
        const decoratedResult = (0, typer_1.typeAndDecorate)(ast);
        return evaluator.evaluateProgram(decoratedResult.program);
    };
    test("should handle simple Option construction", () => {
        const code = `Some 42`;
        const result = runCode(code);
        const unwrapped = unwrapValue(result.finalResult);
        expect(unwrapped.name).toBe("Some");
        expect(unwrapped.args).toEqual([42]);
    });
    test("should handle None construction", () => {
        const code = `None`;
        const result = runCode(code);
        const unwrapped = unwrapValue(result.finalResult);
        expect(unwrapped.name).toBe("None");
        expect(unwrapped.args).toEqual([]);
    });
    test("should handle Option in conditional expressions", () => {
        // FIXME: Currently fails with "Cannot unify Option a with Option a"
        const code = `
      result = if True then Some 42 else None;
      result
    `;
        const result = runCode(code);
        const unwrapped = unwrapValue(result.finalResult);
        expect(unwrapped.name).toBe("Some");
        expect(unwrapped.args).toEqual([42]);
    });
    test("should handle Option function return types", () => {
        const code = `
      makeOption = fn x => if x > 0 then Some x else None;
      makeOption 5
    `;
        const result = runCode(code);
        const unwrapped = unwrapValue(result.finalResult);
        expect(unwrapped.name).toBe("Some");
        expect(unwrapped.args).toEqual([5]);
    });
    test("should handle safe division function", () => {
        // FIXME: Currently fails with "Cannot unify Option a with Option a"
        const code = `
      safe_divide = fn a b => if b == 0 then None else Some (a / b);
      safe_divide 10 2
    `;
        const result = runCode(code);
        const unwrapped = unwrapValue(result.finalResult);
        expect(unwrapped.name).toBe("Some");
        expect(unwrapped.args).toEqual([5]);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,