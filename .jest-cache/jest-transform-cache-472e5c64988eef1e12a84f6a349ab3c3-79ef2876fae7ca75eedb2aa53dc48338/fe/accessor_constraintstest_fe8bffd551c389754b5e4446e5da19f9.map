{"file":"/workspace/test/accessor_constraints.test.ts","mappings":"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","names":[],"sources":["/workspace/test/accessor_constraints.test.ts"],"sourcesContent":["import { parse } from \"../src/parser/parser\";\nimport { Lexer } from \"../src/lexer\";\nimport { typeProgram } from \"../src/typer\";\nimport { Evaluator } from \"../src/evaluator\";\n\nconst parseProgram = (code: string) => {\n  const lexer = new Lexer(code);\n  const tokens = lexer.tokenize();\n  return parse(tokens);\n};\n\ndescribe(\"Accessor Constraints\", () => {\n  describe(\"hasField constraint generation\", () => {\n    it(\"should generate hasField constraints for record accessors\", () => {\n      const program = parseProgram('getName = @name; getName {@name \"Alice\"}');\n      const result = typeProgram(program);\n      expect(result).toBeDefined();\n    });\n\n    it(\"should reject accessor on record without field\", () => {\n      const program = parseProgram(\"getName = @name; getName {@age 30}\");\n      expect(() => typeProgram(program)).toThrow();\n    });\n\n    it(\"should work with partial accessor application\", () => {\n      const program = parseProgram(\"getName = @name\");\n      const result = typeProgram(program);\n      expect(result).toBeDefined();\n    });\n\n    it(\"should enforce field types\", () => {\n      const program = parseProgram(\"getName = @name; getName {@name 42}\");\n      const result = typeProgram(program);\n      expect(result).toBeDefined(); // Should type check with name: Int\n    });\n  });\n\n  describe(\"Runtime accessor behavior\", () => {\n    it(\"should work with valid field access\", () => {\n      const evaluator = new Evaluator();\n      const program = parseProgram('getName = @name; getName {@name \"Alice\"}');\n      const result = evaluator.evaluateProgram(program);\n      expect(result.finalResult).toEqual({ tag: \"string\", value: \"Alice\" });\n    });\n\n    it(\"should handle missing field at runtime\", () => {\n      const evaluator = new Evaluator();\n      const program = parseProgram(\"getName = @name; getName {@age 30}\");\n      expect(() => evaluator.evaluateProgram(program)).toThrow();\n    });\n  });\n\n  describe(\"Multiple field constraints\", () => {\n    it(\"should handle multiple field accesses\", () => {\n      const program = parseProgram(`\n        getAge = fn person => (@age person) + 1;\n        getAge {@age 25}\n      `);\n      const result = typeProgram(program);\n      expect(result).toBeDefined();\n    });\n\n    it(\"should reject when multiple fields are missing\", () => {\n      const program = parseProgram(`\n        getAge = fn person => (@age person) + 1;\n        getAge {@name \"Alice Smith\"}\n      `);\n      expect(() => typeProgram(program)).toThrow();\n    });\n  });\n});\n"],"version":3}