5a42a7cbf4ef12f79ba84af1df643f78
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConstraintSignature = exports.resolveConstraintFunction = exports.addConstraintImplementation = exports.addConstraintDefinition = exports.createConstraintRegistry = exports.createPureTypeResult = exports.createTypeResult = exports.unionEffects = exports.singleEffect = exports.emptyEffects = void 0;
// Effect manipulation helpers
const emptyEffects = () => new Set();
exports.emptyEffects = emptyEffects;
const singleEffect = (effect) => new Set([effect]);
exports.singleEffect = singleEffect;
const unionEffects = (...effectSets) => {
    const result = new Set();
    for (const effects of effectSets) {
        for (const effect of effects) {
            result.add(effect);
        }
    }
    return result;
};
exports.unionEffects = unionEffects;
const createTypeResult = (type, effects, state) => ({
    type,
    effects,
    state,
});
exports.createTypeResult = createTypeResult;
const createPureTypeResult = (type, state) => ({
    type,
    effects: (0, exports.emptyEffects)(),
    state,
});
exports.createPureTypeResult = createPureTypeResult;
// Constraint registry helpers
const createConstraintRegistry = () => new Map();
exports.createConstraintRegistry = createConstraintRegistry;
const addConstraintDefinition = (registry, name, signature) => {
    registry.set(name, {
        signature,
        implementations: new Map()
    });
};
exports.addConstraintDefinition = addConstraintDefinition;
const addConstraintImplementation = (registry, constraintName, typeName, implementation) => {
    const constraint = registry.get(constraintName);
    if (!constraint) {
        return false; // Constraint not defined
    }
    constraint.implementations.set(typeName, implementation);
    return true;
};
exports.addConstraintImplementation = addConstraintImplementation;
const resolveConstraintFunction = (registry, constraintName, functionName, concreteType) => {
    const constraint = registry.get(constraintName);
    if (!constraint) {
        return null;
    }
    // Convert type to string for lookup
    const typeName = typeToString(concreteType);
    const impl = constraint.implementations.get(typeName);
    return impl?.functions.get(functionName) || null;
};
exports.resolveConstraintFunction = resolveConstraintFunction;
// Helper to get constraint signature
const getConstraintSignature = (registry, constraintName) => {
    return registry.get(constraintName)?.signature || null;
};
exports.getConstraintSignature = getConstraintSignature;
// Helper function to convert Type to string for registry keys
const typeToString = (type) => {
    switch (type.kind) {
        case "primitive":
            return type.name;
        case "variable":
            return type.name;
        case "list":
            return `List ${typeToString(type.element)}`;
        case "tuple":
            return `{${type.elements.map(typeToString).join(", ")}}`;
        case "record":
            const fields = Object.entries(type.fields)
                .map(([k, v]) => `${k}: ${typeToString(v)}`)
                .join(", ");
            return `{${fields}}`;
        case "function":
            const params = type.params.map(typeToString).join(" -> ");
            return `${params} -> ${typeToString(type.return)}`;
        case "union":
            return type.types.map(typeToString).join(" | ");
        case "variant":
            return type.args.length > 0
                ? `${type.name} ${type.args.map(typeToString).join(" ")}`
                : type.name;
        case "adt":
            return type.name;
        case "unit":
            return "Unit";
        case "unknown":
            return "?";
        default:
            return "Unknown";
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,