1ac0bb7d4ba6fc0da0b6687585bf7b48
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lexer_1 = require("../src/lexer");
describe("Lexer", () => {
    // Helper function to create lexer and get all tokens
    const tokenize = (input) => new lexer_1.Lexer(input).tokenize();
    // Helper function to get token values without location info
    const getTokenValues = (input) => tokenize(input).map(token => ({ type: token.type, value: token.value }));
    describe("Numbers", () => {
        test("should tokenize integers", () => {
            const tokens = getTokenValues("123");
            expect(tokens).toEqual([
                { type: "NUMBER", value: "123" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should tokenize floating point numbers", () => {
            const tokens = getTokenValues("123.456");
            expect(tokens).toEqual([
                { type: "NUMBER", value: "123.456" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should tokenize number followed by non-digit", () => {
            const tokens = getTokenValues("123abc");
            expect(tokens).toEqual([
                { type: "NUMBER", value: "123" },
                { type: "IDENTIFIER", value: "abc" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should not tokenize dot without following digit as float", () => {
            const tokens = getTokenValues("123.");
            expect(tokens).toEqual([
                { type: "NUMBER", value: "123" },
                { type: "PUNCTUATION", value: "." },
                { type: "EOF", value: "" }
            ]);
        });
    });
    describe("Strings", () => {
        test("should tokenize double-quoted strings", () => {
            const tokens = getTokenValues('"hello world"');
            expect(tokens).toEqual([
                { type: "STRING", value: "hello world" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should tokenize single-quoted strings", () => {
            const tokens = getTokenValues("'hello world'");
            expect(tokens).toEqual([
                { type: "STRING", value: "hello world" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should handle escaped characters in strings", () => {
            const tokens = getTokenValues('"hello \\"world\\""');
            expect(tokens).toEqual([
                { type: "STRING", value: 'hello "world"' },
                { type: "EOF", value: "" }
            ]);
        });
        test("should handle unclosed strings", () => {
            const tokens = getTokenValues('"hello');
            expect(tokens).toEqual([
                { type: "STRING", value: "hello" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should handle escaped backslash at end of string", () => {
            const tokens = getTokenValues('"hello\\\\"');
            expect(tokens).toEqual([
                { type: "STRING", value: "hello\\" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should handle escape sequence at end of input", () => {
            const tokens = getTokenValues('"hello\\');
            expect(tokens).toEqual([
                { type: "STRING", value: "hello" },
                { type: "EOF", value: "" }
            ]);
        });
    });
    describe("Identifiers and Keywords", () => {
        test("should tokenize basic identifiers", () => {
            const tokens = getTokenValues("variable");
            expect(tokens).toEqual([
                { type: "IDENTIFIER", value: "variable" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should tokenize identifiers with underscores and numbers", () => {
            const tokens = getTokenValues("var_123");
            expect(tokens).toEqual([
                { type: "IDENTIFIER", value: "var_123" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should recognize keywords", () => {
            const keywords = ["if", "then", "else", "let", "in", "fn", "import", "mut", "where", "type", "match", "with", "given", "is", "and", "or", "implements", "constraint", "implement"];
            for (const keyword of keywords) {
                const tokens = getTokenValues(keyword);
                expect(tokens).toEqual([
                    { type: "KEYWORD", value: keyword },
                    { type: "EOF", value: "" }
                ]);
            }
        });
        test("should recognize primitive type keywords", () => {
            const primitives = ["Int", "Number", "String", "Unit", "List"];
            for (const primitive of primitives) {
                const tokens = getTokenValues(primitive);
                expect(tokens).toEqual([
                    { type: "KEYWORD", value: primitive },
                    { type: "EOF", value: "" }
                ]);
            }
        });
        test("should handle mut! special case", () => {
            const tokens = getTokenValues("mut!");
            expect(tokens).toEqual([
                { type: "KEYWORD", value: "mut!" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should handle mut without exclamation", () => {
            const tokens = getTokenValues("mut");
            expect(tokens).toEqual([
                { type: "KEYWORD", value: "mut" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should handle identifiers starting with underscore", () => {
            const tokens = getTokenValues("_private");
            expect(tokens).toEqual([
                { type: "IDENTIFIER", value: "_private" },
                { type: "EOF", value: "" }
            ]);
        });
    });
    describe("Operators", () => {
        test("should tokenize multi-character operators", () => {
            const multiCharOps = ["|>", "<|", "==", "!=", "<=", ">=", "=>", "->"];
            for (const op of multiCharOps) {
                const tokens = getTokenValues(op);
                expect(tokens).toEqual([
                    { type: "OPERATOR", value: op },
                    { type: "EOF", value: "" }
                ]);
            }
        });
        test("should tokenize single-character operators", () => {
            const singleCharOps = ["+", "-", "*", "/", "<", ">", "=", "|", "$"];
            for (const op of singleCharOps) {
                const tokens = getTokenValues(op);
                expect(tokens).toEqual([
                    { type: "OPERATOR", value: op },
                    { type: "EOF", value: "" }
                ]);
            }
        });
        test("should prefer multi-character operators over single", () => {
            const tokens = getTokenValues("==");
            expect(tokens).toEqual([
                { type: "OPERATOR", value: "==" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should handle operators in sequence", () => {
            const tokens = getTokenValues("+-*/");
            expect(tokens).toEqual([
                { type: "OPERATOR", value: "+" },
                { type: "OPERATOR", value: "-" },
                { type: "OPERATOR", value: "*" },
                { type: "OPERATOR", value: "/" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should handle single character operator fallback", () => {
            // Test the fallback case where no multi-character operator matches
            // This specifically tests line 224 by using "!" which matches the regex but isn't in the multi-char list
            const tokens = getTokenValues("!");
            expect(tokens).toEqual([
                { type: "OPERATOR", value: "!" },
                { type: "EOF", value: "" }
            ]);
        });
    });
    describe("Punctuation", () => {
        test("should tokenize punctuation characters", () => {
            const punctuation = ["(", ")", ",", ";", ":", "[", "]", "{", "}"];
            for (const punct of punctuation) {
                const tokens = getTokenValues(punct);
                expect(tokens).toEqual([
                    { type: "PUNCTUATION", value: punct },
                    { type: "EOF", value: "" }
                ]);
            }
        });
        test("should handle period as punctuation", () => {
            const tokens = getTokenValues(".");
            expect(tokens).toEqual([
                { type: "PUNCTUATION", value: "." },
                { type: "EOF", value: "" }
            ]);
        });
    });
    describe("Accessors", () => {
        test("should tokenize basic accessor", () => {
            const tokens = getTokenValues("@field");
            expect(tokens).toEqual([
                { type: "ACCESSOR", value: "field" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should tokenize accessor with numbers and underscores", () => {
            const tokens = getTokenValues("@field_123");
            expect(tokens).toEqual([
                { type: "ACCESSOR", value: "field_123" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should handle @ without following identifier", () => {
            const tokens = getTokenValues("@");
            expect(tokens).toEqual([
                { type: "ACCESSOR", value: "" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should handle @ followed by non-identifier", () => {
            const tokens = getTokenValues("@(");
            expect(tokens).toEqual([
                { type: "ACCESSOR", value: "" },
                { type: "PUNCTUATION", value: "(" },
                { type: "EOF", value: "" }
            ]);
        });
    });
    describe("Comments", () => {
        test("should skip single-line comments", () => {
            const codeWithComments = `
        # this is a comment
        x = 5 # inline comment
        y = 10
        # another comment
        x + y # trailing comment
      `;
            const codeWithoutComments = `
        x = 5
        y = 10
        x + y
      `;
            const tokensWithComments = new lexer_1.Lexer(codeWithComments).tokenize();
            const tokensWithoutComments = new lexer_1.Lexer(codeWithoutComments).tokenize();
            // Remove location info for comparison
            const stripLoc = (t) => ({ type: t.type, value: t.value });
            expect(tokensWithComments.map(stripLoc)).toEqual(tokensWithoutComments.map(stripLoc));
            // Ensure no COMMENT tokens are present
            expect(tokensWithComments.some((t) => t.type === "COMMENT")).toBe(false);
        });
        test("should handle comment at end of file", () => {
            const tokens = getTokenValues("x # comment");
            expect(tokens).toEqual([
                { type: "IDENTIFIER", value: "x" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should handle multiple comments", () => {
            const tokens = getTokenValues("# comment1\n# comment2\nx");
            expect(tokens).toEqual([
                { type: "IDENTIFIER", value: "x" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should handle comment encountered in nextToken", () => {
            // This tests the comment handling path in nextToken (lines 317-319)
            const lexer = new lexer_1.Lexer("# comment\n");
            const token = lexer.nextToken();
            expect(token.type).toBe("EOF");
        });
    });
    describe("Whitespace handling", () => {
        test("should skip whitespace", () => {
            const tokens = getTokenValues("  \t  x  \n  y  ");
            expect(tokens).toEqual([
                { type: "IDENTIFIER", value: "x" },
                { type: "IDENTIFIER", value: "y" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should handle empty input", () => {
            const tokens = getTokenValues("");
            expect(tokens).toEqual([
                { type: "EOF", value: "" }
            ]);
        });
        test("should handle whitespace only", () => {
            const tokens = getTokenValues("   \t\n  ");
            expect(tokens).toEqual([
                { type: "EOF", value: "" }
            ]);
        });
    });
    describe("Unknown characters", () => {
        test("should handle unknown characters as punctuation", () => {
            const tokens = getTokenValues("~");
            expect(tokens).toEqual([
                { type: "PUNCTUATION", value: "~" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should handle unknown characters that are whitespace", () => {
            // Test with a Unicode whitespace character
            const tokens = getTokenValues("x\u00A0y"); // Non-breaking space
            expect(tokens).toEqual([
                { type: "IDENTIFIER", value: "x" },
                { type: "IDENTIFIER", value: "y" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should handle unknown whitespace characters in nextToken path", () => {
            // This tests line 327 - when unknown character is whitespace and triggers recursive nextToken
            const lexer = new lexer_1.Lexer("\u00A0"); // Non-breaking space as unknown character
            const token = lexer.nextToken();
            expect(token.type).toBe("EOF");
        });
    });
    describe("Edge cases for 100% coverage", () => {
        test("should handle comment in nextToken path (lines 317-319)", () => {
            // This is tricky - we need a scenario where skipWhitespace doesn't handle the comment
            // Let's create a scenario where the lexer position is at a comment after other processing
            const lexer = new lexer_1.Lexer("x#comment");
            // Get first token (x)
            const firstToken = lexer.nextToken();
            expect(firstToken.type).toBe("IDENTIFIER");
            // Now position should be at the comment, and nextToken should handle it
            const secondToken = lexer.nextToken();
            expect(secondToken.type).toBe("EOF");
        });
        test("should handle whitespace in unknown character path (line 327)", () => {
            // Create a test where an unknown character becomes whitespace after advance()
            // This happens when we have a character that doesn't match any category initially
            // but when advanced and checked again, is whitespace
            // Use a Unicode character that might be treated as unknown initially
            const lexer = new lexer_1.Lexer("\u2000"); // EN QUAD - Unicode space
            const token = lexer.nextToken();
            expect(token.type).toBe("EOF");
        });
        test("should handle form feed as potential unknown whitespace", () => {
            // Form feed (\f) might trigger the unknown character path in some cases
            const lexer = new lexer_1.Lexer("\fx");
            const token = lexer.nextToken();
            expect(token.type).toBe("IDENTIFIER");
            expect(token.value).toBe("x");
        });
        test("should handle zero-width space as unknown character", () => {
            // Zero-width characters are treated as punctuation, not whitespace by the lexer
            const lexer = new lexer_1.Lexer("\u200B\u200C\u200Dx"); // Various zero-width characters
            const token = lexer.nextToken();
            expect(token.type).toBe("PUNCTUATION");
            expect(token.value).toBe("\u200B");
        });
        test("should handle tab character in unknown path (line 327)", () => {
            // This test specifically targets line 327 - unknown character that becomes whitespace
            // We need a character that doesn't match initial patterns but is whitespace
            // Let's try a form feed character or vertical tab that might slip through
            const lexer = new lexer_1.Lexer("\v\fx"); // vertical tab and form feed
            const tokens = tokenize("\v\fx");
            expect(tokens[0].type).toBe("IDENTIFIER");
            expect(tokens[0].value).toBe("x");
        });
        test("should handle specific Unicode whitespace that might be unknown initially", () => {
            // Test with various Unicode whitespace characters that might not match initial \s
            const characters = [
                "\u00A0", // Non-breaking space
                "\u1680", // Ogham space mark
                "\u2000", // En quad
                "\u2001", // Em quad
                "\u2002", // En space
                "\u2003", // Em space
                "\u2004", // Three-per-em space
                "\u2005", // Four-per-em space
                "\u2006", // Six-per-em space
                "\u2007", // Figure space
                "\u2008", // Punctuation space
                "\u2009", // Thin space
                "\u200A", // Hair space
                "\u202F", // Narrow no-break space
                "\u205F", // Medium mathematical space
                "\u3000", // Ideographic space
            ];
            for (const char of characters) {
                const lexer = new lexer_1.Lexer(char + "x");
                const token = lexer.nextToken();
                expect(token.type).toBe("IDENTIFIER");
                expect(token.value).toBe("x");
            }
        });
        test("should trigger comment fallback in nextToken (lines 317-319)", () => {
            // Try to create a scenario where skipWhitespace doesn't handle the comment
            // This is a very specific edge case - create a lexer where we manually position
            // it so that skipWhitespace has already been called but a comment appears
            const input = "a\t#comment";
            const lexer = new lexer_1.Lexer(input);
            // Get the 'a' token
            const firstToken = lexer.nextToken();
            expect(firstToken.type).toBe("IDENTIFIER");
            expect(firstToken.value).toBe("a");
            // The next token should skip the tab and handle the comment
            const secondToken = lexer.nextToken();
            expect(secondToken.type).toBe("EOF");
        });
        test("should trigger unknown whitespace path (line 327) with non-breaking space", () => {
            // Use a non-breaking space which might not be caught by initial whitespace checks
            const input = "\u00A0x"; // Non-breaking space followed by identifier
            const tokens = tokenize(input);
            expect(tokens[0].type).toBe("IDENTIFIER");
            expect(tokens[0].value).toBe("x");
        });
        test("should trigger unknown whitespace path (line 327) with exotic whitespace", () => {
            // Try other Unicode whitespace characters that might not match initial /\s/
            const input = "\u2000\u2001\u2002x"; // En quad, Em quad, En space
            const tokens = tokenize(input);
            expect(tokens[0].type).toBe("IDENTIFIER");
            expect(tokens[0].value).toBe("x");
        });
        test("should trigger exact uncovered paths with null character edge case", () => {
            // Try a null character that might behave unexpectedly
            const input = "\0x";
            const tokens = tokenize(input);
            // This should either handle the null as punctuation or skip it
            expect(tokens.length).toBeGreaterThan(0);
        });
        test("should handle character that looks like operator but isn't", () => {
            // Try to trigger the single character operator fallback (line 224)
            // Use a character that matches operator regex but isn't multi-char
            const input = "!x"; // ! is in the operator regex and not multi-char in this context
            const tokens = tokenize(input);
            expect(tokens[0].type).toBe("OPERATOR");
            expect(tokens[0].value).toBe("!");
            expect(tokens[1].type).toBe("IDENTIFIER");
            expect(tokens[1].value).toBe("x");
        });
        test("should handle comment immediately after EOF check", () => {
            // Try to create a scenario where comment handling hits the nextToken path
            const input = "#";
            const tokens = tokenize(input);
            expect(tokens[0].type).toBe("EOF");
        });
        test("should handle edge case for exact line coverage - carriage return before comment", () => {
            // Try using carriage return which might not be handled the same as other whitespace
            const input = "\r#comment\nx";
            const tokens = tokenize(input);
            expect(tokens[0].type).toBe("IDENTIFIER");
            expect(tokens[0].value).toBe("x");
        });
        test("should handle zero-width joiner that might not match \\s regex", () => {
            // Zero-width joiner (U+200D) might not match \\s but could be whitespace-like
            const input = "\u200Dx";
            const tokens = tokenize(input);
            // This should either skip the ZWJJ or treat it as punctuation
            if (tokens[0].type === "IDENTIFIER") {
                expect(tokens[0].value).toBe("x");
            }
            else {
                expect(tokens[0].type).toBe("PUNCTUATION");
            }
        });
    });
    describe("Line and column tracking", () => {
        test("should track line and column positions", () => {
            const lexer = new lexer_1.Lexer("x\ny");
            const tokens = lexer.tokenize();
            expect(tokens[0].location.start.line).toBe(1);
            expect(tokens[0].location.start.column).toBe(1);
            expect(tokens[0].location.end.line).toBe(1);
            expect(tokens[0].location.end.column).toBe(2);
            expect(tokens[1].location.start.line).toBe(2);
            expect(tokens[1].location.start.column).toBe(1);
            expect(tokens[1].location.end.line).toBe(2);
            expect(tokens[1].location.end.column).toBe(2);
        });
        test("should handle column advancement", () => {
            const lexer = new lexer_1.Lexer("abc");
            const tokens = lexer.tokenize();
            expect(tokens[0].location.start.line).toBe(1);
            expect(tokens[0].location.start.column).toBe(1);
            expect(tokens[0].location.end.line).toBe(1);
            expect(tokens[0].location.end.column).toBe(4);
        });
    });
    describe("Complex expressions", () => {
        test("should tokenize complex expression", () => {
            const tokens = getTokenValues('fn add(x, y) -> x + y\nlet result = add(1, 2)');
            expect(tokens).toEqual([
                { type: "KEYWORD", value: "fn" },
                { type: "IDENTIFIER", value: "add" },
                { type: "PUNCTUATION", value: "(" },
                { type: "IDENTIFIER", value: "x" },
                { type: "PUNCTUATION", value: "," },
                { type: "IDENTIFIER", value: "y" },
                { type: "PUNCTUATION", value: ")" },
                { type: "OPERATOR", value: "->" },
                { type: "IDENTIFIER", value: "x" },
                { type: "OPERATOR", value: "+" },
                { type: "IDENTIFIER", value: "y" },
                { type: "KEYWORD", value: "let" },
                { type: "IDENTIFIER", value: "result" },
                { type: "OPERATOR", value: "=" },
                { type: "IDENTIFIER", value: "add" },
                { type: "PUNCTUATION", value: "(" },
                { type: "NUMBER", value: "1" },
                { type: "PUNCTUATION", value: "," },
                { type: "NUMBER", value: "2" },
                { type: "PUNCTUATION", value: ")" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should handle mixed operators and punctuation", () => {
            const tokens = getTokenValues("(x == y) && z");
            expect(tokens).toEqual([
                { type: "PUNCTUATION", value: "(" },
                { type: "IDENTIFIER", value: "x" },
                { type: "OPERATOR", value: "==" },
                { type: "IDENTIFIER", value: "y" },
                { type: "PUNCTUATION", value: ")" },
                { type: "PUNCTUATION", value: "&" },
                { type: "PUNCTUATION", value: "&" },
                { type: "IDENTIFIER", value: "z" },
                { type: "EOF", value: "" }
            ]);
        });
    });
    describe("Edge cases", () => {
        test("should handle EOF conditions", () => {
            const lexer = new lexer_1.Lexer("");
            const token = lexer.nextToken();
            expect(token.type).toBe("EOF");
            expect(token.value).toBe("");
        });
        test("should handle sequential whitespace and comments", () => {
            const tokens = getTokenValues("  # comment\n  \t# another\n x");
            expect(tokens).toEqual([
                { type: "IDENTIFIER", value: "x" },
                { type: "EOF", value: "" }
            ]);
        });
        test("should handle operators at end of input", () => {
            const tokens = getTokenValues("x +");
            expect(tokens).toEqual([
                { type: "IDENTIFIER", value: "x" },
                { type: "OPERATOR", value: "+" },
                { type: "EOF", value: "" }
            ]);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,