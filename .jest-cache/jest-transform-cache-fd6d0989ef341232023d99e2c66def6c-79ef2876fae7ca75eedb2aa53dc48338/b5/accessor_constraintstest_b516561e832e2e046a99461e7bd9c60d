760bdb3b56dcb02605f75bb7938f2957
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _parser = require("../src/parser/parser");
const _lexer = require("../src/lexer");
const _typer = require("../src/typer");
const _evaluator = require("../src/evaluator");
const parseProgram = (code)=>{
    const lexer = new _lexer.Lexer(code);
    const tokens = lexer.tokenize();
    return (0, _parser.parse)(tokens);
};
describe("Accessor Constraints", ()=>{
    describe("hasField constraint generation", ()=>{
        it("should generate hasField constraints for record accessors", ()=>{
            const program = parseProgram('getName = @name; getName {@name "Alice"}');
            const result = (0, _typer.typeProgram)(program);
            expect(result).toBeDefined();
        });
        it("should reject accessor on record without field", ()=>{
            const program = parseProgram("getName = @name; getName {@age 30}");
            expect(()=>(0, _typer.typeProgram)(program)).toThrow();
        });
        it("should work with partial accessor application", ()=>{
            const program = parseProgram("getName = @name");
            const result = (0, _typer.typeProgram)(program);
            expect(result).toBeDefined();
        });
        it("should enforce field types", ()=>{
            const program = parseProgram("getName = @name; getName {@name 42}");
            const result = (0, _typer.typeProgram)(program);
            expect(result).toBeDefined(); // Should type check with name: Int
        });
    });
    describe("Runtime accessor behavior", ()=>{
        it("should work with valid field access", ()=>{
            const evaluator = new _evaluator.Evaluator();
            const program = parseProgram('getName = @name; getName {@name "Alice"}');
            const result = evaluator.evaluateProgram(program);
            expect(result.finalResult).toEqual({
                tag: "string",
                value: "Alice"
            });
        });
        it("should handle missing field at runtime", ()=>{
            const evaluator = new _evaluator.Evaluator();
            const program = parseProgram("getName = @name; getName {@age 30}");
            expect(()=>evaluator.evaluateProgram(program)).toThrow();
        });
    });
    describe("Multiple field constraints", ()=>{
        it("should handle multiple field accesses", ()=>{
            const program = parseProgram(`
        getAge = fn person => (@age person) + 1;
        getAge {@age 25}
      `);
            const result = (0, _typer.typeProgram)(program);
            expect(result).toBeDefined();
        });
        it("should reject when multiple fields are missing", ()=>{
            const program = parseProgram(`
        getAge = fn person => (@age person) + 1;
        getAge {@name "Alice Smith"}
      `);
            expect(()=>(0, _typer.typeProgram)(program)).toThrow();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2UvdGVzdC9hY2Nlc3Nvcl9jb25zdHJhaW50cy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnNlIH0gZnJvbSBcIi4uL3NyYy9wYXJzZXIvcGFyc2VyXCI7XG5pbXBvcnQgeyBMZXhlciB9IGZyb20gXCIuLi9zcmMvbGV4ZXJcIjtcbmltcG9ydCB7IHR5cGVQcm9ncmFtIH0gZnJvbSBcIi4uL3NyYy90eXBlclwiO1xuaW1wb3J0IHsgRXZhbHVhdG9yIH0gZnJvbSBcIi4uL3NyYy9ldmFsdWF0b3JcIjtcblxuY29uc3QgcGFyc2VQcm9ncmFtID0gKGNvZGU6IHN0cmluZykgPT4ge1xuICBjb25zdCBsZXhlciA9IG5ldyBMZXhlcihjb2RlKTtcbiAgY29uc3QgdG9rZW5zID0gbGV4ZXIudG9rZW5pemUoKTtcbiAgcmV0dXJuIHBhcnNlKHRva2Vucyk7XG59O1xuXG5kZXNjcmliZShcIkFjY2Vzc29yIENvbnN0cmFpbnRzXCIsICgpID0+IHtcbiAgZGVzY3JpYmUoXCJoYXNGaWVsZCBjb25zdHJhaW50IGdlbmVyYXRpb25cIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGdlbmVyYXRlIGhhc0ZpZWxkIGNvbnN0cmFpbnRzIGZvciByZWNvcmQgYWNjZXNzb3JzXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IHByb2dyYW0gPSBwYXJzZVByb2dyYW0oJ2dldE5hbWUgPSBAbmFtZTsgZ2V0TmFtZSB7QG5hbWUgXCJBbGljZVwifScpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdHlwZVByb2dyYW0ocHJvZ3JhbSk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgcmVqZWN0IGFjY2Vzc29yIG9uIHJlY29yZCB3aXRob3V0IGZpZWxkXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IHByb2dyYW0gPSBwYXJzZVByb2dyYW0oXCJnZXROYW1lID0gQG5hbWU7IGdldE5hbWUge0BhZ2UgMzB9XCIpO1xuICAgICAgZXhwZWN0KCgpID0+IHR5cGVQcm9ncmFtKHByb2dyYW0pKS50b1Rocm93KCk7XG4gICAgfSk7XG5cbiAgICBpdChcInNob3VsZCB3b3JrIHdpdGggcGFydGlhbCBhY2Nlc3NvciBhcHBsaWNhdGlvblwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9ncmFtID0gcGFyc2VQcm9ncmFtKFwiZ2V0TmFtZSA9IEBuYW1lXCIpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdHlwZVByb2dyYW0ocHJvZ3JhbSk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgZW5mb3JjZSBmaWVsZCB0eXBlc1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9ncmFtID0gcGFyc2VQcm9ncmFtKFwiZ2V0TmFtZSA9IEBuYW1lOyBnZXROYW1lIHtAbmFtZSA0Mn1cIik7XG4gICAgICBjb25zdCByZXN1bHQgPSB0eXBlUHJvZ3JhbShwcm9ncmFtKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVEZWZpbmVkKCk7IC8vIFNob3VsZCB0eXBlIGNoZWNrIHdpdGggbmFtZTogSW50XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiUnVudGltZSBhY2Nlc3NvciBiZWhhdmlvclwiLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgd29yayB3aXRoIHZhbGlkIGZpZWxkIGFjY2Vzc1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBldmFsdWF0b3IgPSBuZXcgRXZhbHVhdG9yKCk7XG4gICAgICBjb25zdCBwcm9ncmFtID0gcGFyc2VQcm9ncmFtKCdnZXROYW1lID0gQG5hbWU7IGdldE5hbWUge0BuYW1lIFwiQWxpY2VcIn0nKTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGV2YWx1YXRvci5ldmFsdWF0ZVByb2dyYW0ocHJvZ3JhbSk7XG4gICAgICBleHBlY3QocmVzdWx0LmZpbmFsUmVzdWx0KS50b0VxdWFsKHsgdGFnOiBcInN0cmluZ1wiLCB2YWx1ZTogXCJBbGljZVwiIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoXCJzaG91bGQgaGFuZGxlIG1pc3NpbmcgZmllbGQgYXQgcnVudGltZVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBldmFsdWF0b3IgPSBuZXcgRXZhbHVhdG9yKCk7XG4gICAgICBjb25zdCBwcm9ncmFtID0gcGFyc2VQcm9ncmFtKFwiZ2V0TmFtZSA9IEBuYW1lOyBnZXROYW1lIHtAYWdlIDMwfVwiKTtcbiAgICAgIGV4cGVjdCgoKSA9PiBldmFsdWF0b3IuZXZhbHVhdGVQcm9ncmFtKHByb2dyYW0pKS50b1Rocm93KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKFwiTXVsdGlwbGUgZmllbGQgY29uc3RyYWludHNcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGhhbmRsZSBtdWx0aXBsZSBmaWVsZCBhY2Nlc3Nlc1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9ncmFtID0gcGFyc2VQcm9ncmFtKGBcbiAgICAgICAgZ2V0QWdlID0gZm4gcGVyc29uID0+IChAYWdlIHBlcnNvbikgKyAxO1xuICAgICAgICBnZXRBZ2Uge0BhZ2UgMjV9XG4gICAgICBgKTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHR5cGVQcm9ncmFtKHByb2dyYW0pO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHJlamVjdCB3aGVuIG11bHRpcGxlIGZpZWxkcyBhcmUgbWlzc2luZ1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9ncmFtID0gcGFyc2VQcm9ncmFtKGBcbiAgICAgICAgZ2V0QWdlID0gZm4gcGVyc29uID0+IChAYWdlIHBlcnNvbikgKyAxO1xuICAgICAgICBnZXRBZ2Uge0BuYW1lIFwiQWxpY2UgU21pdGhcIn1cbiAgICAgIGApO1xuICAgICAgZXhwZWN0KCgpID0+IHR5cGVQcm9ncmFtKHByb2dyYW0pKS50b1Rocm93KCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibmFtZXMiOlsicGFyc2VQcm9ncmFtIiwiY29kZSIsImxleGVyIiwiTGV4ZXIiLCJ0b2tlbnMiLCJ0b2tlbml6ZSIsInBhcnNlIiwiZGVzY3JpYmUiLCJpdCIsInByb2dyYW0iLCJyZXN1bHQiLCJ0eXBlUHJvZ3JhbSIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwidG9UaHJvdyIsImV2YWx1YXRvciIsIkV2YWx1YXRvciIsImV2YWx1YXRlUHJvZ3JhbSIsImZpbmFsUmVzdWx0IiwidG9FcXVhbCIsInRhZyIsInZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7O3dCQUFzQjt1QkFDQTt1QkFDTTsyQkFDRjtBQUUxQixNQUFNQSxlQUFlLENBQUNDO0lBQ3BCLE1BQU1DLFFBQVEsSUFBSUMsWUFBSyxDQUFDRjtJQUN4QixNQUFNRyxTQUFTRixNQUFNRyxRQUFRO0lBQzdCLE9BQU9DLElBQUFBLGFBQUssRUFBQ0Y7QUFDZjtBQUVBRyxTQUFTLHdCQUF3QjtJQUMvQkEsU0FBUyxrQ0FBa0M7UUFDekNDLEdBQUcsNkRBQTZEO1lBQzlELE1BQU1DLFVBQVVULGFBQWE7WUFDN0IsTUFBTVUsU0FBU0MsSUFBQUEsa0JBQVcsRUFBQ0Y7WUFDM0JHLE9BQU9GLFFBQVFHLFdBQVc7UUFDNUI7UUFFQUwsR0FBRyxrREFBa0Q7WUFDbkQsTUFBTUMsVUFBVVQsYUFBYTtZQUM3QlksT0FBTyxJQUFNRCxJQUFBQSxrQkFBVyxFQUFDRixVQUFVSyxPQUFPO1FBQzVDO1FBRUFOLEdBQUcsaURBQWlEO1lBQ2xELE1BQU1DLFVBQVVULGFBQWE7WUFDN0IsTUFBTVUsU0FBU0MsSUFBQUEsa0JBQVcsRUFBQ0Y7WUFDM0JHLE9BQU9GLFFBQVFHLFdBQVc7UUFDNUI7UUFFQUwsR0FBRyw4QkFBOEI7WUFDL0IsTUFBTUMsVUFBVVQsYUFBYTtZQUM3QixNQUFNVSxTQUFTQyxJQUFBQSxrQkFBVyxFQUFDRjtZQUMzQkcsT0FBT0YsUUFBUUcsV0FBVyxJQUFJLG1DQUFtQztRQUNuRTtJQUNGO0lBRUFOLFNBQVMsNkJBQTZCO1FBQ3BDQyxHQUFHLHVDQUF1QztZQUN4QyxNQUFNTyxZQUFZLElBQUlDLG9CQUFTO1lBQy9CLE1BQU1QLFVBQVVULGFBQWE7WUFDN0IsTUFBTVUsU0FBU0ssVUFBVUUsZUFBZSxDQUFDUjtZQUN6Q0csT0FBT0YsT0FBT1EsV0FBVyxFQUFFQyxPQUFPLENBQUM7Z0JBQUVDLEtBQUs7Z0JBQVVDLE9BQU87WUFBUTtRQUNyRTtRQUVBYixHQUFHLDBDQUEwQztZQUMzQyxNQUFNTyxZQUFZLElBQUlDLG9CQUFTO1lBQy9CLE1BQU1QLFVBQVVULGFBQWE7WUFDN0JZLE9BQU8sSUFBTUcsVUFBVUUsZUFBZSxDQUFDUixVQUFVSyxPQUFPO1FBQzFEO0lBQ0Y7SUFFQVAsU0FBUyw4QkFBOEI7UUFDckNDLEdBQUcseUNBQXlDO1lBQzFDLE1BQU1DLFVBQVVULGFBQWEsQ0FBQzs7O01BRzlCLENBQUM7WUFDRCxNQUFNVSxTQUFTQyxJQUFBQSxrQkFBVyxFQUFDRjtZQUMzQkcsT0FBT0YsUUFBUUcsV0FBVztRQUM1QjtRQUVBTCxHQUFHLGtEQUFrRDtZQUNuRCxNQUFNQyxVQUFVVCxhQUFhLENBQUM7OztNQUc5QixDQUFDO1lBQ0RZLE9BQU8sSUFBTUQsSUFBQUEsa0JBQVcsRUFBQ0YsVUFBVUssT0FBTztRQUM1QztJQUNGO0FBQ0YifQ==