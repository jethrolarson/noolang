{"version":3,"sources":["/workspace/test/accessor_constraints.test.ts"],"sourcesContent":["import { parse } from \"../src/parser/parser\";\nimport { Lexer } from \"../src/lexer\";\nimport { typeProgram } from \"../src/typer\";\nimport { Evaluator } from \"../src/evaluator\";\n\nconst parseProgram = (code: string) => {\n  const lexer = new Lexer(code);\n  const tokens = lexer.tokenize();\n  return parse(tokens);\n};\n\ndescribe(\"Accessor Constraints\", () => {\n  describe(\"hasField constraint generation\", () => {\n    it(\"should generate hasField constraints for record accessors\", () => {\n      const program = parseProgram('getName = @name; getName {@name \"Alice\"}');\n      const result = typeProgram(program);\n      expect(result).toBeDefined();\n    });\n\n    it(\"should reject accessor on record without field\", () => {\n      const program = parseProgram(\"getName = @name; getName {@age 30}\");\n      expect(() => typeProgram(program)).toThrow();\n    });\n\n    it(\"should work with partial accessor application\", () => {\n      const program = parseProgram(\"getName = @name\");\n      const result = typeProgram(program);\n      expect(result).toBeDefined();\n    });\n\n    it(\"should enforce field types\", () => {\n      const program = parseProgram(\"getName = @name; getName {@name 42}\");\n      const result = typeProgram(program);\n      expect(result).toBeDefined(); // Should type check with name: Int\n    });\n  });\n\n  describe(\"Runtime accessor behavior\", () => {\n    it(\"should work with valid field access\", () => {\n      const evaluator = new Evaluator();\n      const program = parseProgram('getName = @name; getName {@name \"Alice\"}');\n      const result = evaluator.evaluateProgram(program);\n      expect(result.finalResult).toEqual({ tag: \"string\", value: \"Alice\" });\n    });\n\n    it(\"should handle missing field at runtime\", () => {\n      const evaluator = new Evaluator();\n      const program = parseProgram(\"getName = @name; getName {@age 30}\");\n      expect(() => evaluator.evaluateProgram(program)).toThrow();\n    });\n  });\n\n  describe(\"Multiple field constraints\", () => {\n    it(\"should handle multiple field accesses\", () => {\n      const program = parseProgram(`\n        getAge = fn person => (@age person) + 1;\n        getAge {@age 25}\n      `);\n      const result = typeProgram(program);\n      expect(result).toBeDefined();\n    });\n\n    it(\"should reject when multiple fields are missing\", () => {\n      const program = parseProgram(`\n        getAge = fn person => (@age person) + 1;\n        getAge {@name \"Alice Smith\"}\n      `);\n      expect(() => typeProgram(program)).toThrow();\n    });\n  });\n});\n"],"names":["parseProgram","code","lexer","Lexer","tokens","tokenize","parse","describe","it","program","result","typeProgram","expect","toBeDefined","toThrow","evaluator","Evaluator","evaluateProgram","finalResult","toEqual","tag","value"],"mappings":";;;;wBAAsB;uBACA;uBACM;2BACF;AAE1B,MAAMA,eAAe,CAACC;IACpB,MAAMC,QAAQ,IAAIC,YAAK,CAACF;IACxB,MAAMG,SAASF,MAAMG,QAAQ;IAC7B,OAAOC,IAAAA,aAAK,EAACF;AACf;AAEAG,SAAS,wBAAwB;IAC/BA,SAAS,kCAAkC;QACzCC,GAAG,6DAA6D;YAC9D,MAAMC,UAAUT,aAAa;YAC7B,MAAMU,SAASC,IAAAA,kBAAW,EAACF;YAC3BG,OAAOF,QAAQG,WAAW;QAC5B;QAEAL,GAAG,kDAAkD;YACnD,MAAMC,UAAUT,aAAa;YAC7BY,OAAO,IAAMD,IAAAA,kBAAW,EAACF,UAAUK,OAAO;QAC5C;QAEAN,GAAG,iDAAiD;YAClD,MAAMC,UAAUT,aAAa;YAC7B,MAAMU,SAASC,IAAAA,kBAAW,EAACF;YAC3BG,OAAOF,QAAQG,WAAW;QAC5B;QAEAL,GAAG,8BAA8B;YAC/B,MAAMC,UAAUT,aAAa;YAC7B,MAAMU,SAASC,IAAAA,kBAAW,EAACF;YAC3BG,OAAOF,QAAQG,WAAW,IAAI,mCAAmC;QACnE;IACF;IAEAN,SAAS,6BAA6B;QACpCC,GAAG,uCAAuC;YACxC,MAAMO,YAAY,IAAIC,oBAAS;YAC/B,MAAMP,UAAUT,aAAa;YAC7B,MAAMU,SAASK,UAAUE,eAAe,CAACR;YACzCG,OAAOF,OAAOQ,WAAW,EAAEC,OAAO,CAAC;gBAAEC,KAAK;gBAAUC,OAAO;YAAQ;QACrE;QAEAb,GAAG,0CAA0C;YAC3C,MAAMO,YAAY,IAAIC,oBAAS;YAC/B,MAAMP,UAAUT,aAAa;YAC7BY,OAAO,IAAMG,UAAUE,eAAe,CAACR,UAAUK,OAAO;QAC1D;IACF;IAEAP,SAAS,8BAA8B;QACrCC,GAAG,yCAAyC;YAC1C,MAAMC,UAAUT,aAAa,CAAC;;;MAG9B,CAAC;YACD,MAAMU,SAASC,IAAAA,kBAAW,EAACF;YAC3BG,OAAOF,QAAQG,WAAW;QAC5B;QAEAL,GAAG,kDAAkD;YACnD,MAAMC,UAAUT,aAAa,CAAC;;;MAG9B,CAAC;YACDY,OAAO,IAAMD,IAAAA,kBAAW,EAACF,UAAUK,OAAO;QAC5C;IACF;AACF"}