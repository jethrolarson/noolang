a39f948dd2cd8204dbfee1a096f12f47
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _lexer = require("../../lexer");
const _parser = require("../../parser/parser");
const _ = require("..");
const _helpers = require("../helpers");
const _builtins = require("../builtins");
// Helper function to parse a string into a program
const parseProgram = (source)=>{
    const lexer = new _lexer.Lexer(source);
    const tokens = lexer.tokenize();
    return (0, _parser.parse)(tokens);
};
(0, _globals.describe)("Functional Type Inference", ()=>{
    (0, _globals.describe)("Basic Types", ()=>{
        (0, _globals.it)("should infer integer literal", ()=>{
            const program = parseProgram("42");
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
        (0, _globals.it)("should infer string literal", ()=>{
            const program = parseProgram('"hello"');
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("String");
        });
        (0, _globals.it)("should infer boolean literal", ()=>{
            const program = parseProgram("True");
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("Bool");
        });
    });
    (0, _globals.describe)("Function Types", ()=>{
        (0, _globals.it)("should infer identity function", ()=>{
            const program = parseProgram("fn x => x");
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("(α) -> α");
        });
        (0, _globals.it)("should infer function with multiple parameters", ()=>{
            const program = parseProgram("fn x y => x + y");
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("(Int) -> (Int) -> Int");
        });
        (0, _globals.it)("should infer nested function", ()=>{
            const program = parseProgram("fn x => fn y => x + y");
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("(Int) -> (Int) -> Int");
        });
    });
    (0, _globals.describe)("Let Polymorphism", ()=>{
        (0, _globals.it)("should generalize identity function", ()=>{
            const program = parseProgram("id = fn x => x; id 42");
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
        (0, _globals.it)("should allow polymorphic function to be used with different types", ()=>{
            const program = parseProgram('id = fn x => x; id 42; id "hello"');
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("String");
        });
        (0, _globals.it)("should handle recursive definitions", ()=>{
            const program = parseProgram("fact = fn n => if n == 0 then 1 else n * (fact (n - 1)); fact 5");
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
    });
    (0, _globals.describe)("Function Application", ()=>{
        (0, _globals.it)("should apply function to argument", ()=>{
            const program = parseProgram("(fn x => x + 1) 42");
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
        (0, _globals.it)("should handle partial application", ()=>{
            const program = parseProgram("add = fn x y => x + y; add5 = add 5; add5 3");
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
        (0, _globals.it)("should handle curried application", ()=>{
            const program = parseProgram("add = fn x y => x + y; add 2 3");
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
    });
    (0, _globals.describe)("Binary Operators", ()=>{
        (0, _globals.it)("should infer arithmetic operations", ()=>{
            const program = parseProgram("2 + 3");
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
        (0, _globals.it)("should infer comparison operations", ()=>{
            const program = parseProgram("2 < 3");
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("Bool");
        });
        (0, _globals.it)("should infer equality operations", ()=>{
            const program = parseProgram("2 == 3");
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("Bool");
        });
    });
    (0, _globals.describe)("If Expressions", ()=>{
        (0, _globals.it)("should infer if expression with same types", ()=>{
            const program = parseProgram("if True then 1 else 2");
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
        (0, _globals.it)("should handle if expression with different types", ()=>{
            const program = parseProgram('if True then 1 else "hello"');
            (0, _globals.expect)(()=>(0, _.typeProgram)(program)).toThrow();
        });
    });
    (0, _globals.describe)("Sequences", ()=>{
        (0, _globals.it)("should handle semicolon sequences", ()=>{
            const program = parseProgram("1; 2; 3");
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
        (0, _globals.it)("should handle sequences with definitions", ()=>{
            const program = parseProgram("x = 1; y = 2; x + y");
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
    });
    (0, _globals.describe)("Built-in Functions", ()=>{
        (0, _globals.it)("should handle built-in arithmetic operators", ()=>{
            const program = parseProgram("2 + 3");
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("Int");
        });
        (0, _globals.it)("should handle built-in comparison operators", ()=>{
            const program = parseProgram("2 == 3");
            const result = (0, _.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe("Bool");
        });
    });
    (0, _globals.describe)("Type Environment", ()=>{
        (0, _globals.it)("should initialize with built-ins", ()=>{
            const state = (0, _.createTypeState)();
            const newState = (0, _builtins.initializeBuiltins)(state);
            (0, _globals.expect)(newState.environment.has("+")).toBe(true);
            (0, _globals.expect)(newState.environment.has("-")).toBe(true);
            (0, _globals.expect)(newState.environment.has("*")).toBe(true);
            (0, _globals.expect)(newState.environment.has("/")).toBe(true);
            (0, _globals.expect)(newState.environment.has("==")).toBe(true);
            (0, _globals.expect)(newState.environment.has(";")).toBe(true);
        });
    });
    (0, _globals.describe)("Error Cases", ()=>{
        (0, _globals.it)("should reject undefined variables", ()=>{
            const program = parseProgram("undefined_var");
            (0, _globals.expect)(()=>(0, _.typeProgram)(program)).toThrow("Undefined variable");
        });
        (0, _globals.it)("should reject type mismatches in function application", ()=>{
            const program = parseProgram('(fn x => x + 1) "hello"');
            (0, _globals.expect)(()=>(0, _.typeProgram)(program)).toThrow();
        });
        (0, _globals.it)("should reject non-boolean conditions in if expressions", ()=>{
            const program = parseProgram("if 42 then 1 else 2");
            (0, _globals.expect)(()=>(0, _.typeProgram)(program)).toThrow();
        });
    });
});
(0, _globals.describe)("Constraint Propagation (Functional Typer)", ()=>{
    (0, _globals.it)("should throw a type error when constraints are not satisfied in composition", ()=>{
        const program = parseProgram(`
      compose = fn f g => fn x => f (g x);
      safeHead = compose head;
      listId = fn x => x;
      result = safeHead listId [1, 2, 3]
    `);
        // This should work now since head is safe and returns Option
        const result = (0, _.typeProgram)(program);
        (0, _globals.expect)(result).toBeDefined();
    });
    (0, _globals.it)("should allow composition when constraints are satisfied (functional typer)", ()=>{
        const program = parseProgram(`
      compose = fn f g => fn x => f (g x);
      safeHead = compose head;
      listId = fn x => x;
      result = safeHead listId [[1, 2, 3], [4, 5, 6]]
    `);
        const result = (0, _.typeProgram)(program);
        const typeStr = (0, _helpers.typeToString)(result.type, result.state.substitution);
        // head now returns Option List Int instead of List Int
        (0, _globals.expect)(typeStr).toBe("Option List Int");
    });
});

//# sourceMappingURL=data:application/json;base64,