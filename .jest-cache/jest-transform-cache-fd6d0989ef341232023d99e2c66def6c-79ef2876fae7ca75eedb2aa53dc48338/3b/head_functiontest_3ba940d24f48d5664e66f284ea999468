0d28a73d6caa2dbb1225e937fc22e138
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _lexer = require("../src/lexer");
const _parser = require("../src/parser/parser");
const _typer = require("../src/typer");
const _evaluator = require("../src/evaluator");
function unwrapValue(val) {
    if (val === null) return null;
    if (typeof val !== "object") return val;
    switch(val.tag){
        case "number":
            return val.value;
        case "string":
            return val.value;
        case "constructor":
            if (val.name === "True") return true;
            if (val.name === "False") return false;
            return {
                name: val.name,
                args: val.args.map(unwrapValue)
            };
        case "list":
            return val.values.map(unwrapValue);
        case "tuple":
            return val.values.map(unwrapValue);
        case "record":
            {
                const obj = {};
                for(const k in val.fields)obj[k] = unwrapValue(val.fields[k]);
                return obj;
            }
        default:
            return val;
    }
}
describe("Head Function Tests", ()=>{
    let evaluator;
    beforeEach(()=>{
        evaluator = new _evaluator.Evaluator();
    });
    const runCode = (code)=>{
        const lexer = new _lexer.Lexer(code);
        const tokens = lexer.tokenize();
        const ast = (0, _parser.parse)(tokens);
        const decoratedResult = (0, _typer.typeAndDecorate)(ast);
        return evaluator.evaluateProgram(decoratedResult.program);
    };
    test("should work with integer lists", ()=>{
        const code = `
      numbers = [1, 2, 3, 4, 5];
      head numbers
    `;
        const result = runCode(code);
        // head now returns Some 1, so we check for the constructor
        const finalResult = unwrapValue(result.finalResult);
        expect(finalResult.name).toBe("Some");
        expect(unwrapValue(finalResult.args[0])).toBe(1);
    });
    test("should work with string lists", ()=>{
        const code = `
      strings = ["hello", "world", "noolang"];
      head strings
    `;
        const result = runCode(code);
        // head now returns Some "hello"
        const finalResult = unwrapValue(result.finalResult);
        expect(finalResult.name).toBe("Some");
        expect(unwrapValue(finalResult.args[0])).toBe("hello");
    });
    test("should work with boolean lists", ()=>{
        const code = `
      bools = [True, False, True];
      head bools
    `;
        const result = runCode(code);
        // head now returns Some True
        const finalResult = unwrapValue(result.finalResult);
        expect(finalResult.name).toBe("Some");
        const boolResult = finalResult.args[0];
        // The Bool constructor gets unwrapped to JavaScript boolean
        expect(boolResult).toBe(true);
    });
    test("should work with nested lists", ()=>{
        const code = `
      nested = [[1, 2], [3, 4]];
      head nested
    `;
        const result = runCode(code);
        // head now returns Some [1, 2]
        const finalResult = unwrapValue(result.finalResult);
        expect(finalResult.name).toBe("Some");
        expect(unwrapValue(finalResult.args[0])).toEqual([
            1,
            2
        ]);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2UvdGVzdC9oZWFkX2Z1bmN0aW9uLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGV4ZXIgfSBmcm9tIFwiLi4vc3JjL2xleGVyXCI7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gXCIuLi9zcmMvcGFyc2VyL3BhcnNlclwiO1xuaW1wb3J0IHsgdHlwZUFuZERlY29yYXRlIH0gZnJvbSBcIi4uL3NyYy90eXBlclwiO1xuaW1wb3J0IHsgRXZhbHVhdG9yLCB0eXBlIFZhbHVlIH0gZnJvbSBcIi4uL3NyYy9ldmFsdWF0b3JcIjtcblxuZnVuY3Rpb24gdW53cmFwVmFsdWUodmFsOiBWYWx1ZSk6IGFueSB7XG4gIGlmICh2YWwgPT09IG51bGwpIHJldHVybiBudWxsO1xuICBpZiAodHlwZW9mIHZhbCAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHZhbDtcbiAgc3dpdGNoICh2YWwudGFnKSB7XG4gICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgcmV0dXJuIHZhbC52YWx1ZTtcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICByZXR1cm4gdmFsLnZhbHVlO1xuICAgIGNhc2UgXCJjb25zdHJ1Y3RvclwiOlxuICAgICAgaWYgKHZhbC5uYW1lID09PSBcIlRydWVcIikgcmV0dXJuIHRydWU7XG4gICAgICBpZiAodmFsLm5hbWUgPT09IFwiRmFsc2VcIikgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHsgbmFtZTogdmFsLm5hbWUsIGFyZ3M6IHZhbC5hcmdzLm1hcCh1bndyYXBWYWx1ZSkgfTtcbiAgICBjYXNlIFwibGlzdFwiOlxuICAgICAgcmV0dXJuIHZhbC52YWx1ZXMubWFwKHVud3JhcFZhbHVlKTtcbiAgICBjYXNlIFwidHVwbGVcIjpcbiAgICAgIHJldHVybiB2YWwudmFsdWVzLm1hcCh1bndyYXBWYWx1ZSk7XG4gICAgY2FzZSBcInJlY29yZFwiOiB7XG4gICAgICBjb25zdCBvYmo6IGFueSA9IHt9O1xuICAgICAgZm9yIChjb25zdCBrIGluIHZhbC5maWVsZHMpIG9ialtrXSA9IHVud3JhcFZhbHVlKHZhbC5maWVsZHNba10pO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB2YWw7XG4gIH1cbn1cblxuZGVzY3JpYmUoXCJIZWFkIEZ1bmN0aW9uIFRlc3RzXCIsICgpID0+IHtcbiAgbGV0IGV2YWx1YXRvcjogRXZhbHVhdG9yO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGV2YWx1YXRvciA9IG5ldyBFdmFsdWF0b3IoKTtcbiAgfSk7XG5cbiAgY29uc3QgcnVuQ29kZSA9IChjb2RlOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBsZXhlciA9IG5ldyBMZXhlcihjb2RlKTtcbiAgICBjb25zdCB0b2tlbnMgPSBsZXhlci50b2tlbml6ZSgpO1xuICAgIGNvbnN0IGFzdCA9IHBhcnNlKHRva2Vucyk7XG4gICAgY29uc3QgZGVjb3JhdGVkUmVzdWx0ID0gdHlwZUFuZERlY29yYXRlKGFzdCk7XG4gICAgcmV0dXJuIGV2YWx1YXRvci5ldmFsdWF0ZVByb2dyYW0oZGVjb3JhdGVkUmVzdWx0LnByb2dyYW0pO1xuICB9O1xuXG4gIHRlc3QoXCJzaG91bGQgd29yayB3aXRoIGludGVnZXIgbGlzdHNcIiwgKCkgPT4ge1xuICAgIGNvbnN0IGNvZGUgPSBgXG4gICAgICBudW1iZXJzID0gWzEsIDIsIDMsIDQsIDVdO1xuICAgICAgaGVhZCBudW1iZXJzXG4gICAgYDtcbiAgICBjb25zdCByZXN1bHQgPSBydW5Db2RlKGNvZGUpO1xuICAgIC8vIGhlYWQgbm93IHJldHVybnMgU29tZSAxLCBzbyB3ZSBjaGVjayBmb3IgdGhlIGNvbnN0cnVjdG9yXG4gICAgY29uc3QgZmluYWxSZXN1bHQgPSB1bndyYXBWYWx1ZShyZXN1bHQuZmluYWxSZXN1bHQpO1xuICAgIGV4cGVjdChmaW5hbFJlc3VsdC5uYW1lKS50b0JlKFwiU29tZVwiKTtcbiAgICBleHBlY3QodW53cmFwVmFsdWUoZmluYWxSZXN1bHQuYXJnc1swXSkpLnRvQmUoMSk7XG4gIH0pO1xuXG4gIHRlc3QoXCJzaG91bGQgd29yayB3aXRoIHN0cmluZyBsaXN0c1wiLCAoKSA9PiB7XG4gICAgY29uc3QgY29kZSA9IGBcbiAgICAgIHN0cmluZ3MgPSBbXCJoZWxsb1wiLCBcIndvcmxkXCIsIFwibm9vbGFuZ1wiXTtcbiAgICAgIGhlYWQgc3RyaW5nc1xuICAgIGA7XG4gICAgY29uc3QgcmVzdWx0ID0gcnVuQ29kZShjb2RlKTtcbiAgICAvLyBoZWFkIG5vdyByZXR1cm5zIFNvbWUgXCJoZWxsb1wiXG4gICAgY29uc3QgZmluYWxSZXN1bHQgPSB1bndyYXBWYWx1ZShyZXN1bHQuZmluYWxSZXN1bHQpO1xuICAgIGV4cGVjdChmaW5hbFJlc3VsdC5uYW1lKS50b0JlKFwiU29tZVwiKTtcbiAgICBleHBlY3QodW53cmFwVmFsdWUoZmluYWxSZXN1bHQuYXJnc1swXSkpLnRvQmUoXCJoZWxsb1wiKTtcbiAgfSk7XG5cbiAgdGVzdChcInNob3VsZCB3b3JrIHdpdGggYm9vbGVhbiBsaXN0c1wiLCAoKSA9PiB7XG4gICAgY29uc3QgY29kZSA9IGBcbiAgICAgIGJvb2xzID0gW1RydWUsIEZhbHNlLCBUcnVlXTtcbiAgICAgIGhlYWQgYm9vbHNcbiAgICBgO1xuICAgIGNvbnN0IHJlc3VsdCA9IHJ1bkNvZGUoY29kZSk7XG4gICAgLy8gaGVhZCBub3cgcmV0dXJucyBTb21lIFRydWVcbiAgICBjb25zdCBmaW5hbFJlc3VsdCA9IHVud3JhcFZhbHVlKHJlc3VsdC5maW5hbFJlc3VsdCk7XG4gICAgZXhwZWN0KGZpbmFsUmVzdWx0Lm5hbWUpLnRvQmUoXCJTb21lXCIpO1xuICAgIGNvbnN0IGJvb2xSZXN1bHQgPSBmaW5hbFJlc3VsdC5hcmdzWzBdO1xuICAgIC8vIFRoZSBCb29sIGNvbnN0cnVjdG9yIGdldHMgdW53cmFwcGVkIHRvIEphdmFTY3JpcHQgYm9vbGVhblxuICAgIGV4cGVjdChib29sUmVzdWx0KS50b0JlKHRydWUpO1xuICB9KTtcblxuICB0ZXN0KFwic2hvdWxkIHdvcmsgd2l0aCBuZXN0ZWQgbGlzdHNcIiwgKCkgPT4ge1xuICAgIGNvbnN0IGNvZGUgPSBgXG4gICAgICBuZXN0ZWQgPSBbWzEsIDJdLCBbMywgNF1dO1xuICAgICAgaGVhZCBuZXN0ZWRcbiAgICBgO1xuICAgIGNvbnN0IHJlc3VsdCA9IHJ1bkNvZGUoY29kZSk7XG4gICAgLy8gaGVhZCBub3cgcmV0dXJucyBTb21lIFsxLCAyXVxuICAgIGNvbnN0IGZpbmFsUmVzdWx0ID0gdW53cmFwVmFsdWUocmVzdWx0LmZpbmFsUmVzdWx0KTtcbiAgICBleHBlY3QoZmluYWxSZXN1bHQubmFtZSkudG9CZShcIlNvbWVcIik7XG4gICAgZXhwZWN0KHVud3JhcFZhbHVlKGZpbmFsUmVzdWx0LmFyZ3NbMF0pKS50b0VxdWFsKFsxLCAyXSk7XG4gIH0pO1xufSk7XG4iXSwibmFtZXMiOlsidW53cmFwVmFsdWUiLCJ2YWwiLCJ0YWciLCJ2YWx1ZSIsIm5hbWUiLCJhcmdzIiwibWFwIiwidmFsdWVzIiwib2JqIiwiayIsImZpZWxkcyIsImRlc2NyaWJlIiwiZXZhbHVhdG9yIiwiYmVmb3JlRWFjaCIsIkV2YWx1YXRvciIsInJ1bkNvZGUiLCJjb2RlIiwibGV4ZXIiLCJMZXhlciIsInRva2VucyIsInRva2VuaXplIiwiYXN0IiwicGFyc2UiLCJkZWNvcmF0ZWRSZXN1bHQiLCJ0eXBlQW5kRGVjb3JhdGUiLCJldmFsdWF0ZVByb2dyYW0iLCJwcm9ncmFtIiwidGVzdCIsInJlc3VsdCIsImZpbmFsUmVzdWx0IiwiZXhwZWN0IiwidG9CZSIsImJvb2xSZXN1bHQiLCJ0b0VxdWFsIl0sIm1hcHBpbmdzIjoiOzs7O3VCQUFzQjt3QkFDQTt1QkFDVTsyQkFDTTtBQUV0QyxTQUFTQSxZQUFZQyxHQUFVO0lBQzdCLElBQUlBLFFBQVEsTUFBTSxPQUFPO0lBQ3pCLElBQUksT0FBT0EsUUFBUSxVQUFVLE9BQU9BO0lBQ3BDLE9BQVFBLElBQUlDLEdBQUc7UUFDYixLQUFLO1lBQ0gs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