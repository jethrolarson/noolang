{"version":3,"sources":["/workspace/test/head_function.test.ts"],"sourcesContent":["import { Lexer } from \"../src/lexer\";\nimport { parse } from \"../src/parser/parser\";\nimport { typeAndDecorate } from \"../src/typer\";\nimport { Evaluator, type Value } from \"../src/evaluator\";\n\nfunction unwrapValue(val: Value): any {\n  if (val === null) return null;\n  if (typeof val !== \"object\") return val;\n  switch (val.tag) {\n    case \"number\":\n      return val.value;\n    case \"string\":\n      return val.value;\n    case \"constructor\":\n      if (val.name === \"True\") return true;\n      if (val.name === \"False\") return false;\n      return { name: val.name, args: val.args.map(unwrapValue) };\n    case \"list\":\n      return val.values.map(unwrapValue);\n    case \"tuple\":\n      return val.values.map(unwrapValue);\n    case \"record\": {\n      const obj: any = {};\n      for (const k in val.fields) obj[k] = unwrapValue(val.fields[k]);\n      return obj;\n    }\n    default:\n      return val;\n  }\n}\n\ndescribe(\"Head Function Tests\", () => {\n  let evaluator: Evaluator;\n\n  beforeEach(() => {\n    evaluator = new Evaluator();\n  });\n\n  const runCode = (code: string) => {\n    const lexer = new Lexer(code);\n    const tokens = lexer.tokenize();\n    const ast = parse(tokens);\n    const decoratedResult = typeAndDecorate(ast);\n    return evaluator.evaluateProgram(decoratedResult.program);\n  };\n\n  test(\"should work with integer lists\", () => {\n    const code = `\n      numbers = [1, 2, 3, 4, 5];\n      head numbers\n    `;\n    const result = runCode(code);\n    // head now returns Some 1, so we check for the constructor\n    const finalResult = unwrapValue(result.finalResult);\n    expect(finalResult.name).toBe(\"Some\");\n    expect(unwrapValue(finalResult.args[0])).toBe(1);\n  });\n\n  test(\"should work with string lists\", () => {\n    const code = `\n      strings = [\"hello\", \"world\", \"noolang\"];\n      head strings\n    `;\n    const result = runCode(code);\n    // head now returns Some \"hello\"\n    const finalResult = unwrapValue(result.finalResult);\n    expect(finalResult.name).toBe(\"Some\");\n    expect(unwrapValue(finalResult.args[0])).toBe(\"hello\");\n  });\n\n  test(\"should work with boolean lists\", () => {\n    const code = `\n      bools = [True, False, True];\n      head bools\n    `;\n    const result = runCode(code);\n    // head now returns Some True\n    const finalResult = unwrapValue(result.finalResult);\n    expect(finalResult.name).toBe(\"Some\");\n    const boolResult = finalResult.args[0];\n    // The Bool constructor gets unwrapped to JavaScript boolean\n    expect(boolResult).toBe(true);\n  });\n\n  test(\"should work with nested lists\", () => {\n    const code = `\n      nested = [[1, 2], [3, 4]];\n      head nested\n    `;\n    const result = runCode(code);\n    // head now returns Some [1, 2]\n    const finalResult = unwrapValue(result.finalResult);\n    expect(finalResult.name).toBe(\"Some\");\n    expect(unwrapValue(finalResult.args[0])).toEqual([1, 2]);\n  });\n});\n"],"names":["unwrapValue","val","tag","value","name","args","map","values","obj","k","fields","describe","evaluator","beforeEach","Evaluator","runCode","code","lexer","Lexer","tokens","tokenize","ast","parse","decoratedResult","typeAndDecorate","evaluateProgram","program","test","result","finalResult","expect","toBe","boolResult","toEqual"],"mappings":";;;;uBAAsB;wBACA;uBACU;2BACM;AAEtC,SAASA,YAAYC,GAAU;IAC7B,IAAIA,QAAQ,MAAM,OAAO;IACzB,IAAI,OAAOA,QAAQ,UAAU,OAAOA;IACpC,OAAQA,IAAIC,GAAG;QACb,KAAK;YACH,OAAOD,IAAIE,KAAK;QAClB,KAAK;YACH,OAAOF,IAAIE,KAAK;QAClB,KAAK;YACH,IAAIF,IAAIG,IAAI,KAAK,QAAQ,OAAO;YAChC,IAAIH,IAAIG,IAAI,KAAK,SAAS,OAAO;YACjC,OAAO;gBAAEA,MAAMH,IAAIG,IAAI;gBAAEC,MAAMJ,IAAII,IAAI,CAACC,GAAG,CAACN;YAAa;QAC3D,KAAK;YACH,OAAOC,IAAIM,MAAM,CAACD,GAAG,CAACN;QACxB,KAAK;YACH,OAAOC,IAAIM,MAAM,CAACD,GAAG,CAACN;QACxB,KAAK;YAAU;gBACb,MAAMQ,MAAW,CAAC;gBAClB,IAAK,MAAMC,KAAKR,IAAIS,MAAM,CAAEF,GAAG,CAACC,EAAE,GAAGT,YAAYC,IAAIS,MAAM,CAACD,EAAE;gBAC9D,OAAOD;YACT;QACA;YACE,OAAOP;IACX;AACF;AAEAU,SAAS,uBAAuB;IAC9B,IAAIC;IAEJC,WAAW;QACTD,YAAY,IAAIE,oBAAS;IAC3B;IAEA,MAAMC,UAAU,CAACC;QACf,MAAMC,QAAQ,IAAIC,YAAK,CAACF;QACxB,MAAMG,SAASF,MAAMG,QAAQ;QAC7B,MAAMC,MAAMC,IAAAA,aAAK,EAACH;QAClB,MAAMI,kBAAkBC,IAAAA,sBAAe,EAACH;QACxC,OAAOT,UAAUa,eAAe,CAACF,gBAAgBG,OAAO;IAC1D;IAEAC,KAAK,kCAAkC;QACrC,MAAMX,OAAO,CAAC;;;IAGd,CAAC;QACD,MAAMY,SAASb,QAAQC;QACvB,2DAA2D;QAC3D,MAAMa,cAAc7B,YAAY4B,OAAOC,WAAW;QAClDC,OAAOD,YAAYzB,IAAI,EAAE2B,IAAI,CAAC;QAC9BD,OAAO9B,YAAY6B,YAAYxB,IAAI,CAAC,EAAE,GAAG0B,IAAI,CAAC;IAChD;IAEAJ,KAAK,iCAAiC;QACpC,MAAMX,OAAO,CAAC;;;IAGd,CAAC;QACD,MAAMY,SAASb,QAAQC;QACvB,gCAAgC;QAChC,MAAMa,cAAc7B,YAAY4B,OAAOC,WAAW;QAClDC,OAAOD,YAAYzB,IAAI,EAAE2B,IAAI,CAAC;QAC9BD,OAAO9B,YAAY6B,YAAYxB,IAAI,CAAC,EAAE,GAAG0B,IAAI,CAAC;IAChD;IAEAJ,KAAK,kCAAkC;QACrC,MAAMX,OAAO,CAAC;;;IAGd,CAAC;QACD,MAAMY,SAASb,QAAQC;QACvB,6BAA6B;QAC7B,MAAMa,cAAc7B,YAAY4B,OAAOC,WAAW;QAClDC,OAAOD,YAAYzB,IAAI,EAAE2B,IAAI,CAAC;QAC9B,MAAMC,aAAaH,YAAYxB,IAAI,CAAC,EAAE;QACtC,4DAA4D;QAC5DyB,OAAOE,YAAYD,IAAI,CAAC;IAC1B;IAEAJ,KAAK,iCAAiC;QACpC,MAAMX,OAAO,CAAC;;;IAGd,CAAC;QACD,MAAMY,SAASb,QAAQC;QACvB,+BAA+B;QAC/B,MAAMa,cAAc7B,YAAY4B,OAAOC,WAAW;QAClDC,OAAOD,YAAYzB,IAAI,EAAE2B,IAAI,CAAC;QAC9BD,OAAO9B,YAAY6B,YAAYxB,IAAI,CAAC,EAAE,GAAG4B,OAAO,CAAC;YAAC;YAAG;SAAE;IACzD;AACF"}