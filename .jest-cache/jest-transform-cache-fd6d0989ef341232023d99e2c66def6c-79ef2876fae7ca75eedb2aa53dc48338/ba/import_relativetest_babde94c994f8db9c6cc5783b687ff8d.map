{"version":3,"sources":["/workspace/test/import_relative.test.ts"],"sourcesContent":["import { Lexer } from \"../src/lexer\";\nimport { parse } from \"../src/parser/parser\";\nimport { Evaluator } from \"../src/evaluator\";\n\ndescribe(\"File-relative imports\", () => {\n\tconst mockFs = {\n\t\treadFileSync: (filePath: unknown, encoding: string) => {\n\t\t\tif (typeof filePath === \"string\" && filePath.includes(\"stdlib.noo\")) {\n\t\t\t\treturn \"# Noolang Standard Library\\n# This file defines the global default environment\\n\";\n\t\t\t}\n\t\t\tif (\n\t\t\t\ttypeof filePath === \"string\" &&\n\t\t\t\tfilePath.includes(\"math_functions.noo\")\n\t\t\t) {\n\t\t\t\treturn \"{ @add fn x y => x + y, @multiply fn x y => x * y }\";\n\t\t\t}\n\t\t\tthrow new Error(`File not found: ${filePath}`);\n\t\t},\n\t\texistsSync: (filePath: unknown) => {\n\t\t\tif (typeof filePath === \"string\" && filePath.includes(\"stdlib.noo\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (\n\t\t\t\ttypeof filePath === \"string\" &&\n\t\t\t\tfilePath.includes(\"math_functions.noo\")\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t};\n\n\ttest(\"should import from same directory\", () => {\n\t\tconst testCode = `\n      math = import \"math_functions\";\n      (@add math) 2 3\n    `;\n\t\tconst lexer = new Lexer(testCode);\n\t\tconst tokens = lexer.tokenize();\n\t\tconst program = parse(tokens);\n\t\tconst evaluator = new Evaluator({ fs: mockFs as any });\n\t\tconst result = evaluator.evaluateProgram(\n\t\t\tprogram,\n\t\t\t\"/test/dir/test_file.noo\",\n\t\t);\n\t\texpect(result.finalResult).toEqual({ tag: \"number\", value: 5 });\n\t});\n\n\ttest(\"should import from parent directory\", () => {\n\t\tconst testCode = `\n      math = import \"../math_functions\";\n      (@add math) 10 20\n    `;\n\t\tconst lexer = new Lexer(testCode);\n\t\tconst tokens = lexer.tokenize();\n\t\tconst program = parse(tokens);\n\t\tconst evaluator = new Evaluator({ fs: mockFs as any });\n\t\tconst result = evaluator.evaluateProgram(\n\t\t\tprogram,\n\t\t\t\"/test/dir/subdir/test_file.noo\",\n\t\t);\n\t\texpect(result.finalResult).toEqual({ tag: \"number\", value: 30 });\n\t});\n\n\ttest(\"should handle absolute paths\", () => {\n\t\tconst testCode = `\n      math = import \"/absolute/path/math_functions\";\n      (@add math) 5 10\n    `;\n\t\tconst lexer = new Lexer(testCode);\n\t\tconst tokens = lexer.tokenize();\n\t\tconst program = parse(tokens);\n\t\tconst evaluator = new Evaluator({ fs: mockFs as any });\n\t\tconst result = evaluator.evaluateProgram(\n\t\t\tprogram,\n\t\t\t\"/test/dir/test_file.noo\",\n\t\t);\n\t\texpect(result.finalResult).toEqual({ tag: \"number\", value: 15 });\n\t});\n\n\ttest(\"should fall back to current working directory when no file path provided\", () => {\n\t\tconst testCode = `\n      math = import \"math_functions\";\n      (@add math) 3 7\n    `;\n\t\tconst lexer = new Lexer(testCode);\n\t\tconst tokens = lexer.tokenize();\n\t\tconst program = parse(tokens);\n\t\tconst evaluator = new Evaluator({ fs: mockFs as any });\n\t\tconst result = evaluator.evaluateProgram(program); // No file path\n\t\texpect(result.finalResult).toEqual({ tag: \"number\", value: 10 });\n\t});\n}); "],"names":["describe","mockFs","readFileSync","filePath","encoding","includes","Error","existsSync","test","testCode","lexer","Lexer","tokens","tokenize","program","parse","evaluator","Evaluator","fs","result","evaluateProgram","expect","finalResult","toEqual","tag","value"],"mappings":";;;;uBAAsB;wBACA;2BACI;AAE1BA,SAAS,yBAAyB;IACjC,MAAMC,SAAS;QACdC,cAAc,CAACC,UAAmBC;YACjC,IAAI,OAAOD,aAAa,YAAYA,SAASE,QAAQ,CAAC,eAAe;gBACpE,OAAO;YACR;YACA,IACC,OAAOF,aAAa,YACpBA,SAASE,QAAQ,CAAC,uBACjB;gBACD,OAAO;YACR;YACA,MAAM,IAAIC,MAAM,CAAC,gBAAgB,EAAEH,UAAU;QAC9C;QACAI,YAAY,CAACJ;YACZ,IAAI,OAAOA,aAAa,YAAYA,SAASE,QAAQ,CAAC,eAAe;gBACpE,OAAO;YACR;YACA,IACC,OAAOF,aAAa,YACpBA,SAASE,QAAQ,CAAC,uBACjB;gBACD,OAAO;YACR;YACA,OAAO;QACR;IACD;IAEAG,KAAK,qCAAqC;QACzC,MAAMC,WAAW,CAAC;;;IAGhB,CAAC;QACH,MAAMC,QAAQ,IAAIC,YAAK,CAACF;QACxB,MAAMG,SAASF,MAAMG,QAAQ;QAC7B,MAAMC,UAAUC,IAAAA,aAAK,EAACH;QACtB,MAAMI,YAAY,IAAIC,oBAAS,CAAC;YAAEC,IAAIjB;QAAc;QACpD,MAAMkB,SAASH,UAAUI,eAAe,CACvCN,SACA;QAEDO,OAAOF,OAAOG,WAAW,EAAEC,OAAO,CAAC;YAAEC,KAAK;YAAUC,OAAO;QAAE;IAC9D;IAEAjB,KAAK,uCAAuC;QAC3C,MAAMC,WAAW,CAAC;;;IAGhB,CAAC;QACH,MAAMC,QAAQ,IAAIC,YAAK,CAACF;QACxB,MAAMG,SAASF,MAAMG,QAAQ;QAC7B,MAAMC,UAAUC,IAAAA,aAAK,EAACH;QACtB,MAAMI,YAAY,IAAIC,oBAAS,CAAC;YAAEC,IAAIjB;QAAc;QACpD,MAAMkB,SAASH,UAAUI,eAAe,CACvCN,SACA;QAEDO,OAAOF,OAAOG,WAAW,EAAEC,OAAO,CAAC;YAAEC,KAAK;YAAUC,OAAO;QAAG;IAC/D;IAEAjB,KAAK,gCAAgC;QACpC,MAAMC,WAAW,CAAC;;;IAGhB,CAAC;QACH,MAAMC,QAAQ,IAAIC,YAAK,CAACF;QACxB,MAAMG,SAASF,MAAMG,QAAQ;QAC7B,MAAMC,UAAUC,IAAAA,aAAK,EAACH;QACtB,MAAMI,YAAY,IAAIC,oBAAS,CAAC;YAAEC,IAAIjB;QAAc;QACpD,MAAMkB,SAASH,UAAUI,eAAe,CACvCN,SACA;QAEDO,OAAOF,OAAOG,WAAW,EAAEC,OAAO,CAAC;YAAEC,KAAK;YAAUC,OAAO;QAAG;IAC/D;IAEAjB,KAAK,4EAA4E;QAChF,MAAMC,WAAW,CAAC;;;IAGhB,CAAC;QACH,MAAMC,QAAQ,IAAIC,YAAK,CAACF;QACxB,MAAMG,SAASF,MAAMG,QAAQ;QAC7B,MAAMC,UAAUC,IAAAA,aAAK,EAACH;QACtB,MAAMI,YAAY,IAAIC,oBAAS,CAAC;YAAEC,IAAIjB;QAAc;QACpD,MAAMkB,SAASH,UAAUI,eAAe,CAACN,UAAU,eAAe;QAClEO,OAAOF,OAAOG,WAAW,EAAEC,OAAO,CAAC;YAAEC,KAAK;YAAUC,OAAO;QAAG;IAC/D;AACD"}