675473f2024dac80744b068472572ff0
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _lexer = require("../src/lexer");
const _parser = require("../src/parser/parser");
const _typer = require("../src/typer");
const _typeoperations = require("../src/typer/type-operations");
const _builtins = require("../src/typer/builtins");
describe('Polymorphic Function Type Pollution', ()=>{
    test('print should remain polymorphic between uses', ()=>{
        // Initialize fresh type state for each test
        let state = (0, _typeoperations.createTypeState)();
        state = (0, _builtins.initializeBuiltins)(state);
        // First, use print with integer
        const lexer1 = new _lexer.Lexer('print 1');
        const tokens1 = lexer1.tokenize();
        const program1 = (0, _parser.parse)(tokens1);
        const result1 = (0, _typer.typeAndDecorate)(program1, state);
        state = result1.state;
        // Print should work with Int - check if this succeeds
        expect(()=>result1).not.toThrow();
        // Now use print with string - this should also work
        const lexer2 = new _lexer.Lexer('print "hello"');
        const tokens2 = lexer2.tokenize();
        const program2 = (0, _parser.parse)(tokens2);
        // This should not throw - print should be polymorphic
        expect(()=>{
            const result2 = (0, _typer.typeAndDecorate)(program2, state);
        }).not.toThrow();
    });
    test('simulate REPL behavior - alternating print types', ()=>{
        // Simulate REPL state persistence
        let state = (0, _typeoperations.createTypeState)();
        state = (0, _builtins.initializeBuiltins)(state);
        // First REPL input: print 1
        const lexer1 = new _lexer.Lexer('print 1');
        const tokens1 = lexer1.tokenize();
        const program1 = (0, _parser.parse)(tokens1);
        const result1 = (0, _typer.typeAndDecorate)(program1, state);
        state = result1.state; // Persist state like REPL does
        // Second REPL input: print "hi" - this should work
        const lexer2 = new _lexer.Lexer('print "hi"');
        const tokens2 = lexer2.tokenize();
        const program2 = (0, _parser.parse)(tokens2);
        // This is where the bug manifests - print gets "stuck" on Int type
        expect(()=>{
            const result2 = (0, _typer.typeAndDecorate)(program2, state);
            state = result2.state;
        }).not.toThrow();
        // Third REPL input: print 42 - should work again
        const lexer3 = new _lexer.Lexer('print 42');
        const tokens3 = lexer3.tokenize();
        const program3 = (0, _parser.parse)(tokens3);
        expect(()=>{
            const result3 = (0, _typer.typeAndDecorate)(program3, state);
        }).not.toThrow();
    });
    test('other polymorphic functions should not have type pollution', ()=>{
        let state = (0, _typeoperations.createTypeState)();
        state = (0, _builtins.initializeBuiltins)(state);
        // Test == operator with different types
        const eq1 = (0, _typer.typeAndDecorate)((0, _parser.parse)(new _lexer.Lexer('1 == 1').tokenize()), state);
        state = eq1.state;
        expect(()=>{
            const eq2 = (0, _typer.typeAndDecorate)((0, _parser.parse)(new _lexer.Lexer('"a" == "b"').tokenize()), state);
            state = eq2.state;
        }).not.toThrow();
        // Test toString with different types
        expect(()=>{
            const toString1 = (0, _typer.typeAndDecorate)((0, _parser.parse)(new _lexer.Lexer('toString 42').tokenize()), state);
            state = toString1.state;
        }).not.toThrow();
        expect(()=>{
            const toString2 = (0, _typer.typeAndDecorate)((0, _parser.parse)(new _lexer.Lexer('toString "hello"').tokenize()), state);
        }).not.toThrow();
    });
    test('list functions should remain polymorphic', ()=>{
        let state = (0, _typeoperations.createTypeState)();
        state = (0, _builtins.initializeBuiltins)(state);
        // Test with list of integers (using cons to build lists)
        const list1 = (0, _typer.typeAndDecorate)((0, _parser.parse)(new _lexer.Lexer('cons 1 (cons 2 (cons 3 []))').tokenize()), state);
        state = list1.state;
        // Test toString with different input again - should work  
        expect(()=>{
            const toString3 = (0, _typer.typeAndDecorate)((0, _parser.parse)(new _lexer.Lexer('toString 100').tokenize()), state);
        }).not.toThrow();
    });
});

//# sourceMappingURL=data:application/json;base64,