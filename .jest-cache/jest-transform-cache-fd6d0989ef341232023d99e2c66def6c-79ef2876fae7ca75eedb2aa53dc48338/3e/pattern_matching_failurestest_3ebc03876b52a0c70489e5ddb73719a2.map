{"version":3,"sources":["/workspace/test/pattern_matching_failures.test.ts"],"sourcesContent":["import { Lexer } from \"../src/lexer\";\nimport { parse } from \"../src/parser/parser\";\nimport { typeAndDecorate } from \"../src/typer\";\nimport { Evaluator, Value } from \"../src/evaluator\";\n\nfunction unwrapValue(val: Value): any {\n  if (val === null) return null;\n  if (typeof val !== \"object\") return val;\n  switch (val.tag) {\n    case \"number\":\n      return val.value;\n    case \"string\":\n      return val.value;\n    case \"constructor\":\n      if (val.name === \"True\") return true;\n      if (val.name === \"False\") return false;\n      return { name: val.name, args: val.args.map(unwrapValue) };\n    case \"list\":\n      return val.values.map(unwrapValue);\n    case \"tuple\":\n      return val.values.map(unwrapValue);\n    case \"record\": {\n      const obj: any = {};\n      for (const k in val.fields) obj[k] = unwrapValue(val.fields[k]);\n      return obj;\n    }\n    default:\n      return val;\n  }\n}\n\ndescribe(\"Pattern Matching Failure Tests\", () => {\n  let evaluator: Evaluator;\n\n  beforeEach(() => {\n    evaluator = new Evaluator();\n  });\n\n  const runCode = (code: string) => {\n    const lexer = new Lexer(code);\n    const tokens = lexer.tokenize();\n    const ast = parse(tokens);\n    const decoratedResult = typeAndDecorate(ast);\n    return evaluator.evaluateProgram(decoratedResult.program);\n  };\n\n  test.skip(\"should handle parametric ADT pattern matching\", () => {\n    // FIXME: Currently fails with \"Pattern expects constructor but got α\"\n    const code = `\n      type Point a = Point a a;\n      get_x = fn point => match point with (Point x y => x);\n      origin = Point 0 0;\n      get_x origin\n    `;\n    const result = runCode(code);\n    expect(unwrapValue(result.finalResult)).toBe(0);\n  });\n\n  test.skip(\"should handle Option pattern matching in functions\", () => {\n    // FIXME: Currently fails with \"Pattern expects constructor but got α\"\n    const code = `\n      handle_option = fn opt => match opt with (\n        Some value => value * 2;\n        None => 0\n      );\n      handle_option (Some 21)\n    `;\n    const result = runCode(code);\n    expect(unwrapValue(result.finalResult)).toBe(42);\n  });\n\n  test.skip(\"should handle Result pattern matching\", () => {\n    // FIXME: Currently fails with \"Pattern expects constructor but got α\"\n    const code = `\n      handle_result = fn res => match res with (\n        Ok value => value + 10;\n        Err msg => 0\n      );\n      handle_result (Ok 32)\n    `;\n    const result = runCode(code);\n    expect(unwrapValue(result.finalResult)).toBe(42);\n  });\n\n  test.skip(\"should handle complex Shape pattern matching\", () => {\n    // FIXME: Currently fails with \"Pattern expects constructor but got α\"\n    const code = `\n      type Shape = Circle Number | Rectangle Number Number;\n      calculate_area = fn shape => match shape with (\n        Circle radius => radius * radius * 3;\n        Rectangle width height => width * height\n      );\n      calculate_area (Circle 5)\n    `;\n    const result = runCode(code);\n    expect(unwrapValue(result.finalResult)).toBe(75);\n  });\n});\n"],"names":["unwrapValue","val","tag","value","name","args","map","values","obj","k","fields","describe","evaluator","beforeEach","Evaluator","runCode","code","lexer","Lexer","tokens","tokenize","ast","parse","decoratedResult","typeAndDecorate","evaluateProgram","program","test","skip","result","expect","finalResult","toBe"],"mappings":";;;;uBAAsB;wBACA;uBACU;2BACC;AAEjC,SAASA,YAAYC,GAAU;IAC7B,IAAIA,QAAQ,MAAM,OAAO;IACzB,IAAI,OAAOA,QAAQ,UAAU,OAAOA;IACpC,OAAQA,IAAIC,GAAG;QACb,KAAK;YACH,OAAOD,IAAIE,KAAK;QAClB,KAAK;YACH,OAAOF,IAAIE,KAAK;QAClB,KAAK;YACH,IAAIF,IAAIG,IAAI,KAAK,QAAQ,OAAO;YAChC,IAAIH,IAAIG,IAAI,KAAK,SAAS,OAAO;YACjC,OAAO;gBAAEA,MAAMH,IAAIG,IAAI;gBAAEC,MAAMJ,IAAII,IAAI,CAACC,GAAG,CAACN;YAAa;QAC3D,KAAK;YACH,OAAOC,IAAIM,MAAM,CAACD,GAAG,CAACN;QACxB,KAAK;YACH,OAAOC,IAAIM,MAAM,CAACD,GAAG,CAACN;QACxB,KAAK;YAAU;gBACb,MAAMQ,MAAW,CAAC;gBAClB,IAAK,MAAMC,KAAKR,IAAIS,MAAM,CAAEF,GAAG,CAACC,EAAE,GAAGT,YAAYC,IAAIS,MAAM,CAACD,EAAE;gBAC9D,OAAOD;YACT;QACA;YACE,OAAOP;IACX;AACF;AAEAU,SAAS,kCAAkC;IACzC,IAAIC;IAEJC,WAAW;QACTD,YAAY,IAAIE,oBAAS;IAC3B;IAEA,MAAMC,UAAU,CAACC;QACf,MAAMC,QAAQ,IAAIC,YAAK,CAACF;QACxB,MAAMG,SAASF,MAAMG,QAAQ;QAC7B,MAAMC,MAAMC,IAAAA,aAAK,EAACH;QAClB,MAAMI,kBAAkBC,IAAAA,sBAAe,EAACH;QACxC,OAAOT,UAAUa,eAAe,CAACF,gBAAgBG,OAAO;IAC1D;IAEAC,KAAKC,IAAI,CAAC,iDAAiD;QACzD,sEAAsE;QACtE,MAAMZ,OAAO,CAAC;;;;;IAKd,CAAC;QACD,MAAMa,SAASd,QAAQC;QACvBc,OAAO9B,YAAY6B,OAAOE,WAAW,GAAGC,IAAI,CAAC;IAC/C;IAEAL,KAAKC,IAAI,CAAC,sDAAsD;QAC9D,sEAAsE;QACtE,MAAMZ,OAAO,CAAC;;;;;;IAMd,CAAC;QACD,MAAMa,SAASd,QAAQC;QACvBc,OAAO9B,YAAY6B,OAAOE,WAAW,GAAGC,IAAI,CAAC;IAC/C;IAEAL,KAAKC,IAAI,CAAC,yCAAyC;QACjD,sEAAsE;QACtE,MAAMZ,OAAO,CAAC;;;;;;IAMd,CAAC;QACD,MAAMa,SAASd,QAAQC;QACvBc,OAAO9B,YAAY6B,OAAOE,WAAW,GAAGC,IAAI,CAAC;IAC/C;IAEAL,KAAKC,IAAI,CAAC,gDAAgD;QACxD,sEAAsE;QACtE,MAAMZ,OAAO,CAAC;;;;;;;IAOd,CAAC;QACD,MAAMa,SAASd,QAAQC;QACvBc,OAAO9B,YAAY6B,OAAOE,WAAW,GAAGC,IAAI,CAAC;IAC/C;AACF"}