11add673ae5e037ede826cae166b2c6d
// AST types for Noolang
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get adtType () {
        return adtType;
    },
    get boolType () {
        return boolType;
    },
    get constrainedFunctionType () {
        return constrainedFunctionType;
    },
    get constrainedTypeVariable () {
        return constrainedTypeVariable;
    },
    get createLocation () {
        return createLocation;
    },
    get createPosition () {
        return createPosition;
    },
    get customConstraint () {
        return customConstraint;
    },
    get functionType () {
        return functionType;
    },
    get hasFieldConstraint () {
        return hasFieldConstraint;
    },
    get implementsConstraint () {
        return implementsConstraint;
    },
    get intType () {
        return intType;
    },
    get isConstraint () {
        return isConstraint;
    },
    get listType () {
        return listType;
    },
    get listTypeWithElement () {
        return listTypeWithElement;
    },
    get numberType () {
        return numberType;
    },
    get optionInt () {
        return optionInt;
    },
    get optionType () {
        return optionType;
    },
    get primitiveType () {
        return primitiveType;
    },
    get recordType () {
        return recordType;
    },
    get resultString () {
        return resultString;
    },
    get resultType () {
        return resultType;
    },
    get stringType () {
        return stringType;
    },
    get tupleType () {
        return tupleType;
    },
    get tupleTypeConstructor () {
        return tupleTypeConstructor;
    },
    get typeVariable () {
        return typeVariable;
    },
    get unionType () {
        return unionType;
    },
    get unitType () {
        return unitType;
    },
    get unknownType () {
        return unknownType;
    },
    get variableType () {
        return variableType;
    },
    get variantType () {
        return variantType;
    }
});
const createLocation = (start, end)=>({
        start,
        end
    });
const createPosition = (line, column)=>({
        line,
        column
    });
const intType = ()=>({
        kind: 'primitive',
        name: 'Int'
    });
const numberType = ()=>({
        kind: 'primitive',
        name: 'Int'
    }); // Alias for backwards compatibility
const stringType = ()=>({
        kind: 'primitive',
        name: 'String'
    });
const boolType = ()=>({
        kind: 'variant',
        name: 'Bool',
        args: []
    });
const listType = ()=>({
        kind: 'primitive',
        name: 'List'
    });
const functionType = (params, returnType, effects = new Set())=>({
        kind: 'function',
        params,
        return: returnType,
        effects
    });
const typeVariable = (name)=>({
        kind: 'variable',
        name
    });
const unknownType = ()=>({
        kind: 'unknown'
    });
const listTypeWithElement = (element)=>({
        kind: 'list',
        element
    });
const tupleType = (elements)=>({
        kind: 'tuple',
        elements
    });
const tupleTypeConstructor = (elementTypes)=>({
        kind: 'tuple',
        elements: elementTypes
    });
const recordType = (fields)=>({
        kind: 'record',
        fields
    });
const primitiveType = (name)=>({
        kind: 'primitive',
        name
    });
const variableType = (name, constraints)=>({
        kind: 'variable',
        name,
        constraints
    });
const unionType = (types)=>({
        kind: 'union',
        types
    });
const variantType = (name, args)=>({
        kind: 'variant',
        name,
        args
    });
const adtType = (name, typeParams, constructors)=>({
        kind: 'adt',
        name,
        typeParams,
        constructors
    });
const unitType = ()=>({
        kind: 'unit'
    });
const optionType = (element)=>({
        kind: 'variant',
        name: 'Option',
        args: [
            element
        ]
    });
const resultType = (success, error)=>({
        kind: 'variant',
        name: 'Result',
        args: [
            success,
            error
        ]
    });
const optionInt = ()=>optionType(intType());
const resultString = (error)=>resultType(stringType(), error);
const isConstraint = (typeVar, constraint)=>({
        kind: 'is',
        typeVar,
        constraint
    });
const hasFieldConstraint = (typeVar, field, fieldType)=>({
        kind: 'hasField',
        typeVar,
        field,
        fieldType
    });
const implementsConstraint = (typeVar, interfaceName)=>({
        kind: 'implements',
        typeVar,
        interfaceName
    });
const customConstraint = (typeVar, constraint, args)=>({
        kind: 'custom',
        typeVar,
        constraint,
        args
    });
const constrainedTypeVariable = (name, constraints)=>({
        kind: 'variable',
        name,
        constraints
    });
const constrainedFunctionType = (params, returnType, effects = new Set(), constraints = [])=>({
        kind: 'function',
        params,
        return: returnType,
        effects,
        constraints
    });

//# sourceMappingURL=data:application/json;base64,