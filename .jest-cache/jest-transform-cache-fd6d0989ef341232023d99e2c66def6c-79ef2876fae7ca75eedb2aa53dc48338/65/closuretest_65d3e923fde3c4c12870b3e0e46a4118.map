{"version":3,"sources":["/workspace/test/closure.test.ts"],"sourcesContent":["import { Evaluator, Value } from \"../src/evaluator\";\nimport { parse } from \"../src/parser/parser\";\nimport { Lexer } from \"../src/lexer\";\n\nfunction unwrapValue(val: Value): any {\n  if (val === null) return null;\n  if (typeof val !== \"object\") return val;\n  switch (val.tag) {\n    case \"number\":\n      return val.value;\n    case \"string\":\n      return val.value;\n    case \"constructor\":\n      if (val.name === \"True\") return true;\n      if (val.name === \"False\") return false;\n      return val;\n    case \"list\":\n      return val.values.map(unwrapValue);\n    case \"tuple\":\n      return val.values.map(unwrapValue);\n    case \"record\": {\n      const obj: any = {};\n      for (const k in val.fields) obj[k] = unwrapValue(val.fields[k]);\n      return obj;\n    }\n    default:\n      return val;\n  }\n}\n\ndescribe(\"Closure behavior\", () => {\n  function evalNoo(src: string) {\n    const lexer = new Lexer(src);\n    const tokens = lexer.tokenize();\n    const program = parse(tokens);\n    const evaluator = new Evaluator();\n    return evaluator.evaluateProgram(program).finalResult;\n  }\n\n  test(\"simple closure: makeAdder\", () => {\n    const src = `\n      makeAdder = fn x => fn y => x + y;\n      add5 = makeAdder 5;\n      result = add5 10;\n      result\n    `;\n    expect(unwrapValue(evalNoo(src))).toBe(15);\n  });\n\n  test(\"closure in a record\", () => {\n    const code = `\n      makeCounter = fn start => { @value start };\n      counter = makeCounter 10;\n      result = (@value counter);\n      result\n    `;\n    const lexer = new Lexer(code);\n    const tokens = lexer.tokenize();\n    const program = parse(tokens);\n    const evaluator = new Evaluator();\n    const result = evaluator.evaluateProgram(program);\n\n    expect(unwrapValue(result.finalResult)).toBe(10);\n  });\n\n  test(\"closure with function in record\", () => {\n    const code = `\n      makeCounter = fn start => { @value start };\n      counter1 = makeCounter 10;\n      counter2 = makeCounter 20;\n      result1 = (@value counter1);\n      result2 = (@value counter2);\n      result1 + result2\n    `;\n    const lexer = new Lexer(code);\n    const tokens = lexer.tokenize();\n    const program = parse(tokens);\n    const evaluator = new Evaluator();\n    const result = evaluator.evaluateProgram(program);\n\n    expect(unwrapValue(result.finalResult)).toBe(30);\n  });\n});\n"],"names":["unwrapValue","val","tag","value","name","values","map","obj","k","fields","describe","evalNoo","src","lexer","Lexer","tokens","tokenize","program","parse","evaluator","Evaluator","evaluateProgram","finalResult","test","expect","toBe","code","result"],"mappings":";;;;2BAAiC;wBACX;uBACA;AAEtB,SAASA,YAAYC,GAAU;IAC7B,IAAIA,QAAQ,MAAM,OAAO;IACzB,IAAI,OAAOA,QAAQ,UAAU,OAAOA;IACpC,OAAQA,IAAIC,GAAG;QACb,KAAK;YACH,OAAOD,IAAIE,KAAK;QAClB,KAAK;YACH,OAAOF,IAAIE,KAAK;QAClB,KAAK;YACH,IAAIF,IAAIG,IAAI,KAAK,QAAQ,OAAO;YAChC,IAAIH,IAAIG,IAAI,KAAK,SAAS,OAAO;YACjC,OAAOH;QACT,KAAK;YACH,OAAOA,IAAII,MAAM,CAACC,GAAG,CAACN;QACxB,KAAK;YACH,OAAOC,IAAII,MAAM,CAACC,GAAG,CAACN;QACxB,KAAK;YAAU;gBACb,MAAMO,MAAW,CAAC;gBAClB,IAAK,MAAMC,KAAKP,IAAIQ,MAAM,CAAEF,GAAG,CAACC,EAAE,GAAGR,YAAYC,IAAIQ,MAAM,CAACD,EAAE;gBAC9D,OAAOD;YACT;QACA;YACE,OAAON;IACX;AACF;AAEAS,SAAS,oBAAoB;IAC3B,SAASC,QAAQC,GAAW;QAC1B,MAAMC,QAAQ,IAAIC,YAAK,CAACF;QACxB,MAAMG,SAASF,MAAMG,QAAQ;QAC7B,MAAMC,UAAUC,IAAAA,aAAK,EAACH;QACtB,MAAMI,YAAY,IAAIC,oBAAS;QAC/B,OAAOD,UAAUE,eAAe,CAACJ,SAASK,WAAW;IACvD;IAEAC,KAAK,6BAA6B;QAChC,MAAMX,MAAM,CAAC;;;;;IAKb,CAAC;QACDY,OAAOxB,YAAYW,QAAQC,OAAOa,IAAI,CAAC;IACzC;IAEAF,KAAK,uBAAuB;QAC1B,MAAMG,OAAO,CAAC;;;;;IAKd,CAAC;QACD,MAAMb,QAAQ,IAAIC,YAAK,CAACY;QACxB,MAAMX,SAASF,MAAMG,QAAQ;QAC7B,MAAMC,UAAUC,IAAAA,aAAK,EAACH;QACtB,MAAMI,YAAY,IAAIC,oBAAS;QAC/B,MAAMO,SAASR,UAAUE,eAAe,CAACJ;QAEzCO,OAAOxB,YAAY2B,OAAOL,WAAW,GAAGG,IAAI,CAAC;IAC/C;IAEAF,KAAK,mCAAmC;QACtC,MAAMG,OAAO,CAAC;;;;;;;IAOd,CAAC;QACD,MAAMb,QAAQ,IAAIC,YAAK,CAACY;QACxB,MAAMX,SAASF,MAAMG,QAAQ;QAC7B,MAAMC,UAAUC,IAAAA,aAAK,EAACH;QACtB,MAAMI,YAAY,IAAIC,oBAAS;QAC/B,MAAMO,SAASR,UAAUE,eAAe,CAACJ;QAEzCO,OAAOxB,YAAY2B,OAAOL,WAAW,GAAGG,IAAI,CAAC;IAC/C;AACF"}