759a173ef8cc911bd4ef90d179e9d728
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _evaluator = require("../src/evaluator");
const _parser = require("../src/parser/parser");
const _lexer = require("../src/lexer");
function unwrapValue(val) {
    if (val === null) return null;
    if (typeof val !== "object") return val;
    switch(val.tag){
        case "number":
            return val.value;
        case "string":
            return val.value;
        case "constructor":
            if (val.name === "True") return true;
            if (val.name === "False") return false;
            return val;
        case "list":
            return val.values.map(unwrapValue);
        case "tuple":
            return val.values.map(unwrapValue);
        case "record":
            {
                const obj = {};
                for(const k in val.fields)obj[k] = unwrapValue(val.fields[k]);
                return obj;
            }
        default:
            return val;
    }
}
describe("Closure behavior", ()=>{
    function evalNoo(src) {
        const lexer = new _lexer.Lexer(src);
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        const evaluator = new _evaluator.Evaluator();
        return evaluator.evaluateProgram(program).finalResult;
    }
    test("simple closure: makeAdder", ()=>{
        const src = `
      makeAdder = fn x => fn y => x + y;
      add5 = makeAdder 5;
      result = add5 10;
      result
    `;
        expect(unwrapValue(evalNoo(src))).toBe(15);
    });
    test("closure in a record", ()=>{
        const code = `
      makeCounter = fn start => { @value start };
      counter = makeCounter 10;
      result = (@value counter);
      result
    `;
        const lexer = new _lexer.Lexer(code);
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        const evaluator = new _evaluator.Evaluator();
        const result = evaluator.evaluateProgram(program);
        expect(unwrapValue(result.finalResult)).toBe(10);
    });
    test("closure with function in record", ()=>{
        const code = `
      makeCounter = fn start => { @value start };
      counter1 = makeCounter 10;
      counter2 = makeCounter 20;
      result1 = (@value counter1);
      result2 = (@value counter2);
      result1 + result2
    `;
        const lexer = new _lexer.Lexer(code);
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        const evaluator = new _evaluator.Evaluator();
        const result = evaluator.evaluateProgram(program);
        expect(unwrapValue(result.finalResult)).toBe(30);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2UvdGVzdC9jbG9zdXJlLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZhbHVhdG9yLCBWYWx1ZSB9IGZyb20gXCIuLi9zcmMvZXZhbHVhdG9yXCI7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gXCIuLi9zcmMvcGFyc2VyL3BhcnNlclwiO1xuaW1wb3J0IHsgTGV4ZXIgfSBmcm9tIFwiLi4vc3JjL2xleGVyXCI7XG5cbmZ1bmN0aW9uIHVud3JhcFZhbHVlKHZhbDogVmFsdWUpOiBhbnkge1xuICBpZiAodmFsID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgaWYgKHR5cGVvZiB2YWwgIT09IFwib2JqZWN0XCIpIHJldHVybiB2YWw7XG4gIHN3aXRjaCAodmFsLnRhZykge1xuICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgIHJldHVybiB2YWwudmFsdWU7XG4gICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgcmV0dXJuIHZhbC52YWx1ZTtcbiAgICBjYXNlIFwiY29uc3RydWN0b3JcIjpcbiAgICAgIGlmICh2YWwubmFtZSA9PT0gXCJUcnVlXCIpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHZhbC5uYW1lID09PSBcIkZhbHNlXCIpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgY2FzZSBcImxpc3RcIjpcbiAgICAgIHJldHVybiB2YWwudmFsdWVzLm1hcCh1bndyYXBWYWx1ZSk7XG4gICAgY2FzZSBcInR1cGxlXCI6XG4gICAgICByZXR1cm4gdmFsLnZhbHVlcy5tYXAodW53cmFwVmFsdWUpO1xuICAgIGNhc2UgXCJyZWNvcmRcIjoge1xuICAgICAgY29uc3Qgb2JqOiBhbnkgPSB7fTtcbiAgICAgIGZvciAoY29uc3QgayBpbiB2YWwuZmllbGRzKSBvYmpba10gPSB1bndyYXBWYWx1ZSh2YWwuZmllbGRzW2tdKTtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdmFsO1xuICB9XG59XG5cbmRlc2NyaWJlKFwiQ2xvc3VyZSBiZWhhdmlvclwiLCAoKSA9PiB7XG4gIGZ1bmN0aW9uIGV2YWxOb28oc3JjOiBzdHJpbmcpIHtcbiAgICBjb25zdCBsZXhlciA9IG5ldyBMZXhlcihzcmMpO1xuICAgIGNvbnN0IHRva2VucyA9IGxleGVyLnRva2VuaXplKCk7XG4gICAgY29uc3QgcHJvZ3JhbSA9IHBhcnNlKHRva2Vucyk7XG4gICAgY29uc3QgZXZhbHVhdG9yID0gbmV3IEV2YWx1YXRvcigpO1xuICAgIHJldHVybiBldmFsdWF0b3IuZXZhbHVhdGVQcm9ncmFtKHByb2dyYW0pLmZpbmFsUmVzdWx0O1xuICB9XG5cbiAgdGVzdChcInNpbXBsZSBjbG9zdXJlOiBtYWtlQWRkZXJcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHNyYyA9IGBcbiAgICAgIG1ha2VBZGRlciA9IGZuIHggPT4gZm4geSA9PiB4ICsgeTtcbiAgICAgIGFkZDUgPSBtYWtlQWRkZXIgNTtcbiAgICAgIHJlc3VsdCA9IGFkZDUgMTA7XG4gICAgICByZXN1bHRcbiAgICBgO1xuICAgIGV4cGVjdCh1bndyYXBWYWx1ZShldmFsTm9vKHNyYykpKS50b0JlKDE1KTtcbiAgfSk7XG5cbiAgdGVzdChcImNsb3N1cmUgaW4gYSByZWNvcmRcIiwgKCkgPT4ge1xuICAgIGNvbnN0IGNvZGUgPSBgXG4gICAgICBtYWtlQ291bnRlciA9IGZuIHN0YXJ0ID0+IHsgQHZhbHVlIHN0YXJ0IH07XG4gICAgICBjb3VudGVyID0gbWFrZUNvdW50ZXIgMTA7XG4gICAgICByZXN1bHQgPSAoQHZhbHVlIGNvdW50ZXIpO1xuICAgICAgcmVzdWx0XG4gICAgYDtcbiAgICBjb25zdCBsZXhlciA9IG5ldyBMZXhlcihjb2RlKTtcbiAgICBjb25zdCB0b2tlbnMgPSBsZXhlci50b2tlbml6ZSgpO1xuICAgIGNvbnN0IHByb2dyYW0gPSBwYXJzZSh0b2tlbnMpO1xuICAgIGNvbnN0IGV2YWx1YXRvciA9IG5ldyBFdmFsdWF0b3IoKTtcbiAgICBjb25zdCByZXN1bHQgPSBldmFsdWF0b3IuZXZhbHVhdGVQcm9ncmFtKHByb2dyYW0pO1xuXG4gICAgZXhwZWN0KHVud3JhcFZhbHVlKHJlc3VsdC5maW5hbFJlc3VsdCkpLnRvQmUoMTApO1xuICB9KTtcblxuICB0ZXN0KFwiY2xvc3VyZSB3aXRoIGZ1bmN0aW9uIGluIHJlY29yZFwiLCAoKSA9PiB7XG4gICAgY29uc3QgY29kZSA9IGBcbiAgICAgIG1ha2VDb3VudGVyID0gZm4gc3RhcnQgPT4geyBAdmFsdWUgc3RhcnQgfTtcbiAgICAgIGNvdW50ZXIxID0gbWFrZUNvdW50ZXIgMTA7XG4gICAgICBjb3VudGVyMiA9IG1ha2VDb3VudGVyIDIwO1xuICAgICAgcmVzdWx0MSA9IChAdmFsdWUgY291bnRlcjEpO1xuICAgICAgcmVzdWx0MiA9IChAdmFsdWUgY291bnRlcjIpO1xuICAgICAgcmVzdWx0MSArIHJlc3VsdDJcbiAgICBgO1xuICAgIGNvbnN0IGxleGVyID0gbmV3IExleGVyKGNvZGUpO1xuICAgIGNvbnN0IHRva2VucyA9IGxleGVyLnRva2VuaXplKCk7XG4gICAgY29uc3QgcHJvZ3JhbSA9IHBhcnNlKHRva2Vucyk7XG4gICAgY29uc3QgZXZhbHVhdG9yID0gbmV3IEV2YWx1YXRvcigpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGV2YWx1YXRvci5ldmFsdWF0ZVByb2dyYW0ocHJvZ3JhbSk7XG5cbiAgICBleHBlY3QodW53cmFwVmFsdWUocmVzdWx0LmZpbmFsUmVzdWx0KSkudG9CZSgzMCk7XG4gIH0pO1xufSk7XG4iXSwibmFtZXMiOlsidW53cmFwVmFsdWUiLCJ2YWwiLCJ0YWciLCJ2YWx1ZSIsIm5hbWUiLCJ2YWx1ZXMiLCJtYXAiLCJvYmoiLCJrIiwiZmllbGRzIiwiZGVzY3JpYmUiLCJldmFsTm9vIiwic3JjIiwibGV4ZXIiLCJMZXhlciIsInRva2VucyIsInRva2VuaXplIiwicHJvZ3JhbSIsInBhcnNlIiwiZXZhbHVhdG9yIiwiRXZhbHVhdG9yIiwiZXZhbHVh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