e59534ebd721049b7cd8ca21eaf0cc67
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get parse () {
        return parse;
    },
    get parseTypeExpression () {
        return parseTypeExpression;
    }
});
const _ast = require("../ast");
const _combinators = /*#__PURE__*/ _interop_require_wildcard(require("./combinators"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// --- Helper: parse type name (IDENTIFIER or type-related KEYWORD) ---
const parseTypeName = (tokens)=>{
    if (tokens.length === 0) {
        return {
            success: false,
            error: "Expected type name, but got end of input",
            position: 0
        };
    }
    const [first, ...rest] = tokens;
    const typeKeywords = [
        "Int",
        "Number",
        "String",
        "Unit",
        "List"
    ];
    if (first.type === "IDENTIFIER" || first.type === "KEYWORD" && typeKeywords.includes(first.value)) {
        return {
            success: true,
            value: first,
            remaining: rest
        };
    }
    return {
        success: false,
        error: `Expected type name, but got ${first.type} '${first.value}'`,
        position: first.location.start.line
    };
};
// --- Helper: parse a single type atom (primitive, variable, record, tuple, list) ---
function parseTypeAtom(tokens) {
    // Try primitive types first, but handle List as a parameterizable type constructor
    const primitiveTypes = [
        "Int",
        "Number",
        "String",
        "Unit"
    ];
    for (const typeName of primitiveTypes){
        const result = _combinators.keyword(typeName)(tokens);
        if (result.success) {
            switch(typeName){
                case "Int":
                case "Number":
                    return {
                        success: true,
                        value: (0, _ast.intType)(),
                        remaining: result.remaining
                    };
                case "String":
                    return {
                        success: true,
                        value: (0, _ast.stringType)(),
                        remaining: result.remaining
                    };
                case "Unit":
                    return {
                        success: true,
                        value: (0, _ast.unitType)(),
                        remaining: result.remaining
                    };
            }
        }
    }
    // Try List as a parameterizable type constructor
    const listKeywordResult = _combinators.keyword("List")(tokens);
    if (listKeywordResult.success) {
        // Try to parse a type argument for List
        const argResult = _combinators.lazy(()=>parseTypeAtom)(listKeywordResult.remaining);
        if (argResult.success) {
            // List with specific element type: List Number, List String, etc.
            return {
                success: true,
                value: (0, _ast.listTypeWithElement)(argResult.value),
                remaining: argResult.remaining
            };
        } else {
            // Just List (generic)
            return {
                success: true,
                value: (0, _ast.listTypeWithElement)((0, _ast.typeVariable)("a")),
                remaining: listKeywordResult.remaining
            };
        }
    }
    // Try record type
    const recordResult = _combinators.seq(_combinators.punctuation("{"), _combinators.optional(_combinators.sepBy(_combinators.map(_combinators.seq(_combinators.identifier(), _combinators.punctuation(":"), _combinators.lazy(()=>parseTypeExpression)), ([name, colon, type])=>[
            name.value,
            type
        ]), _combinators.punctuation(","))), _combinators.punctuation("}"))(tokens);
    if (recordResult.success) {
        const fields = recordResult.value[1] || [];
        const fieldObj = {};
        for (const [name, type] of fields){
            fieldObj[name] = type;
        }
        return {
            success: true,
            value: (0, _ast.recordType)(fieldObj),
            remaining: recordResult.remaining
        };
    }
    // Try tuple type
    const tupleResult = _combinators.seq(_combinators.punctuation("{"), _combinators.optional(_combinators.sepBy(_combinators.lazy(()=>parseTypeExpression), _combinators.punctuation(","))), _combinators.punctuation("}"))(tokens);
    if (tupleResult.success) {
        const elements = tupleResult.value[1] || [];
        return {
            success: true,
            value: (0, _ast.tupleType)(elements),
            remaining: tupleResult.remaining
        };
    }
    // Try List type
    const listResult = _combinators.seq(_combinators.keyword("List"), _combinators.lazy(()=>parseTypeExpression))(tokens);
    if (listResult.success) {
        return {
            success: true,
            value: (0, _ast.listTypeWithElement)(listResult.value[1]),
            remaining: listResult.remaining
        };
    }
    // Try Tuple type constructor: Tuple T1 T2 T3
    if (tokens.length > 0 && tokens[0].type === "IDENTIFIER" && tokens[0].value === "Tuple") {
        const tupleConstructorResult = _combinators.seq(_combinators.identifier(), _combinators.many(_combinators.lazy(()=>parseTypeExpression)))(tokens);
        if (tupleConstructorResult.success) {
            const elementTypes = tupleConstructorResult.value[1];
            return {
                success: true,
                value: (0, _ast.tupleTypeConstructor)(elementTypes),
                remaining: tupleConstructorResult.remaining
            };
        }
    }
    // Try parenthesized type: (Type)
    const parenResult = _combinators.seq(_combinators.punctuation("("), _combinators.lazy(()=>parseTypeExpression), _combinators.punctuation(")"))(tokens);
    if (parenResult.success) {
        return {
            success: true,
            value: parenResult.value[1],
            remaining: parenResult.remaining
        };
    }
    // Try uppercase type constructor: TypeName arg1 arg2 ... (preserve original logic)
    if (tokens.length > 0 && tokens[0].type === "IDENTIFIER" && /^[A-Z]/.test(tokens[0].value)) {
        const typeNameResult = _combinators.identifier()(tokens);
        if (typeNameResult.success) {
            // Try to parse type arguments
            const argsResult = _combinators.many(_combinators.lazy(()=>parseTypeAtom))(typeNameResult.remaining);
            if (argsResult.success) {
                return {
                    success: true,
                    value: {
                        kind: "variant",
                        name: typeNameResult.value.value,
                        args: argsResult.value
                    },
                    remaining: argsResult.remaining
                };
            }
        }
    }
    // Try type variable or simple identifier
    if (tokens.length > 0 && tokens[0].type === "IDENTIFIER") {
        const identifierResult = _combinators.identifier()(tokens);
        if (identifierResult.success) {
            return {
                success: true,
                value: (0, _ast.typeVariable)(identifierResult.value.value),
                remaining: identifierResult.remaining
            };
        }
    }
    return {
        success: false,
        error: "Expected type atom",
        position: tokens[0]?.location.start.line || 0
    };
}
// --- Type Expression ---
// Helper function to parse function types without top-level effects
const parseFunctionTypeWithoutEffects = (tokens)=>{
    let leftResult = parseTypeAtom(tokens);
    if (!leftResult.success) return leftResult;
    let left = leftResult.value;
    let rest = leftResult.remaining;
    while(rest && rest.length > 0 && rest[0].type === "OPERATOR" && rest[0].value === "->"){
        rest = rest.slice(1);
        const rightResult = parseFunctionTypeWithoutEffects(rest);
        if (!rightResult.success) return rightResult;
        if (!rightResult.value) return {
            success: false,
            error: "Expected type expression",
            position: tokens[0]?.location.start.line || 0
        };
        left = (0, _ast.functionType)([
            left
        ], rightResult.value);
        rest = rightResult.remaining;
    }
    return {
        success: true,
        value: left,
        remaining: rest
    };
};
const parseTypeExpression = (tokens)=>{
    // Try function type (right-associative): a -> b -> c FIRST
    const funcType = (()=>{
        let leftResult = parseTypeAtom(tokens);
        if (!leftResult.success) return leftResult;
        let left = leftResult.value;
        let rest = leftResult.remaining;
        while(rest && rest.length > 0 && rest[0].type === "OPERATOR" && rest[0].value === "->"){
            rest = rest.slice(1);
            const rightResult = parseFunctionTypeWithoutEffects(rest);
            if (!rightResult.success) return rightResult;
            if (!rightResult.value) return {
                success: false,
                error: "Expected type expression",
                position: tokens[0]?.location.start.line || 0
            };
            left = (0, _ast.functionType)([
                left
            ], rightResult.value);
            rest = rightResult.remaining;
        }
        // Parse effects at the end of the entire function type chain
        let effects = new Set();
        let effectRest = rest;
        // Parse effects: !effect1 !effect2 ...
        while(effectRest && effectRest.length > 0 && effectRest[0].type === "OPERATOR" && effectRest[0].value === "!"){
            effectRest = effectRest.slice(1); // consume !
            // Expect an effect name (identifier or keyword)
            if (!effectRest || effectRest.length === 0 || effectRest[0].type !== "IDENTIFIER" && effectRest[0].type !== "KEYWORD") {
                return {
                    success: false,
                    error: "Expected effect name after !",
                    position: effectRest?.[0]?.location?.start?.line || 0
                };
            }
            const effectName = effectRest[0].value;
            // Validate effect name
            const validEffects = [
                "log",
                "read",
                "write",
                "state",
                "time",
                "rand",
                "ffi",
                "async"
            ];
            if (!validEffects.includes(effectName)) {
                return {
                    success: false,
                    error: `Invalid effect: ${effectName}. Valid effects: ${validEffects.join(", ")}`,
                    position: effectRest[0].location.start.line
                };
            }
            effects.add(effectName);
            effectRest = effectRest.slice(1); // consume effect name
        }
        // Apply effects to the function type (including empty effects)
        if (left.kind === 'function') {
            left = {
                ...left,
                effects
            };
        }
        return {
            success: true,
            value: left,
            remaining: effectRest
        };
    })();
    if (funcType.success && funcType.value) {
        return funcType;
    }
    // If function type parsing failed with a specific effect error, return that error
    if (!funcType.success && (funcType.error.includes("Invalid effect:") || funcType.error.includes("Expected effect name after !"))) {
        return funcType;
    }
    // Try type variable (lowercase identifier)
    if (tokens.length > 0 && tokens[0].type === "IDENTIFIER" && /^[a-z]/.test(tokens[0].value)) {
        const varResult = _combinators.identifier()(tokens);
        if (varResult.success) {
            return {
                success: true,
                value: (0, _ast.typeVariable)(varResult.value.value),
                remaining: varResult.remaining
            };
        }
    }
    // Try record type: { name: String, age: Number }
    const recordResult = _combinators.seq(_combinators.punctuation("{"), _combinators.optional(_combinators.sepBy(_combinators.map(_combinators.seq(_combinators.identifier(), _combinators.punctuation(":"), _combinators.lazy(()=>parseTypeExpression)), ([name, colon, type])=>[
            name.value,
            type
        ]), _combinators.punctuation(","))), _combinators.punctuation("}"))(tokens);
    if (recordResult.success) {
        const fields = recordResult.value[1] || [];
        const fieldObj = {};
        for (const [name, type] of fields){
            fieldObj[name] = type;
        }
        return {
            success: true,
            value: (0, _ast.recordType)(fieldObj),
            remaining: recordResult.remaining
        };
    }
    // Try tuple type: { Number, String }
    const tupleResult = _combinators.seq(_combinators.punctuation("{"), _combinators.optional(_combinators.sepBy(_combinators.lazy(()=>parseTypeExpression), _combinators.punctuation(","))), _combinators.punctuation("}"))(tokens);
    if (tupleResult.success) {
        const elements = tupleResult.value[1] || [];
        return {
            success: true,
            value: (0, _ast.tupleType)(elements),
            remaining: tupleResult.remaining
        };
    }
    // Try List type
    const listResult = _combinators.seq(_combinators.keyword("List"), _combinators.lazy(()=>parseTypeExpression))(tokens);
    if (listResult.success) {
        return {
            success: true,
            value: (0, _ast.listTypeWithElement)(listResult.value[1]),
            remaining: listResult.remaining
        };
    }
    return {
        success: false,
        error: "Expected type expression",
        position: tokens[0]?.location.start.line || 0
    };
};
// --- Basic Parsers ---
const parseIdentifier = _combinators.map(_combinators.identifier(), (token)=>({
        kind: "variable",
        name: token.value,
        location: token.location
    }));
const parseNumber = _combinators.map(_combinators.number(), (token)=>({
        kind: "literal",
        value: parseFloat(token.value),
        location: token.location
    }));
const parseString = _combinators.map(_combinators.string(), (token)=>({
        kind: "literal",
        value: token.value,
        location: token.location
    }));
const parseAccessor = _combinators.map(_combinators.accessor(), (token)=>({
        kind: "accessor",
        field: token.value,
        location: token.location
    }));
// --- Record Parsing ---
const parseRecordFieldName = _combinators.map(_combinators.accessor(), (token)=>token.value // Just get the field name without @
);
// Parse an expression that stops at @ (accessor tokens) or semicolon
const parseRecordFieldValue = (tokens)=>{
    // Use the full expression parser to parse the complete expression
    // This includes records, so we can parse nested records
    const result = _combinators.lazy(()=>parseSequence)(tokens);
    if (!result.success) {
        return result;
    }
    // The expression parser should have consumed all the tokens it needs
    // and left us with the remaining tokens that come after the expression
    return {
        success: true,
        value: result.value,
        remaining: result.remaining
    };
};
const parseRecordField = _combinators.map(_combinators.seq(parseRecordFieldName, parseRecordFieldValue), ([fieldName, value])=>({
        name: fieldName,
        value,
        isNamed: true
    }));
// Parse a single record field (named or positional)
const parseRecordFieldOrPositional = (index)=>(tokens)=>{
        // Try to parse as named field first (with accessor)
        const namedFieldResult = parseRecordField(tokens);
        if (namedFieldResult.success) {
            return {
                ...namedFieldResult,
                value: {
                    ...namedFieldResult.value,
                    isNamed: true
                }
            };
        }
        // If that fails, try to parse as positional field (expression without accessor)
        const positionalFieldResult = parseRecordFieldValue(tokens);
        if (positionalFieldResult.success) {
            return {
                success: true,
                value: {
                    name: `@${index}`,
                    value: positionalFieldResult.value,
                    isNamed: false
                },
                remaining: positionalFieldResult.remaining
            };
        }
        return {
            success: false,
            error: "Expected record field (named or positional)",
            position: tokens[0]?.location.start.line || 0
        };
    };
// Custom parser for a sequence of fields separated by semicolons
const parseRecordFields = (tokens)=>{
    let fields = [];
    let rest = tokens;
    // Parse first field
    const firstFieldResult = parseRecordFieldOrPositional(0)(rest);
    if (!firstFieldResult.success) {
        return {
            success: false,
            error: "Expected at least one record field",
            position: tokens[0]?.location.start.line || 0
        };
    }
    fields.push(firstFieldResult.value);
    rest = firstFieldResult.remaining;
    const isNamed = firstFieldResult.value.isNamed;
    // Parse additional fields, each preceded by a comma
    while(rest.length > 0){
        const commaResult = _combinators.punctuation(",")(rest);
        if (!commaResult.success) {
            break; // No more commas, we're done
        }
        rest = commaResult.remaining;
        const fieldResult = parseRecordFieldOrPositional(fields.length)(rest);
        if (!fieldResult.success) {
            // Check if this is a trailing comma (no more fields after comma)
            // Look ahead to see if the next token is a closing brace
            if (rest.length > 0 && rest[0].type === "PUNCTUATION" && rest[0].value === "}") {
                break;
            }
            return {
                success: false,
                error: "Expected field after comma",
                position: rest[0]?.location.start.line || 0
            };
        }
        if (fieldResult.value.isNamed !== isNamed) {
            return {
                success: false,
                error: "Cannot mix named and positional fields in the same record/tuple",
                position: rest[0]?.location.start.line || 0
            };
        }
        fields.push(fieldResult.value);
        rest = fieldResult.remaining;
    }
    // Remove isNamed before returning
    return {
        success: true,
        value: fields.map(({ isNamed, ...rest })=>rest),
        remaining: rest
    };
};
// --- Record/Tuple Parsing ---
const parseRecord = _combinators.map(_combinators.seq(_combinators.punctuation("{"), _combinators.optional(parseRecordFields), _combinators.punctuation("}")), ([open, fields, close])=>{
    const fieldsList = fields || [];
    if (fieldsList.length === 0) {
        // Empty braces: unit
        return {
            kind: "unit",
            location: open.location
        };
    }
    const allNamed = fieldsList.every((f)=>f.name[0] !== "@");
    const allPositional = fieldsList.every((f, i)=>f.name === `@${i}`);
    if (allNamed) {
        // All named fields: record
        return {
            kind: "record",
            fields: fieldsList,
            location: open.location
        };
    } else if (allPositional) {
        // All positional fields: tuple
        return {
            kind: "tuple",
            elements: fieldsList.map((f)=>f.value),
            location: open.location
        };
    } else {
        // Mixed fields: error
        throw new Error("Cannot mix named and positional fields in the same record/tuple");
    }
});
// --- Parenthesized Expressions ---
const parseParenExpr = _combinators.map(_combinators.seq(_combinators.punctuation("("), _combinators.lazy(()=>parseSequence), _combinators.punctuation(")")), ([open, expr, close])=>expr);
// --- Lambda Expression ---
const parseLambdaExpression = (tokens)=>{
    // Try to parse fn keyword first
    const fnResult = _combinators.keyword("fn")(tokens);
    if (!fnResult.success) {
        return fnResult;
    }
    // Try unit parameter patterns first
    let paramNames = [];
    let remaining = fnResult.remaining;
    const parenResult = _combinators.seq(_combinators.punctuation("("), _combinators.punctuation(")"))(remaining);
    if (parenResult.success) {
        // No parameters (should not be used in Noolang, but keep for syntax completeness)
        paramNames = [];
        remaining = parenResult.remaining;
    } else {
        const braceResult = _combinators.seq(_combinators.punctuation("{"), _combinators.punctuation("}"))(remaining);
        if (braceResult.success) {
            // Unit parameter
            paramNames = [
                "_unit"
            ];
            remaining = braceResult.remaining;
        } else {
            // Try multiple identifiers last
            const idResult = _combinators.many(_combinators.identifier())(remaining);
            if (idResult.success) {
                paramNames = idResult.value.map((p)=>p.value);
                remaining = idResult.remaining;
            } else {
                return {
                    success: false,
                    error: "Expected parameter list, parentheses, or braces",
                    position: remaining[0]?.location.start.line || 0
                };
            }
        }
    }
    // Parse the arrow
    const arrowResult = _combinators.operator("=>")(remaining);
    if (!arrowResult.success) {
        return arrowResult;
    }
    // Parse the body (use parseSequenceTermWithIf to allow full expressions)
    const bodyResult = _combinators.lazy(()=>parseSequenceTermWithIf)(arrowResult.remaining);
    if (!bodyResult.success) {
        return bodyResult;
    }
    return {
        success: true,
        value: {
            kind: "function",
            params: paramNames,
            body: bodyResult.value,
            location: fnResult.value.location
        },
        remaining: bodyResult.remaining
    };
};
// --- List Parsing ---
// Custom parser for a sequence of expressions separated by semicolons
const parseListElements = (tokens)=>{
    let elements = [];
    let rest = tokens;
    // Parse first element
    const firstElementResult = _combinators.lazy(()=>parseThrush)(rest);
    if (!firstElementResult.success) {
        return {
            success: false,
            error: "Expected at least one list element",
            position: tokens[0]?.location.start.line || 0
        };
    }
    elements.push(firstElementResult.value);
    rest = firstElementResult.remaining;
    // Parse additional elements, each preceded by a comma
    while(rest.length > 0){
        const commaResult = _combinators.punctuation(",")(rest);
        if (!commaResult.success) {
            break; // No more commas, we're done
        }
        rest = commaResult.remaining;
        const elementResult = _combinators.lazy(()=>parseThrush)(rest);
        if (!elementResult.success) {
            // Check if this is a trailing comma (no more elements after comma)
            // Look ahead to see if the next token is a closing bracket
            if (rest.length > 0 && rest[0].type === "PUNCTUATION" && rest[0].value === "]") {
                break;
            }
            return {
                success: false,
                error: "Expected element after comma",
                position: rest[0]?.location.start.line || 0
            };
        }
        elements.push(elementResult.value);
        rest = elementResult.remaining;
    }
    return {
        success: true,
        value: elements,
        remaining: rest
    };
};
const parseList = _combinators.map(_combinators.seq(_combinators.punctuation("["), _combinators.optional(parseListElements), _combinators.punctuation("]")), ([open, elements, close])=>{
    const elementsList = elements || [];
    return {
        kind: "list",
        elements: elementsList,
        location: open.location
    };
});
// --- Import Expression ---
const parseImportExpression = _combinators.map(_combinators.seq(_combinators.keyword("import"), _combinators.string()), ([importKw, path])=>({
        kind: "import",
        path: path.value,
        location: importKw.location
    }));
// --- If Expression (special: do not allow semicolon in branches) ---
const parseIfExpression = _combinators.map(_combinators.seq(_combinators.keyword("if"), _combinators.lazy(()=>parseSequenceTerm), _combinators.keyword("then"), _combinators.lazy(()=>parseSequenceTerm), _combinators.keyword("else"), _combinators.lazy(()=>parseSequenceTerm)), ([ifKw, condition, thenKw, thenExpr, elseKw, elseExpr])=>{
    return {
        kind: "if",
        condition,
        then: thenExpr,
        else: elseExpr,
        location: ifKw.location
    };
});
// --- Primary Expressions (no unary minus) ---
const parsePrimary = (tokens)=>{
    // DEBUG: Log tokens at entry
    if (process.env.NOO_DEBUG_PARSE) {
        console.log("parsePrimary tokens:", tokens.map((t)=>t.value).join(" "));
    }
    // Fast token-based dispatch instead of sequential choice attempts
    if (tokens.length === 0) {
        return {
            success: false,
            error: "Unexpected end of input",
            position: 0
        };
    }
    const firstToken = tokens[0];
    let result;
    // Dispatch based on token type and value for O(1) selection
    switch(firstToken.type){
        case "NUMBER":
            result = parseNumber(tokens);
            break;
        case "STRING":
            result = parseString(tokens);
            break;
        case "IDENTIFIER":
            result = parseIdentifier(tokens);
            break;
        case "ACCESSOR":
            result = parseAccessor(tokens);
            break;
        case "PUNCTUATION":
            if (firstToken.value === "[") {
                result = parseList(tokens);
            } else if (firstToken.value === "{") {
                result = parseRecord(tokens);
            } else if (firstToken.value === "(") {
                result = parseParenExpr(tokens);
            } else {
                result = {
                    success: false,
                    error: `Unexpected punctuation: ${firstToken.value}`,
                    position: firstToken.location.start.line
                };
            }
            break;
        case "KEYWORD":
            if (firstToken.value === "fn") {
                result = parseLambdaExpression(tokens);
            } else if (firstToken.value === "let") {
                result = _combinators.lazy(()=>parseDefinitionWithType)(tokens);
            } else if (firstToken.value === "import") {
                result = parseImportExpression(tokens);
            } else {
                result = {
                    success: false,
                    error: `Unexpected keyword: ${firstToken.value}`,
                    position: firstToken.location.start.line
                };
            }
            break;
        default:
            result = {
                success: false,
                error: `Unexpected token type: ${firstToken.type}`,
                position: firstToken.location.start.line
            };
            break;
    }
    // DEBUG: Log result
    if (process.env.NOO_DEBUG_PARSE) {
        console.log("parsePrimary result:", result.success ? result.value : result.error);
    }
    return result;
};
// --- Primary with Postfix (type annotations) ---
const parsePrimaryWithPostfix = (tokens)=>{
    if (process.env.NOO_DEBUG_PARSE) {
        console.log("parsePrimaryWithPostfix tokens:", tokens.map((t)=>t.value).join(" "));
    }
    const primaryResult = parsePrimary(tokens);
    if (!primaryResult.success) return primaryResult;
    const postfixResult = parsePostfixFromResult(primaryResult.value, primaryResult.remaining);
    if (process.env.NOO_DEBUG_PARSE) {
        console.log("parsePrimaryWithPostfix result:", postfixResult.success ? postfixResult.value : postfixResult.error);
    }
    return postfixResult;
};
// --- Unary Operators (negation, only if '-' is adjacent to the next token) ---
const parseUnary = (tokens)=>{
    if (process.env.NOO_DEBUG_PARSE) {
        console.log("parseUnary tokens:", tokens.map((t)=>t.value).join(" "));
    }
    if (tokens.length >= 2 && tokens[0].type === "OPERATOR" && tokens[0].value === "-") {
        const minusToken = tokens[0];
        const nextToken = tokens[1];
        // Check if minus is directly adjacent to the next token (no space)
        if (minusToken.location.end.line === nextToken.location.start.line && minusToken.location.end.column === nextToken.location.start.column) {
            // Parse as unary minus
            const operandResult = parsePrimaryWithPostfix(tokens.slice(1));
            if (!operandResult.success) return operandResult;
            const result = {
                success: true,
                value: {
                    kind: "binary",
                    operator: "*",
                    left: {
                        kind: "literal",
                        value: -1,
                        location: minusToken.location
                    },
                    right: operandResult.value,
                    location: minusToken.location
                },
                remaining: operandResult.remaining
            };
            if (process.env.NOO_DEBUG_PARSE) {
                console.log("parseUnary result (negation):", result.value);
            }
            return result;
        }
    }
    // Otherwise, fall through to parsePrimaryWithPostfix
    const result = parsePrimaryWithPostfix(tokens);
    if (process.env.NOO_DEBUG_PARSE) {
        console.log("parseUnary result:", result.success ? result.value : result.error);
    }
    return result;
};
// --- Function Application (left-associative, tightest binding) ---
const parseApplication = (tokens)=>{
    const appResult = _combinators.map(_combinators.seq(parseUnary, _combinators.many(parseUnary)), ([func, args])=>{
        let result = func;
        for (const arg of args){
            result = {
                kind: "application",
                func: result,
                args: [
                    arg
                ],
                location: result.location
            };
        }
        return result;
    })(tokens);
    if (!appResult.success) return appResult;
    // Apply postfix operators (type annotations) to the result
    return parsePostfixFromResult(appResult.value, appResult.remaining);
};
// --- Multiplicative (*, /) ---
const parseMultiplicative = (tokens)=>{
    const multResult = _combinators.map(_combinators.seq(parseApplication, _combinators.many(_combinators.seq(_combinators.choice(_combinators.operator("*"), _combinators.operator("/")), parseApplication))), ([left, rest])=>{
        let result = left;
        for (const [op, right] of rest){
            result = {
                kind: "binary",
                operator: op.value,
                left: result,
                right,
                location: result.location
            };
        }
        return result;
    })(tokens);
    if (!multResult.success) return multResult;
    // Apply postfix operators (type annotations) to the result
    return parsePostfixFromResult(multResult.value, multResult.remaining);
};
// --- Additive (+, -) ---
const parseAdditive = (tokens)=>{
    const addResult = _combinators.map(_combinators.seq(parseMultiplicative, _combinators.many(_combinators.seq(_combinators.choice(_combinators.operator("+"), _combinators.operator("-")), parseMultiplicative))), ([left, rest])=>{
        let result = left;
        for (const [op, right] of rest){
            result = {
                kind: "binary",
                operator: op.value,
                left: result,
                right,
                location: result.location
            };
        }
        return result;
    })(tokens);
    if (!addResult.success) return addResult;
    // Apply postfix operators (type annotations) to the result
    return parsePostfixFromResult(addResult.value, addResult.remaining);
};
// --- Comparison (<, >, <=, >=, ==, !=) ---
const parseComparison = (tokens)=>{
    const compResult = _combinators.map(_combinators.seq(parseAdditive, _combinators.many(_combinators.seq(_combinators.choice(_combinators.operator("<"), _combinators.operator(">"), _combinators.operator("<="), _combinators.operator(">="), _combinators.operator("=="), _combinators.operator("!=")), parseAdditive))), ([left, rest])=>{
        let result = left;
        for (const [op, right] of rest){
            result = {
                kind: "binary",
                operator: op.value,
                left: result,
                right,
                location: result.location
            };
        }
        return result;
    })(tokens);
    if (!compResult.success) return compResult;
    // Apply postfix operators (type annotations) to the result
    return parsePostfixFromResult(compResult.value, compResult.remaining);
};
// --- Composition (|>, <|) ---
const parseCompose = (tokens)=>{
    const compResult = _combinators.map(_combinators.seq(parseComparison, _combinators.many(_combinators.seq(_combinators.choice(_combinators.operator("|>"), _combinators.operator("<|")), parseComparison))), ([left, rest])=>{
        // Build steps array for pipeline expression
        const steps = [
            left
        ];
        for (const [op, right] of rest){
            steps.push(right);
        }
        // If we have multiple steps, create a pipeline expression
        if (steps.length > 1) {
            return {
                kind: "pipeline",
                steps,
                location: left.location
            };
        }
        // Otherwise just return the single expression
        return left;
    })(tokens);
    if (!compResult.success) return compResult;
    // Apply postfix operators (type annotations) to the result
    return parsePostfixFromResult(compResult.value, compResult.remaining);
};
// --- Thrush (|) ---
const parseThrush = (tokens)=>{
    const thrushResult = _combinators.map(_combinators.seq(parseDollar, _combinators.many(_combinators.seq(_combinators.operator("|"), parseDollar))), ([left, rest])=>{
        let result = left;
        for (const [op, right] of rest){
            result = {
                kind: "binary",
                operator: "|",
                left: result,
                right,
                location: result.location
            };
        }
        return result;
    })(tokens);
    if (!thrushResult.success) return thrushResult;
    // Apply postfix operators (type annotations) to the result
    return parsePostfixFromResult(thrushResult.value, thrushResult.remaining);
};
// --- Dollar ($) - Low precedence function application (right-associative) ---
const parseDollar = (tokens)=>{
    const leftResult = parseCompose(tokens);
    if (!leftResult.success) return leftResult;
    // Check for $ operator
    if (leftResult.remaining.length > 0 && leftResult.remaining[0].type === "OPERATOR" && leftResult.remaining[0].value === "$") {
        // Consume the $ token
        const remaining = leftResult.remaining.slice(1);
        // Recursively parse the right side (this creates right-associativity)
        const rightResult = parseDollar(remaining);
        if (!rightResult.success) return rightResult;
        const result = {
            kind: "binary",
            operator: "$",
            left: leftResult.value,
            right: rightResult.value,
            location: leftResult.value.location
        };
        return parsePostfixFromResult(result, rightResult.remaining);
    }
    // No $ operator found, just return the left expression
    return parsePostfixFromResult(leftResult.value, leftResult.remaining);
};
// --- If Expression (after dollar, before sequence) ---
const parseIfAfterDollar = (tokens)=>{
    const ifResult = parseIfExpression(tokens);
    if (!ifResult.success) return ifResult;
    // Apply postfix operators (type annotations) to the result
    return parsePostfixFromResult(ifResult.value, ifResult.remaining);
};
// Helper function to apply postfix operators to an expression
const parsePostfixFromResult = (expr, tokens)=>{
    let result = expr;
    let remaining = tokens;
    // Try to parse postfix type annotations
    while(remaining.length > 0){
        // Try to parse : type given constraint
        if (remaining.length >= 2 && remaining[0].type === "PUNCTUATION" && remaining[0].value === ":") {
            const typeResult = parseTypeExpression(remaining.slice(1));
            if (!typeResult.success) break;
            // Check if there's a "given" constraint after the type
            if (typeResult.remaining.length > 0 && typeResult.remaining[0].type === "KEYWORD" && typeResult.remaining[0].value === "given") {
                const constraintResult = parseConstraintExpr(typeResult.remaining.slice(1));
                if (!constraintResult.success) break;
                result = {
                    kind: "constrained",
                    expression: result,
                    type: typeResult.value,
                    constraint: constraintResult.value,
                    location: result.location
                };
                remaining = constraintResult.remaining;
                continue;
            } else {
                // Just a type annotation without constraints
                result = {
                    kind: "typed",
                    expression: result,
                    type: typeResult.value,
                    location: result.location
                };
                remaining = typeResult.remaining;
                continue;
            }
        }
        break;
    }
    return {
        success: true,
        value: result,
        remaining
    };
};
// --- Definition ---
const parseDefinition = _combinators.map(_combinators.seq(_combinators.identifier(), _combinators.operator("="), _combinators.lazy(()=>parseSequenceTermWithIf)), ([name, equals, value])=>{
    return {
        kind: "definition",
        name: name.value,
        value,
        location: name.location
    };
});
// --- Definition with typed expression (now just a regular definition) ---
const parseDefinitionWithType = parseDefinition;
// --- Mutable Definition ---
const parseMutableDefinition = _combinators.map(_combinators.seq(_combinators.keyword("mut"), _combinators.identifier(), _combinators.operator("="), _combinators.lazy(()=>parseSequenceTermWithIf)), ([mut, name, equals, value])=>{
    return {
        kind: "mutable-definition",
        name: name.value,
        value,
        location: mut.location
    };
});
// --- Mutation ---
const parseMutation = _combinators.map(_combinators.seq(_combinators.keyword("mut!"), _combinators.identifier(), _combinators.operator("="), _combinators.lazy(()=>parseSequenceTermWithIf)), ([mut, name, equals, value])=>{
    return {
        kind: "mutation",
        target: name.value,
        value,
        location: mut.location
    };
});
// Custom parser for where clause definitions (both regular and mutable)
const parseWhereDefinition = (tokens)=>{
    // Try mutable definition first
    const mutableResult = parseMutableDefinition(tokens);
    if (mutableResult.success) {
        return mutableResult;
    }
    // Try regular definition
    const regularResult = parseDefinition(tokens);
    if (regularResult.success) {
        return regularResult;
    }
    return {
        success: false,
        error: "Expected definition in where clause",
        position: tokens[0]?.location.start.line || 0
    };
};
// --- ADT Constructor ---
const parseConstructor = _combinators.map(_combinators.seq(parseTypeName, _combinators.many(_combinators.lazy(()=>parseTypeExpression))), ([name, args])=>({
        name: name.value,
        args,
        location: (0, _ast.createLocation)(name.location.start, name.location.end)
    }));
// --- Type Definition ---
const parseTypeDefinition = _combinators.map(_combinators.seq(_combinators.keyword("type"), parseTypeName, _combinators.many(_combinators.identifier()), _combinators.operator("="), _combinators.sepBy(parseConstructor, _combinators.operator("|"))), ([type, name, typeParams, equals, constructors])=>({
        kind: "type-definition",
        name: name.value,
        typeParams: typeParams.map((p)=>p.value),
        constructors,
        location: (0, _ast.createLocation)(type.location.start, constructors[constructors.length - 1]?.location.end || equals.location.end)
    }));
// --- Constraint Function ---
const parseConstraintFunction = _combinators.map(_combinators.seq(_combinators.identifier(), _combinators.many(_combinators.identifier()), _combinators.punctuation(":"), _combinators.lazy(()=>parseTypeExpression)), ([name, typeParams, colon, type])=>({
        name: name.value,
        typeParams: typeParams.map((p)=>p.value),
        type,
        location: (0, _ast.createLocation)(name.location.start, colon.location.end)
    }));
// --- Constraint Definition ---
const parseConstraintDefinition = _combinators.map(_combinators.seq(_combinators.keyword("constraint"), _combinators.identifier(), _combinators.identifier(), _combinators.punctuation("("), _combinators.sepBy(parseConstraintFunction, _combinators.punctuation(";")), _combinators.punctuation(")")), ([constraintKeyword, name, typeParam, openParen, functions, closeParen])=>({
        kind: "constraint-definition",
        name: name.value,
        typeParam: typeParam.value,
        functions,
        location: (0, _ast.createLocation)(constraintKeyword.location.start, closeParen.location.end)
    }));
// --- Implementation Function ---
const parseImplementationFunction = _combinators.map(_combinators.seq(_combinators.identifier(), _combinators.operator("="), _combinators.lazy(()=>parseSequenceTerm)), ([name, equals, value])=>({
        name: name.value,
        value,
        location: (0, _ast.createLocation)(name.location.start, value.location.end)
    }));
// --- Implement Definition ---
const parseImplementDefinition = _combinators.map(_combinators.seq(_combinators.keyword("implement"), _combinators.identifier(), parseTypeName, _combinators.punctuation("("), _combinators.sepBy(parseImplementationFunction, _combinators.punctuation(";")), _combinators.punctuation(")")), ([implementKeyword, constraintName, typeName, openParen, implementations, closeParen])=>({
        kind: "implement-definition",
        constraintName: constraintName.value,
        typeName: typeName.value,
        implementations,
        location: (0, _ast.createLocation)(implementKeyword.location.start, closeParen.location.end)
    }));
// --- Pattern Parsing ---
// Basic pattern parsing for constructor arguments (no nested constructors with args)
const parseBasicPattern = _combinators.choice(// Wildcard pattern: _
_combinators.map(_combinators.punctuation("_"), (underscore)=>({
        kind: "wildcard",
        location: underscore.location
    })), // Literal pattern: number or string
_combinators.map(_combinators.number(), (num)=>({
        kind: "literal",
        value: parseInt(num.value),
        location: num.location
    })), _combinators.map(_combinators.string(), (str)=>({
        kind: "literal",
        value: str.value,
        location: str.location
    })), // Constructor or variable pattern: identifier (decide based on capitalization)
_combinators.map(_combinators.identifier(), (name)=>{
    // If identifier starts with uppercase, treat as constructor pattern (zero args)
    if (name.value.length > 0 && name.value[0] >= "A" && name.value[0] <= "Z") {
        return {
            kind: "constructor",
            name: name.value,
            args: [],
            location: name.location
        };
    } else {
        // Otherwise, treat as variable pattern
        return {
            kind: "variable",
            name: name.value,
            location: name.location
        };
    }
}));
const parsePattern = _combinators.choice(// Wildcard pattern: _
_combinators.map(_combinators.punctuation("_"), (underscore)=>({
        kind: "wildcard",
        location: underscore.location
    })), // Constructor pattern with arguments: Some x y
_combinators.map(_combinators.seq(_combinators.identifier(), _combinators.many1(parseBasicPattern)), ([name, args])=>({
        kind: "constructor",
        name: name.value,
        args,
        location: (0, _ast.createLocation)(name.location.start, args[args.length - 1].location.end)
    })), // Constructor pattern with parenthesized arguments: Wrap (Value n)
_combinators.map(_combinators.seq(_combinators.identifier(), _combinators.punctuation("("), _combinators.lazy(()=>parsePattern), _combinators.punctuation(")")), ([name, openParen, arg, closeParen])=>({
        kind: "constructor",
        name: name.value,
        args: [
            arg
        ],
        location: (0, _ast.createLocation)(name.location.start, closeParen.location.end)
    })), // Constructor or variable pattern: identifier (decide based on capitalization)
_combinators.map(_combinators.identifier(), (name)=>{
    // If identifier starts with uppercase, treat as constructor pattern
    if (name.value.length > 0 && name.value[0] >= "A" && name.value[0] <= "Z") {
        return {
            kind: "constructor",
            name: name.value,
            args: [],
            location: name.location
        };
    } else {
        // Otherwise, treat as variable pattern
        return {
            kind: "variable",
            name: name.value,
            location: name.location
        };
    }
}));
// --- Match Case Expression Parser ---
// This parser supports expressions in match cases, including nested match expressions
const parseMatchCaseExpression = _combinators.choice(_combinators.lazy(()=>parseMatchExpression), parseIfExpression, _combinators.lazy(()=>parseExprWithType) // Support all other expressions including type annotations
);
// --- Match Case ---
const parseMatchCase = _combinators.map(_combinators.seq(parsePattern, _combinators.operator("=>"), _combinators.lazy(()=>parseMatchCaseExpression) // Use dedicated parser for match case expressions
), ([pattern, arrow, expression])=>({
        pattern,
        expression,
        location: (0, _ast.createLocation)(pattern.location.start, expression.location.end)
    }));
// --- Match Expression ---
const parseMatchExpression = _combinators.map(_combinators.seq(_combinators.keyword("match"), _combinators.lazy(()=>parseThrush), _combinators.keyword("with"), _combinators.punctuation("("), _combinators.sepBy(parseMatchCase, _combinators.punctuation(";")), _combinators.punctuation(")")), ([match, expression, with_, openParen, cases, closeParen])=>({
        kind: "match",
        expression,
        cases,
        location: (0, _ast.createLocation)(match.location.start, closeParen.location.end)
    }));
// --- Where Expression ---
const parseWhereExpression = _combinators.map(_combinators.seq(_combinators.lazy(()=>parseSequenceTermWithIfExceptRecord), _combinators.keyword("where"), _combinators.punctuation("("), _combinators.sepBy(parseWhereDefinition, _combinators.punctuation(";")), _combinators.punctuation(")")), ([main, where, openParen, definitions, closeParen])=>{
    return {
        kind: "where",
        main,
        definitions,
        location: main.location
    };
});
// --- Sequence term: everything else ---
const parseSequenceTerm = _combinators.choice(// Parse keyword-based expressions first to avoid identifier conflicts
parseMatchExpression, parseTypeDefinition, parseConstraintDefinition, parseImplementDefinition, parseMutableDefinition, parseMutation, parseImportExpression, parseIfAfterDollar, // Then parse identifier-based expressions
parseDefinitionWithType, parseDefinition, parseWhereExpression, parseThrush, parseRecord, parseThrush, parseLambdaExpression);
// Version without records to avoid circular dependency
const parseSequenceTermExceptRecord = _combinators.choice(// Parse keyword-based expressions first
parseMatchExpression, parseTypeDefinition, parseConstraintDefinition, parseImplementDefinition, parseMutableDefinition, parseMutation, parseImportExpression, // Then identifier-based expressions
parseDefinition, parseThrush, parseLambdaExpression, parseNumber, parseString, parseIdentifier, parseList, parseAccessor, parseParenExpr);
// parseSequenceTerm now includes parseIfExpression
const parseSequenceTermWithIf = parseSequenceTerm;
// Version with if but without records to avoid circular dependency
const parseSequenceTermWithIfExceptRecord = _combinators.choice(parseSequenceTermExceptRecord, parseIfExpression);
// --- Parse atomic constraint ---
const parseAtomicConstraint = _combinators.choice(// Parenthesized constraint
_combinators.map(_combinators.seq(_combinators.punctuation("("), _combinators.lazy(()=>parseConstraintExpr), _combinators.punctuation(")")), ([open, expr, close])=>({
        kind: "paren",
        expr
    })), // a is Collection
_combinators.map(_combinators.seq(_combinators.identifier(), _combinators.keyword("is"), _combinators.choice(_combinators.identifier())), ([typeVar, isKeyword, constraint])=>({
        kind: "is",
        typeVar: typeVar.value,
        constraint: constraint.value
    })), // a has field "name" of type T
_combinators.map(_combinators.seq(_combinators.identifier(), _combinators.keyword("has"), _combinators.keyword("field"), _combinators.string(), _combinators.keyword("of"), _combinators.keyword("type"), _combinators.lazy(()=>parseTypeExpression)), ([typeVar, has, field, fieldName, of, type, fieldType])=>({
        kind: "hasField",
        typeVar: typeVar.value,
        field: fieldName.value,
        fieldType
    })), // a implements Interface
_combinators.map(_combinators.seq(_combinators.identifier(), _combinators.keyword("implements"), _combinators.identifier()), ([typeVar, implementsKeyword, interfaceName])=>({
        kind: "implements",
        typeVar: typeVar.value,
        interfaceName: interfaceName.value
    })));
// --- Parse constraint expression with precedence: and > or ---
const parseConstraintExpr = (tokens)=>{
    // Parse left side (and chains)
    let leftResult = parseConstraintAnd(tokens);
    if (!leftResult.success) return leftResult;
    let left = leftResult.value;
    let rest = leftResult.remaining;
    // Parse or chains
    while(rest.length > 0 && rest[0].type === "KEYWORD" && rest[0].value === "or"){
        rest = rest.slice(1);
        const rightResult = parseConstraintAnd(rest);
        if (!rightResult.success) return rightResult;
        left = {
            kind: "or",
            left,
            right: rightResult.value
        };
        rest = rightResult.remaining;
    }
    return {
        success: true,
        value: left,
        remaining: rest
    };
};
const parseConstraintAnd = (tokens)=>{
    let leftResult = parseAtomicConstraint(tokens);
    if (!leftResult.success) return leftResult;
    let left = leftResult.value;
    let rest = leftResult.remaining;
    while(rest.length > 0 && rest[0].type === "KEYWORD" && rest[0].value === "and"){
        rest = rest.slice(1);
        const rightResult = parseAtomicConstraint(rest);
        if (!rightResult.success) return rightResult;
        left = {
            kind: "and",
            left,
            right: rightResult.value
        };
        rest = rightResult.remaining;
    }
    return {
        success: true,
        value: left,
        remaining: rest
    };
};
// --- Expression with type annotation (just above semicolon) ---
const parseExprWithType = _combinators.choice(// Expression with type and constraints: expr : type given constraintExpr
_combinators.map(_combinators.seq(parseThrush, _combinators.punctuation(":"), _combinators.lazy(()=>parseTypeExpression), _combinators.keyword("given"), parseConstraintExpr), ([expr, colon, type, given, constraint])=>({
        kind: "constrained",
        expression: expr,
        type,
        constraint,
        location: expr.location
    })), // Expression with just type: expr : type
_combinators.map(_combinators.seq(parseThrush, _combinators.punctuation(":"), _combinators.lazy(()=>parseTypeExpression)), ([expr, colon, type])=>({
        kind: "typed",
        expression: expr,
        type,
        location: expr.location
    })), parseThrush // Fallback to regular expressions
);
// --- Sequence (semicolon) ---
// Accepts a sequence of definitions and/or expressions, separated by semicolons
const parseSequence = _combinators.map(_combinators.seq(_combinators.lazy(()=>parseSequenceTermWithIf), _combinators.many(_combinators.seq(_combinators.punctuation(";"), _combinators.lazy(()=>parseSequenceTermWithIf)))), ([left, rest])=>{
    let result = left;
    for (const [op, right] of rest){
        result = {
            kind: "binary",
            operator: ";",
            left: result,
            right,
            location: result.location
        };
    }
    return result;
});
// --- Expression (top-level) ---
const parseExpr = parseSequence;
const parse = (tokens)=>{
    // Filter out EOF tokens for parsing
    const nonEOFTokens = tokens.filter((t)=>t.type !== "EOF");
    // Parse multiple top-level expressions separated by semicolons
    let statements = [];
    let rest = nonEOFTokens;
    while(rest.length > 0){
        // Skip leading semicolons
        while(rest.length > 0 && rest[0].type === "PUNCTUATION" && rest[0].value === ";"){
            rest = rest.slice(1);
        }
        if (rest.length === 0) break;
        const result = parseExpr(rest);
        if (!result.success) {
            // Include line and column information in parse error
            const errorLocation = result.position > 0 ? ` at line ${result.position}` : "";
            throw new Error(`Parse error: ${result.error}${errorLocation}`);
        }
        statements.push(result.value);
        rest = result.remaining;
        // Skip trailing semicolons after each statement
        while(rest.length > 0 && rest[0].type === "PUNCTUATION" && rest[0].value === ";"){
            rest = rest.slice(1);
        }
    }
    // If there are still leftover tokens that aren't semicolons or EOF, throw an error
    if (rest.length > 0) {
        const next = rest[0];
        throw new Error(`Unexpected token after expression: ${next.type} '${next.value}' at line ${next.location.start.line}, column ${next.location.start.column}`);
    }
    return {
        statements,
        location: (0, _ast.createLocation)({
            line: 1,
            column: 1
        }, {
            line: 1,
            column: 1
        })
    };
};

//# sourceMappingURL=data:application/json;base64,