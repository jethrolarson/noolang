{"version":3,"sources":["/workspace/test/record_tuple_unit.test.ts"],"sourcesContent":["import { Lexer } from \"../src/lexer\";\nimport { parse } from \"../src/parser/parser\";\n\ndescribe(\"Records, Tuples, and Unit\", () => {\n  function parseNoo(src: string) {\n    const lexer = new Lexer(src);\n    const tokens = lexer.tokenize();\n    return parse(tokens);\n  }\n\n  test(\"parses named record\", () => {\n    const program = parseNoo(\"{ @a 1, @b 2 }\");\n    const record = program.statements[0];\n    expect(record.kind).toBe(\"record\");\n    if (record.kind === \"record\") {\n      expect(record.fields).toEqual([\n        { name: \"a\", value: expect.anything() },\n        { name: \"b\", value: expect.anything() },\n      ]);\n    }\n  });\n\n  test(\"parses tuple (nameless record)\", () => {\n    const program = parseNoo(\"{ 1, 2 }\");\n    const tuple = program.statements[0];\n    expect(tuple.kind).toBe(\"tuple\");\n    if (tuple.kind === \"tuple\") {\n      expect(tuple.elements.length).toBe(2);\n      expect(tuple.elements[0]).toEqual(expect.anything());\n      expect(tuple.elements[1]).toEqual(expect.anything());\n    }\n  });\n\n  test(\"parses unit (empty braces)\", () => {\n    const program = parseNoo(\"{ }\");\n    const unit = program.statements[0];\n    expect(unit.kind).toBe(\"unit\");\n  });\n\n  test(\"throws on mixed named and positional fields\", () => {\n    expect(() => parseNoo(\"{ 1, @a 2 }\")).toThrow();\n    expect(() => parseNoo(\"{ @a 2, 1 }\")).toThrow();\n  });\n});\n"],"names":["describe","parseNoo","src","lexer","Lexer","tokens","tokenize","parse","test","program","record","statements","expect","kind","toBe","fields","toEqual","name","value","anything","tuple","elements","length","unit","toThrow"],"mappings":";;;;uBAAsB;wBACA;AAEtBA,SAAS,6BAA6B;IACpC,SAASC,SAASC,GAAW;QAC3B,MAAMC,QAAQ,IAAIC,YAAK,CAACF;QACxB,MAAMG,SAASF,MAAMG,QAAQ;QAC7B,OAAOC,IAAAA,aAAK,EAACF;IACf;IAEAG,KAAK,uBAAuB;QAC1B,MAAMC,UAAUR,SAAS;QACzB,MAAMS,SAASD,QAAQE,UAAU,CAAC,EAAE;QACpCC,OAAOF,OAAOG,IAAI,EAAEC,IAAI,CAAC;QACzB,IAAIJ,OAAOG,IAAI,KAAK,UAAU;YAC5BD,OAAOF,OAAOK,MAAM,EAAEC,OAAO,CAAC;gBAC5B;oBAAEC,MAAM;oBAAKC,OAAON,OAAOO,QAAQ;gBAAG;gBACtC;oBAAEF,MAAM;oBAAKC,OAAON,OAAOO,QAAQ;gBAAG;aACvC;QACH;IACF;IAEAX,KAAK,kCAAkC;QACrC,MAAMC,UAAUR,SAAS;QACzB,MAAMmB,QAAQX,QAAQE,UAAU,CAAC,EAAE;QACnCC,OAAOQ,MAAMP,IAAI,EAAEC,IAAI,CAAC;QACxB,IAAIM,MAAMP,IAAI,KAAK,SAAS;YAC1BD,OAAOQ,MAAMC,QAAQ,CAACC,MAAM,EAAER,IAAI,CAAC;YACnCF,OAAOQ,MAAMC,QAAQ,CAAC,EAAE,EAAEL,OAAO,CAACJ,OAAOO,QAAQ;YACjDP,OAAOQ,MAAMC,QAAQ,CAAC,EAAE,EAAEL,OAAO,CAACJ,OAAOO,QAAQ;QACnD;IACF;IAEAX,KAAK,8BAA8B;QACjC,MAAMC,UAAUR,SAAS;QACzB,MAAMsB,OAAOd,QAAQE,UAAU,CAAC,EAAE;QAClCC,OAAOW,KAAKV,IAAI,EAAEC,IAAI,CAAC;IACzB;IAEAN,KAAK,+CAA+C;QAClDI,OAAO,IAAMX,SAAS,gBAAgBuB,OAAO;QAC7CZ,OAAO,IAAMX,SAAS,gBAAgBuB,OAAO;IAC/C;AACF"}