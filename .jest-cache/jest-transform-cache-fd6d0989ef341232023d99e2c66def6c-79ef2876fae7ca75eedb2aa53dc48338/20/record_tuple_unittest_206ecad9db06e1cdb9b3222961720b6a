aacb4f57e5154f55bbac8ce351f402b0
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _lexer = require("../src/lexer");
const _parser = require("../src/parser/parser");
describe("Records, Tuples, and Unit", ()=>{
    function parseNoo(src) {
        const lexer = new _lexer.Lexer(src);
        const tokens = lexer.tokenize();
        return (0, _parser.parse)(tokens);
    }
    test("parses named record", ()=>{
        const program = parseNoo("{ @a 1, @b 2 }");
        const record = program.statements[0];
        expect(record.kind).toBe("record");
        if (record.kind === "record") {
            expect(record.fields).toEqual([
                {
                    name: "a",
                    value: expect.anything()
                },
                {
                    name: "b",
                    value: expect.anything()
                }
            ]);
        }
    });
    test("parses tuple (nameless record)", ()=>{
        const program = parseNoo("{ 1, 2 }");
        const tuple = program.statements[0];
        expect(tuple.kind).toBe("tuple");
        if (tuple.kind === "tuple") {
            expect(tuple.elements.length).toBe(2);
            expect(tuple.elements[0]).toEqual(expect.anything());
            expect(tuple.elements[1]).toEqual(expect.anything());
        }
    });
    test("parses unit (empty braces)", ()=>{
        const program = parseNoo("{ }");
        const unit = program.statements[0];
        expect(unit.kind).toBe("unit");
    });
    test("throws on mixed named and positional fields", ()=>{
        expect(()=>parseNoo("{ 1, @a 2 }")).toThrow();
        expect(()=>parseNoo("{ @a 2, 1 }")).toThrow();
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2UvdGVzdC9yZWNvcmRfdHVwbGVfdW5pdC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExleGVyIH0gZnJvbSBcIi4uL3NyYy9sZXhlclwiO1xuaW1wb3J0IHsgcGFyc2UgfSBmcm9tIFwiLi4vc3JjL3BhcnNlci9wYXJzZXJcIjtcblxuZGVzY3JpYmUoXCJSZWNvcmRzLCBUdXBsZXMsIGFuZCBVbml0XCIsICgpID0+IHtcbiAgZnVuY3Rpb24gcGFyc2VOb28oc3JjOiBzdHJpbmcpIHtcbiAgICBjb25zdCBsZXhlciA9IG5ldyBMZXhlcihzcmMpO1xuICAgIGNvbnN0IHRva2VucyA9IGxleGVyLnRva2VuaXplKCk7XG4gICAgcmV0dXJuIHBhcnNlKHRva2Vucyk7XG4gIH1cblxuICB0ZXN0KFwicGFyc2VzIG5hbWVkIHJlY29yZFwiLCAoKSA9PiB7XG4gICAgY29uc3QgcHJvZ3JhbSA9IHBhcnNlTm9vKFwieyBAYSAxLCBAYiAyIH1cIik7XG4gICAgY29uc3QgcmVjb3JkID0gcHJvZ3JhbS5zdGF0ZW1lbnRzWzBdO1xuICAgIGV4cGVjdChyZWNvcmQua2luZCkudG9CZShcInJlY29yZFwiKTtcbiAgICBpZiAocmVjb3JkLmtpbmQgPT09IFwicmVjb3JkXCIpIHtcbiAgICAgIGV4cGVjdChyZWNvcmQuZmllbGRzKS50b0VxdWFsKFtcbiAgICAgICAgeyBuYW1lOiBcImFcIiwgdmFsdWU6IGV4cGVjdC5hbnl0aGluZygpIH0sXG4gICAgICAgIHsgbmFtZTogXCJiXCIsIHZhbHVlOiBleHBlY3QuYW55dGhpbmcoKSB9LFxuICAgICAgXSk7XG4gICAgfVxuICB9KTtcblxuICB0ZXN0KFwicGFyc2VzIHR1cGxlIChuYW1lbGVzcyByZWNvcmQpXCIsICgpID0+IHtcbiAgICBjb25zdCBwcm9ncmFtID0gcGFyc2VOb28oXCJ7IDEsIDIgfVwiKTtcbiAgICBjb25zdCB0dXBsZSA9IHByb2dyYW0uc3RhdGVtZW50c1swXTtcbiAgICBleHBlY3QodHVwbGUua2luZCkudG9CZShcInR1cGxlXCIpO1xuICAgIGlmICh0dXBsZS5raW5kID09PSBcInR1cGxlXCIpIHtcbiAgICAgIGV4cGVjdCh0dXBsZS5lbGVtZW50cy5sZW5ndGgpLnRvQmUoMik7XG4gICAgICBleHBlY3QodHVwbGUuZWxlbWVudHNbMF0pLnRvRXF1YWwoZXhwZWN0LmFueXRoaW5nKCkpO1xuICAgICAgZXhwZWN0KHR1cGxlLmVsZW1lbnRzWzFdKS50b0VxdWFsKGV4cGVjdC5hbnl0aGluZygpKTtcbiAgICB9XG4gIH0pO1xuXG4gIHRlc3QoXCJwYXJzZXMgdW5pdCAoZW1wdHkgYnJhY2VzKVwiLCAoKSA9PiB7XG4gICAgY29uc3QgcHJvZ3JhbSA9IHBhcnNlTm9vKFwieyB9XCIpO1xuICAgIGNvbnN0IHVuaXQgPSBwcm9ncmFtLnN0YXRlbWVudHNbMF07XG4gICAgZXhwZWN0KHVuaXQua2luZCkudG9CZShcInVuaXRcIik7XG4gIH0pO1xuXG4gIHRlc3QoXCJ0aHJvd3Mgb24gbWl4ZWQgbmFtZWQgYW5kIHBvc2l0aW9uYWwgZmllbGRzXCIsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4gcGFyc2VOb28oXCJ7IDEsIEBhIDIgfVwiKSkudG9UaHJvdygpO1xuICAgIGV4cGVjdCgoKSA9PiBwYXJzZU5vbyhcInsgQGEgMiwgMSB9XCIpKS50b1Rocm93KCk7XG4gIH0pO1xufSk7XG4iXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJwYXJzZU5vbyIsInNyYyIsImxleGVyIiwiTGV4ZXIiLCJ0b2tlbnMiLCJ0b2tlbml6ZSIsInBhcnNlIiwidGVzdCIsInByb2dyYW0iLCJyZWNvcmQiLCJzdGF0ZW1lbnRzIiwiZXhwZWN0Iiwia2luZCIsInRvQmUiLCJmaWVsZHMiLCJ0b0VxdWFsIiwibmFtZSIsInZhbHVlIiwiYW55dGhpbmciLCJ0dXBsZSIsImVsZW1lbnRzIiwibGVuZ3RoIiwidW5pdCIsInRvVGhyb3ciXSwibWFwcGluZ3MiOiI7Ozs7dUJBQXNCO3dCQUNBO0FBRXRCQSxTQUFTLDZCQUE2QjtJQUNwQyxTQUFTQyxTQUFTQyxHQUFXO1FBQzNCLE1BQU1DLFFBQVEsSUFBSUMsWUFBSyxDQUFDRjtRQUN4QixNQUFNRyxTQUFTRixNQUFNRyxRQUFRO1FBQzdCLE9BQU9DLElBQUFBLGFBQUssRUFBQ0Y7SUFDZjtJQUVBRyxLQUFLLHVCQUF1QjtRQUMxQixNQUFNQyxVQUFVUixTQUFTO1FBQ3pCLE1BQU1TLFNBQVNELFFBQVFFLFVBQVUsQ0FBQyxFQUFFO1FBQ3BDQyxPQUFPRixPQUFPRyxJQUFJLEVBQUVDLElBQUksQ0FBQztRQUN6QixJQUFJSixPQUFPRyxJQUFJLEtBQUssVUFBVTtZQUM1QkQsT0FBT0YsT0FBT0ssTUFBTSxFQUFFQyxPQUFPLENBQUM7Z0JBQzVCO29CQUFFQyxNQUFNO29CQUFLQyxPQUFPTixPQUFPTyxRQUFRO2dCQUFHO2dCQUN0QztvQkFBRUYsTUFBTTtvQkFBS0MsT0FBT04sT0FBT08sUUFBUTtnQkFBRzthQUN2QztRQUNIO0lBQ0Y7SUFFQVgsS0FBSyxrQ0FBa0M7UUFDckMsTUFBTUMsVUFBVVIsU0FBUztRQUN6QixNQUFNbUIsUUFBUVgsUUFBUUUsVUFBVSxDQUFDLEVBQUU7UUFDbkNDLE9BQU9RLE1BQU1QLElBQUksRUFBRUMsSUFBSSxDQUFDO1FBQ3hCLElBQUlNLE1BQU1QLElBQUksS0FBSyxTQUFTO1lBQzFCRCxPQUFPUSxNQUFNQyxRQUFRLENBQUNDLE1BQU0sRUFBRVIsSUFBSSxDQUFDO1lBQ25DRixPQUFPUSxNQUFNQyxRQUFRLENBQUMsRUFBRSxFQUFFTCxPQUFPLENBQUNKLE9BQU9PLFFBQVE7WUFDakRQLE9BQU9RLE1BQU1DLFFBQVEsQ0FBQyxFQUFFLEVBQUVMLE9BQU8sQ0FBQ0osT0FBT08sUUFBUTtRQUNuRDtJQUNGO0lBRUFYLEtBQUssOEJBQThCO1FBQ2pDLE1BQU1DLFVBQVVSLFNBQVM7UUFDekIsTUFBTXNCLE9BQU9kLFFBQVFFLFVBQVUsQ0FBQyxFQUFFO1FBQ2xDQyxPQUFPVyxLQUFLVixJQUFJLEVBQUVDLElBQUksQ0FBQztJQUN6QjtJQUVBTixLQUFLLCtDQUErQztRQUNsREksT0FBTyxJQUFNWCxTQUFTLGdCQUFnQnVCLE9BQU87UUFDN0NaLE9BQU8sSUFBTVgsU0FBUyxnQkFBZ0J1QixPQUFPO0lBQy9DO0FBQ0YifQ==