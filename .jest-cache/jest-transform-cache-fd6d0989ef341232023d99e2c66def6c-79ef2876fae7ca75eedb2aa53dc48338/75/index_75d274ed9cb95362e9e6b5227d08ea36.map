{"version":3,"sources":["/workspace/src/typer/index.ts"],"sourcesContent":["import { type Program, type Type, unitType, type Effect } from '../ast';\nimport { formatTypeError, createTypeError } from './type-errors';\nimport { typeToString } from './helpers';\nimport { type TypeState, type TypeResult, createPureTypeResult, unionEffects } from './types';\nimport { satisfiesConstraint, validateAllSubstitutionConstraints } from './constraints';\nimport { substitute } from './substitute';\nimport { createTypeState, loadStdlib } from './type-operations';\nimport { typeExpression } from './expression-dispatcher';\nimport { typeAndDecorate } from './decoration';\nimport { initializeBuiltins } from './builtins';\n\n// Re-export TypeResult and effect helpers from types module\nexport { \n\ttype TypeResult,\n\temptyEffects,\n\tsingleEffect,\n\tunionEffects,\n\tcreateTypeResult,\n\tcreatePureTypeResult\n} from './types';\n\n// Re-export createTypeState from type-operations module\nexport { createTypeState, cleanSubstitutions } from './type-operations';\n\n// Re-export freshTypeVariable from type-operations module\nexport { freshTypeVariable } from './type-operations';\n\n\n// Re-export freeTypeVars from type-operations module\nexport { freeTypeVars } from './type-operations';\n\n// Re-export freeTypeVarsEnv from type-operations module\nexport { freeTypeVarsEnv } from './type-operations';\n\n// Re-export generalize from type-operations module\nexport { generalize } from './type-operations';\n\n// Re-export instantiate from type-operations module\nexport { instantiate } from './type-operations';\n\n// Re-export freshenTypeVariables from type-operations module\nexport { freshenTypeVariables } from './type-operations';\n\n\n// Re-export loadStdlib from type-operations module\nexport { loadStdlib } from './type-operations';\n\n// Re-export typeExpression from expression-dispatcher module\nexport { typeExpression } from './expression-dispatcher';\n\n\n// Re-export type inference functions from their respective modules\nexport {\n\ttypeLiteral,\n\ttypeVariableExpr,\n\ttypeFunction,\n\ttypeDefinition,\n\ttypeIf,\n\ttypeBinary,\n\ttypeMutableDefinition,\n\ttypeMutation,\n\ttypeImport,\n\ttypeRecord,\n\ttypeAccessor,\n\ttypeTuple,\n\ttypeList,\n\ttypeWhere,\n\ttypeTyped,\n\ttypeConstrained,\n} from './type-inference';\n\nexport {\n\ttypeApplication,\n\ttypePipeline,\n} from './function-application';\n\nexport {\n\ttypeMatch,\n\ttypeTypeDefinition,\n} from './pattern-matching';\n\nexport {\n\ttypeAndDecorate,\n} from './decoration';\n\n// Re-export helper functions from their modules\nexport { validateAllSubstitutionConstraints } from './constraints';\n// Export the main program typing function\nexport const typeProgram = (program: Program): TypeResult => {\n\tlet state = createTypeState();\n\tstate = initializeBuiltins(state);\n\tstate = loadStdlib(state);\n\n\tlet finalType: Type | null = null;\n\tlet allEffects = new Set<Effect>();\n\n\tfor (const statement of program.statements) {\n\t\tconst result = typeExpression(statement, state);\n\t\tstate = result.state;\n\t\tfinalType = result.type;\n\t\tallEffects = unionEffects(allEffects, result.effects);\n\t}\n\n\tif (!finalType) {\n\t\tfinalType = unitType();\n\t}\n\n\treturn { type: finalType, effects: allEffects, state };\n};\n"],"names":["cleanSubstitutions","createPureTypeResult","createTypeResult","createTypeState","emptyEffects","freeTypeVars","freeTypeVarsEnv","freshTypeVariable","freshenTypeVariables","generalize","instantiate","loadStdlib","singleEffect","typeAccessor","typeAndDecorate","typeApplication","typeBinary","typeConstrained","typeDefinition","typeExpression","typeFunction","typeIf","typeImport","typeList","typeLiteral","typeMatch","typeMutableDefinition","typeMutation","typePipeline","typeProgram","typeRecord","typeTuple","typeTypeDefinition","typeTyped","typeVariableExpr","typeWhere","unionEffects","validateAllSubstitutionConstraints","program","state","initializeBuiltins","finalType","allEffects","Set","statement","statements","result","type","effects","unitType"],"mappings":";;;;;;;;;;;QAsB0BA;eAAAA,kCAAkB;;QAJ3CC;eAAAA,2BAAoB;;QADpBC;eAAAA,uBAAgB;;QAKRC;eAAAA,+BAAe;;QARvBC;eAAAA,mBAAY;;QAeJC;eAAAA,4BAAY;;QAGZC;eAAAA,+BAAe;;QAPfC;eAAAA,iCAAiB;;QAgBjBC;eAAAA,oCAAoB;;QANpBC;eAAAA,0BAAU;;QAGVC;eAAAA,2BAAW;;QAOXC;eAAAA,0BAAU;;QA9BlBC;eAAAA,mBAAY;;QAgDZC;eAAAA,2BAAY;;QAmBZC;eAAAA,2BAAe;;QAVfC;eAAAA,oCAAe;;QAdfC;eAAAA,yBAAU;;QAUVC;eAAAA,8BAAe;;QAZfC;eAAAA,6BAAc;;QARNC;eAAAA,oCAAc;;QAOtBC;eAAAA,2BAAY;;QAEZC;eAAAA,qBAAM;;QAINC;eAAAA,yBAAU;;QAIVC;eAAAA,uBAAQ;;QAZRC;eAAAA,0BAAW;;QAwBXC;eAAAA,0BAAS;;QAlBTC;eAAAA,oCAAqB;;QACrBC;eAAAA,2BAAY;;QAaZC;eAAAA,iCAAY;;QAeAC;eAAAA;;QA1BZC;eAAAA,yBAAU;;QAEVC;eAAAA,wBAAS;;QAcTC;eAAAA,mCAAkB;;QAXlBC;eAAAA,wBAAS;;QAbTC;eAAAA,+BAAgB;;QAYhBC;eAAAA,wBAAS;;QAlDTC;eAAAA,mBAAY;;QAsEJC;eAAAA,+CAAkC;;;qBAtFoB;uBAGqB;gCAGxC;sCACb;0BAEI;+BA4D5B;qCAKA;iCAKA;4BAIA;6BAG4C;AAE5C,MAAMR,cAAc,CAACS;IAC3B,IAAIC,QAAQpC,IAAAA,+BAAe;IAC3BoC,QAAQC,IAAAA,4BAAkB,EAACD;IAC3BA,QAAQ5B,IAAAA,0BAAU,EAAC4B;IAEnB,IAAIE,YAAyB;IAC7B,IAAIC,aAAa,IAAIC;IAErB,KAAK,MAAMC,aAAaN,QAAQO,UAAU,CAAE;QAC3C,MAAMC,SAAS3B,IAAAA,oCAAc,EAACyB,WAAWL;QACzCA,QAAQO,OAAOP,KAAK;QACpBE,YAAYK,OAAOC,IAAI;QACvBL,aAAaN,IAAAA,mBAAY,EAACM,YAAYI,OAAOE,OAAO;IACrD;IAEA,IAAI,CAACP,WAAW;QACfA,YAAYQ,IAAAA,aAAQ;IACrB;IAEA,OAAO;QAAEF,MAAMN;QAAWO,SAASN;QAAYH;IAAM;AACtD"}