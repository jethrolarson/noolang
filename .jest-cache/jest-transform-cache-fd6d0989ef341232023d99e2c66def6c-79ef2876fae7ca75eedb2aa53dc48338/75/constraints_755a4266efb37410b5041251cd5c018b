96449491710953c73a1b78b01d0a521d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get collectAllConstraintsForVar () {
        return collectAllConstraintsForVar;
    },
    get propagateConstraintToType () {
        return propagateConstraintToType;
    },
    get satisfiesConstraint () {
        return satisfiesConstraint;
    },
    get solveConstraint () {
        return solveConstraint;
    },
    get solveConstraints () {
        return solveConstraints;
    },
    get validateAllSubstitutionConstraints () {
        return validateAllSubstitutionConstraints;
    },
    get validateConstraintName () {
        return validateConstraintName;
    }
});
const _ast = require("../ast");
const _typeerrors = require("./type-errors");
const _substitute = require("./substitute");
const _helpers = require("./helpers");
const _unify = require("./unify");
const solveConstraints = (constraints, state, location)=>{
    let currentState = state;
    for (const constraint of constraints){
        currentState = solveConstraint(constraint, currentState, location);
    }
    return currentState;
};
const solveConstraint = (constraint, state, location)=>{
    switch(constraint.kind){
        case "is":
            return solveIsConstraint(constraint, state, location);
        case "hasField":
            return solveHasFieldConstraint(constraint, state, location);
        case "implements":
            return solveImplementsConstraint(constraint, state, location);
        case "custom":
            return solveCustomConstraint(constraint, state, location);
        default:
            return state;
    }
};
const solveIsConstraint = (constraint, state, location)=>{
    // Validate constraint name first
    validateConstraintName(constraint.constraint);
    const typeVar = (0, _substitute.substitute)((0, _ast.typeVariable)(constraint.typeVar), state.substitution);
    // If the type variable has been unified to a concrete type, check if it satisfies the constraint
    if (typeVar.kind !== "variable") {
        // Check if the concrete type satisfies the constraint
        if (!satisfiesConstraint(typeVar, constraint.constraint)) {
            throw new Error((0, _typeerrors.formatTypeError)((0, _typeerrors.createTypeError)(`Type ${(0, _helpers.typeToString)(typeVar, state.substitution)} does not satisfy constraint '${constraint.constraint}'. This often occurs when trying to use a partial function (one that can fail) in an unsafe context like function composition. Consider using total functions that return Option or Result types instead.`, {}, location || {
                line: 1,
                column: 1
            })));
        }
    } else {
        // For type variables, we need to track the constraint for later solving
        // Add the constraint to the type variable if it doesn't already have it
        if (!typeVar.constraints) {
            typeVar.constraints = [];
        }
        // Check if this constraint is already present
        const existingConstraint = typeVar.constraints.find((c)=>c.kind === "is" && c.typeVar === constraint.typeVar && c.constraint === constraint.constraint);
        if (!existingConstraint) {
            typeVar.constraints.push(constraint);
        }
    }
    return state;
};
const solveHasFieldConstraint = (constraint, state, location)=>{
    const typeVar = (0, _substitute.substitute)((0, _ast.typeVariable)(constraint.typeVar), state.substitution);
    if (typeVar.kind === "record") {
        // Check if the record has the required field with the right type
        if (!(constraint.field in typeVar.fields)) {
            throw new Error((0, _typeerrors.formatTypeError)((0, _typeerrors.createTypeError)(`Record type missing required field '${constraint.field}'`, {}, location || {
                line: 1,
                column: 1
            })));
        }
        // Unify the field type
        let newState = state;
        newState = (0, _unify.unify)(typeVar.fields[constraint.field], constraint.fieldType, newState, location);
        return newState;
    } else if (typeVar.kind === "variable") {
        // For type variables, we'll track the constraint for later solving
        return state;
    } else {
        throw new Error((0, _typeerrors.formatTypeError)((0, _typeerrors.createTypeError)(`Type ${(0, _helpers.typeToString)(typeVar, state.substitution)} cannot have fields`, {}, location || {
            line: 1,
            column: 1
        })));
    }
};
const solveImplementsConstraint = (constraint, state, location)=>{
    // For now, we'll just track the constraint
    // In a full implementation, we'd check if the type implements the interface
    return state;
};
const solveCustomConstraint = (constraint, state, location)=>{
    // For now, we'll just track the constraint
    // In a full implementation, we'd call the custom constraint solver
    return state;
};
const validateConstraintName = (constraint)=>{
    // All constraints are now meaningless type checks, so reject them all
    throw new Error(`Constraint '${constraint}' is not supported. Use hasField constraints for record typing instead.`);
};
const satisfiesConstraint = (type, constraint)=>{
    // All non-hasField constraints are meaningless, so they're not supported
    return false;
};
function propagateConstraintToType(type, constraint) {
    switch(type.kind){
        case "variable":
            type.constraints = type.constraints || [];
            if (!type.constraints.some((c)=>(0, _helpers.constraintsEqual)(c, constraint))) {
                type.constraints.push(constraint);
            } else {}
            break;
        case "function":
            for (const param of type.params){
                propagateConstraintToType(param, constraint);
            }
            propagateConstraintToType(type.return, constraint);
            break;
        case "list":
            propagateConstraintToType(type.element, constraint);
            break;
        case "tuple":
            for (const el of type.elements){
                propagateConstraintToType(el, constraint);
            }
            break;
        case "record":
            for (const fieldType of Object.values(type.fields)){
                propagateConstraintToType(fieldType, constraint);
            }
            break;
        case "union":
            for (const t of type.types){
                propagateConstraintToType(t, constraint);
            }
            break;
    }
}
function collectAllConstraintsForVar(varName, substitution) {
    const seen = new Set();
    let constraints = [];
    let currentVarName = varName;
    let currentType = substitution.get(currentVarName);
    while(currentType && (0, _helpers.isTypeKind)(currentType, "variable")){
        if (seen.has(currentVarName)) {
            break; // Prevent cycles
        }
        seen.add(currentVarName);
        if (currentType.constraints) {
            constraints = constraints.concat(currentType.constraints);
        }
        currentVarName = currentType.name;
        currentType = substitution.get(currentVarName);
    }
    // Also check the original variable
    const origType = substitution.get(varName);
    if (origType && (0, _helpers.isTypeKind)(origType, "variable") && origType.constraints) {
        constraints = constraints.concat(origType.constraints);
    }
    return constraints;
}
function validateAllSubstitutionConstraints(state) {
    for (const [varName, concreteType] of state.substitution.entries()){
        // Only check if the concreteType is not a variable
        if (concreteType.kind !== "variable") {
            // Collect all constraints from the substitution chain
            const constraintsToCheck = collectAllConstraintsForVar(varName, state.substitution);
            for (const constraint of constraintsToCheck){
                if (constraint.kind === "hasField" && (0, _helpers.isTypeKind)(concreteType, "record")) {
                    if (!(constraint.field in concreteType.fields)) {
                        throw new Error(`Record type missing required field '${constraint.field}'`);
                    }
                // Optionally, unify field types here if needed
                } else if (constraint.kind === "is") {
                    if (!satisfiesConstraint(concreteType, constraint.constraint)) {
                        throw new Error(`Type variable '${varName}' was unified to ${(0, _helpers.typeToString)(concreteType)} but does not satisfy constraint '${constraint.constraint}'. This typically means a partial function is being used in an unsafe context. Consider using total functions that return Option or Result types instead of partial functions with constraints.`);
                    }
                }
            }
        }
    }
}

//# sourceMappingURL=data:application/json;base64,