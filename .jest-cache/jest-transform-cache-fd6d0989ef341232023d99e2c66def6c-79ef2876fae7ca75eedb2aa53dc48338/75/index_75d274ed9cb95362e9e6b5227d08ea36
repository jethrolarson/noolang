ae71de807fe3748490af95db4f9cbf70
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get cleanSubstitutions () {
        return _typeoperations.cleanSubstitutions;
    },
    get createPureTypeResult () {
        return _types.createPureTypeResult;
    },
    get createTypeResult () {
        return _types.createTypeResult;
    },
    get createTypeState () {
        return _typeoperations.createTypeState;
    },
    get emptyEffects () {
        return _types.emptyEffects;
    },
    get freeTypeVars () {
        return _typeoperations.freeTypeVars;
    },
    get freeTypeVarsEnv () {
        return _typeoperations.freeTypeVarsEnv;
    },
    get freshTypeVariable () {
        return _typeoperations.freshTypeVariable;
    },
    get freshenTypeVariables () {
        return _typeoperations.freshenTypeVariables;
    },
    get generalize () {
        return _typeoperations.generalize;
    },
    get instantiate () {
        return _typeoperations.instantiate;
    },
    get loadStdlib () {
        return _typeoperations.loadStdlib;
    },
    get singleEffect () {
        return _types.singleEffect;
    },
    get typeAccessor () {
        return _typeinference.typeAccessor;
    },
    get typeAndDecorate () {
        return _decoration.typeAndDecorate;
    },
    get typeApplication () {
        return _functionapplication.typeApplication;
    },
    get typeBinary () {
        return _typeinference.typeBinary;
    },
    get typeConstrained () {
        return _typeinference.typeConstrained;
    },
    get typeDefinition () {
        return _typeinference.typeDefinition;
    },
    get typeExpression () {
        return _expressiondispatcher.typeExpression;
    },
    get typeFunction () {
        return _typeinference.typeFunction;
    },
    get typeIf () {
        return _typeinference.typeIf;
    },
    get typeImport () {
        return _typeinference.typeImport;
    },
    get typeList () {
        return _typeinference.typeList;
    },
    get typeLiteral () {
        return _typeinference.typeLiteral;
    },
    get typeMatch () {
        return _patternmatching.typeMatch;
    },
    get typeMutableDefinition () {
        return _typeinference.typeMutableDefinition;
    },
    get typeMutation () {
        return _typeinference.typeMutation;
    },
    get typePipeline () {
        return _functionapplication.typePipeline;
    },
    get typeProgram () {
        return typeProgram;
    },
    get typeRecord () {
        return _typeinference.typeRecord;
    },
    get typeTuple () {
        return _typeinference.typeTuple;
    },
    get typeTypeDefinition () {
        return _patternmatching.typeTypeDefinition;
    },
    get typeTyped () {
        return _typeinference.typeTyped;
    },
    get typeVariableExpr () {
        return _typeinference.typeVariableExpr;
    },
    get typeWhere () {
        return _typeinference.typeWhere;
    },
    get unionEffects () {
        return _types.unionEffects;
    },
    get validateAllSubstitutionConstraints () {
        return _constraints.validateAllSubstitutionConstraints;
    }
});
const _ast = require("../ast");
const _types = require("./types");
const _typeoperations = require("./type-operations");
const _expressiondispatcher = require("./expression-dispatcher");
const _builtins = require("./builtins");
const _typeinference = require("./type-inference");
const _functionapplication = require("./function-application");
const _patternmatching = require("./pattern-matching");
const _decoration = require("./decoration");
const _constraints = require("./constraints");
const typeProgram = (program)=>{
    let state = (0, _typeoperations.createTypeState)();
    state = (0, _builtins.initializeBuiltins)(state);
    state = (0, _typeoperations.loadStdlib)(state);
    let finalType = null;
    let allEffects = new Set();
    for (const statement of program.statements){
        const result = (0, _expressiondispatcher.typeExpression)(statement, state);
        state = result.state;
        finalType = result.type;
        allEffects = (0, _types.unionEffects)(allEffects, result.effects);
    }
    if (!finalType) {
        finalType = (0, _ast.unitType)();
    }
    return {
        type: finalType,
        effects: allEffects,
        state
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2Uvc3JjL3R5cGVyL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHR5cGUgUHJvZ3JhbSwgdHlwZSBUeXBlLCB1bml0VHlwZSwgdHlwZSBFZmZlY3QgfSBmcm9tICcuLi9hc3QnO1xuaW1wb3J0IHsgZm9ybWF0VHlwZUVycm9yLCBjcmVhdGVUeXBlRXJyb3IgfSBmcm9tICcuL3R5cGUtZXJyb3JzJztcbmltcG9ydCB7IHR5cGVUb1N0cmluZyB9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgeyB0eXBlIFR5cGVTdGF0ZSwgdHlwZSBUeXBlUmVzdWx0LCBjcmVhdGVQdXJlVHlwZVJlc3VsdCwgdW5pb25FZmZlY3RzIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBzYXRpc2ZpZXNDb25zdHJhaW50LCB2YWxpZGF0ZUFsbFN1YnN0aXR1dGlvbkNvbnN0cmFpbnRzIH0gZnJvbSAnLi9jb25zdHJhaW50cyc7XG5pbXBvcnQgeyBzdWJzdGl0dXRlIH0gZnJvbSAnLi9zdWJzdGl0dXRlJztcbmltcG9ydCB7IGNyZWF0ZVR5cGVTdGF0ZSwgbG9hZFN0ZGxpYiB9IGZyb20gJy4vdHlwZS1vcGVyYXRpb25zJztcbmltcG9ydCB7IHR5cGVFeHByZXNzaW9uIH0gZnJvbSAnLi9leHByZXNzaW9uLWRpc3BhdGNoZXInO1xuaW1wb3J0IHsgdHlwZUFuZERlY29yYXRlIH0gZnJvbSAnLi9kZWNvcmF0aW9uJztcbmltcG9ydCB7IGluaXRpYWxpemVCdWlsdGlucyB9IGZyb20gJy4vYnVpbHRpbnMnO1xuXG4vLyBSZS1leHBvcnQgVHlwZVJlc3VsdCBhbmQgZWZmZWN0IGhlbHBlcnMgZnJvbSB0eXBlcyBtb2R1bGVcbmV4cG9ydCB7IFxuXHR0eXBlIFR5cGVSZXN1bHQsXG5cdGVtcHR5RWZmZWN0cyxcblx0c2luZ2xlRWZmZWN0LFxuXHR1bmlvbkVmZmVjdHMsXG5cdGNyZWF0ZVR5cGVSZXN1bHQsXG5cdGNyZWF0ZVB1cmVUeXBlUmVzdWx0XG59IGZyb20gJy4vdHlwZXMnO1xuXG4vLyBSZS1leHBvcnQgY3JlYXRlVHlwZVN0YXRlIGZyb20gdHlwZS1vcGVyYXRpb25zIG1vZHVsZVxuZXhwb3J0IHsgY3JlYXRlVHlwZVN0YXRlLCBjbGVhblN1YnN0aXR1dGlvbnMgfSBmcm9tICcuL3R5cGUtb3BlcmF0aW9ucyc7XG5cbi8vIFJlLWV4cG9ydCBmcmVzaFR5cGVWYXJpYWJsZSBmcm9tIHR5cGUtb3BlcmF0aW9ucyBtb2R1bGVcbmV4cG9ydCB7IGZyZXNoVHlwZVZhcmlhYmxlIH0gZnJvbSAnLi90eXBlLW9wZXJhdGlvbnMnO1xuXG5cbi8vIFJlLWV4cG9ydCBmcmVlVHlwZVZhcnMgZnJvbSB0eXBlLW9wZXJhdGlvbnMgbW9kdWxlXG5leHBvcnQgeyBmcmVlVHlwZVZhcnMgfSBmcm9tICcuL3R5cGUtb3BlcmF0aW9ucyc7XG5cbi8vIFJlLWV4cG9ydCBmcmVlVHlwZVZhcnNFbnYgZnJvbSB0eXBlLW9wZXJhdGlvbnMgbW9kdWxlXG5leHBvcnQgeyBmcmVlVHlwZVZhcnNFbnYgfSBmcm9tICcuL3R5cGUtb3BlcmF0aW9ucyc7XG5cbi8vIFJlLWV4cG9ydCBnZW5lcmFsaXplIGZyb20gdHlwZS1vcGVyYXRpb25zIG1vZHVsZVxuZXhwb3J0IHsgZ2VuZXJhbGl6ZSB9IGZyb20gJy4vdHlwZS1vcGVyYXRpb25zJztcblxuLy8gUmUtZXhwb3J0IGluc3RhbnRpYXRlIGZyb20gdHlwZS1vcGVyYXRpb25zIG1vZHVsZVxuZXhwb3J0IHsgaW5zdGFudGlhdGUgfSBmcm9tICcuL3R5cGUtb3BlcmF0aW9ucyc7XG5cbi8vIFJlLWV4cG9ydCBmcmVzaGVuVHlwZVZhcmlhYmxlcyBmcm9tIHR5cGUtb3BlcmF0aW9ucyBtb2R1bGVcbmV4cG9ydCB7IGZyZXNoZW5UeXBlVmFyaWFibGVzIH0gZnJvbSAnLi90eXBlLW9wZXJhdGlvbnMnO1xuXG5cbi8vIFJlLWV4cG9ydCBsb2FkU3RkbGliIGZyb20gdHlwZS1vcGVyYXRpb25zIG1vZHVsZVxuZXhwb3J0IHsgbG9hZFN0ZGxpYiB9IGZyb20gJy4vdHlwZS1vcGVyYXRpb25zJztcblxuLy8gUmUtZXhwb3J0IHR5cGVFeHByZXNzaW9uIGZyb20gZXhwcmVzc2lvbi1kaXNwYXRjaGVyIG1vZHVsZVxuZXhwb3J0IHsgdHlwZUV4cHJlc3Npb24gfSBmcm9tICcuL2V4cHJlc3Npb24tZGlzcGF0Y2hlcic7XG5cblxuLy8gUmUtZXhwb3J0IHR5cGUgaW5mZXJlbmNlIGZ1bmN0aW9ucyBmcm9tIHRoZWlyIHJlc3BlY3RpdmUgbW9kdWxlc1xuZXhwb3J0IHtcblx0dHlwZUxpdGVyYWwsXG5cdHR5cGVWYXJpYWJsZUV4cHIsXG5cdHR5cGVGdW5jdGlvbixcblx0dHlwZURlZmluaXRpb24sXG5cdHR5cGVJZixcblx0dHlwZUJpbmFyeSxcblx0dHlwZU11dGFibGVEZWZpbml0aW9uLFxuXHR0eXBlTXV0YXRpb24sXG5cdHR5cGVJbXBvcnQsXG5cdHR5cGVSZWNvcmQsXG5cdHR5cGVBY2Nlc3Nvcixcblx0dHlwZVR1cGxlLFxuXHR0eXBlTGlzdCxcblx0dHlwZVdoZXJlLFxuXHR0eXBlVHlwZWQsXG5cdHR5cGVDb25zdHJhaW5lZCxcbn0gZnJvbSAnLi90eXBlLWluZmVyZW5jZSc7XG5cbmV4cG9ydCB7XG5cdHR5cGVBcHBsaWNhdGlvbixcblx0dHlwZVBpcGVsaW5lLFxufSBmcm9tICcuL2Z1bmN0aW9uLWFwcGxpY2F0aW9uJztcblxuZXhwb3J0IHtcblx0dHlwZU1hdGNoLFxuXHR0eXBlVHlwZURlZmluaXRpb24sXG59IGZyb20gJy4vcGF0dGVybi1tYXRjaGluZyc7XG5cbmV4cG9ydCB7XG5cdHR5cGVBbmREZWNvcmF0ZSxcbn0gZnJvbSAnLi9kZWNvcmF0aW9uJztcblxuLy8gUmUtZXhwb3J0IGhlbHBlciBmdW5jdGlvbnMgZnJvbSB0aGVpciBtb2R1bGVzXG5leHBvcnQgeyB2YWxpZGF0ZUFsbFN1YnN0aXR1dGlvbkNvbnN0cmFpbnRzIH0gZnJvbSAnLi9jb25zdHJhaW50cyc7XG4vLyBFeHBvcnQgdGhlIG1haW4gcHJvZ3JhbSB0eXBpbmcgZnVuY3Rpb25cbmV4cG9ydCBjb25zdCB0eXBlUHJvZ3JhbSA9IChwcm9ncmFtOiBQcm9ncmFtKTogVHlwZVJlc3VsdCA9PiB7XG5cdGxldCBzdGF0ZSA9IGNyZWF0ZVR5cGVTdGF0ZSgpO1xuXHRzdGF0ZSA9IGluaXRpYWxpemVCdWlsdGlucyhzdGF0ZSk7XG5cdHN0YXRlID0gbG9hZFN0ZGxpYihzdGF0ZSk7XG5cblx0bGV0IGZpbmFsVHlwZTogVHlwZSB8IG51bGwgPSBudWxsO1xuXHRsZXQgYWxsRWZmZWN0cyA9IG5ldyBTZXQ8RWZmZWN0PigpO1xuXG5cdGZvciAoY29uc3Qgc3RhdGVtZW50IG9mIHByb2dyYW0uc3RhdGVtZW50cykge1xuXHRcdGNvbnN0IHJlc3VsdCA9IHR5cGVFeHByZXNzaW9uKHN0YXRlbWVudCwgc3RhdGUpO1xuXHRcdHN0YXRlID0gcmVzdWx0LnN0YXRlO1xuXHRcdGZpbmFsVHlwZSA9IHJlc3VsdC50eXBlO1xuXHRcdGFsbEVmZmVjdHMgPSB1bmlvbkVmZmVjdHMoYWxsRWZmZWN0cywgcmVzdWx0LmVmZmVjdHMpO1xuXHR9XG5cblx0aWYgKCFmaW5hbFR5cGUpIHtcblx0XHRmaW5hbFR5cGUgPSB1bml0VHlwZSgpO1xuXHR9XG5cblx0cmV0dXJuIHsgdHlwZTogZmluYWxUeXBlLCBlZmZlY3RzOiBhbGxFZmZlY3RzLCBzdGF0ZSB9O1xufTtcbiJdLCJuYW1lcyI6WyJjbGVhblN1YnN0aXR1dGlvbnMiLCJjcmVhdGVQdXJlVHlwZVJlc3VsdCIsImNyZWF0ZVR5cGVSZXN1bHQiLCJjcmVhdGVUeXBlU3RhdGUiLCJlbXB0eUVmZmVjdHMiLCJmcmVlVHlwZVZhcnMiLCJmcmVlVHlwZVZhcnNFbnYiLCJmcmVzaFR5cGVWYXJpYWJsZSIsImZyZXNoZW5UeXBlVmFyaWFibGVzIiwiZ2VuZXJhbGl6ZSIsImluc3RhbnRpYXRlIiwibG9hZFN0ZGxpYiIsInNpbmdsZUVmZmVjdCIsInR5cGVBY2Nlc3NvciIsInR5cGVBbmREZWNvcmF0ZSIsInR5cGVBcHBsaWNhdGlvbiIsInR5cGVCaW5hcnkiLCJ0eXBlQ29uc3RyYWluZWQiLCJ0eXBlRGVmaW5pdGlvbiIsInR5cGVFeHByZXNzaW9uIiwidHlwZUZ1bmN0aW9uIiwidHlwZUlmIiwidHlwZUltcG9ydCIsInR5cGVMaXN0IiwidHlwZUxpdGVyYWwiLCJ0eXBlTWF0Y2giLCJ0eXBlTXV0YWJsZURlZmluaXRpb24iLCJ0eXBlTXV0YXRpb24iLCJ0eXBlUGlwZWxpbmUiLCJ0eXBlUHJvZ3JhbSIsInR5cGVSZWNvcmQiLCJ0eXBlVHVwbGUiLCJ0eXBlVHlwZURlZmluaXRpb24iLCJ0eXBlVHlwZWQiLCJ0eXBlVmFyaWFibGVFeHByIiwidHlwZVdoZXJlIiwidW5pb25FZmZlY3RzIiwidmFsaWRhdGVBbGxTdWJzdGl0dXRpb25Db25zdHJhaW50cyIsInByb2dyYW0iLCJzdGF0ZSIsImluaXRpYWxpemVCdWlsdGlucyIsImZpbmFsVHlwZSIsImFsbEVmZmVjdHMiLCJTZXQiLCJzdGF0ZW1lbnQiLCJzdGF0ZW1lbnRzIiwicmVzdWx0IiwidHlwZSIsImVmZmVjdHMiLCJ1bml0VHlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7UUFzQjBCQTtlQUFBQSxrQ0FBa0I7O1FBSjNDQztlQUFBQSwyQkFBb0I7O1FBRHBCQztlQUFBQSx1QkFBZ0I7O1FBS1JDO2VBQUFBLCtCQUFlOztRQVJ2QkM7ZUFBQUEsbUJBQVk7O1FBZUpDO2VBQUFBLDRCQUFZOztRQUdaQztlQUFBQSwrQkFBZTs7UUFQZkM7ZUFBQUEsaUNBQWlCOztRQWdCakJDO2VBQUFBLG9DQUFvQjs7UUFOcEJDO2VBQUFBLDBCQUFVOztRQUdWQztlQUFBQSwyQkFBVzs7UUFPWEM7ZUFBQUEsMEJBQVU7O1FBOUJsQkM7ZUFBQUEsbUJBQVk7O1FBZ0RaQztlQUFBQSwyQkFBWTs7UUFtQlpDO2VBQUFBLDJCQUFlOztRQVZmQztlQUFBQSxvQ0FBZTs7UUFkZkM7ZUFBQUEseUJBQVU7O1FBVVZDO2VBQUFBLDhCQUFlOztRQVpmQztlQUFBQSw2QkFBYzs7UUFSTkM7ZUFBQUEsb0NBQWM7O1FBT3RCQztlQUFBQSwyQkFBWTs7UUFFWkM7ZUFBQUEscUJBQU07O1FBSU5DO2VBQUFBLHlCQUFVOztRQUlWQztlQUFBQSx1QkFBUTs7UUFaUkM7ZUFBQUEsMEJBQVc7O1FBd0JYQztlQUFBQSwwQkFBUzs7UUFsQlRDO2VBQUFBLG9DQUFxQjs7UUFDckJDO2VBQUFBLDJCQUFZOztRQWFaQztlQUFBQSxpQ0FBWTs7UUFlQUM7ZUFBQUE7O1FBMUJaQztlQUFBQSx5QkFBVTs7UUFFVkM7ZUFBQUEsd0JBQVM7O1FBY1RDO2VBQUFBLG1DQUFrQjs7UUFYbEJDO2VBQUFBLHdCQUFTOztRQWJUQztlQUFBQSwrQkFBZ0I7O1FBWWhCQztlQUFBQSx3QkFBUzs7UUFsRFRDO2VBQUFBLG1CQUFZOztRQXNFSkM7ZUFBQUEsK0NBQWtDOzs7cUJBdEZvQjt1QkFHcUI7Z0NBR3hDO3NDQUNiOzBCQUVJOytCQTRENUI7cUNBS0E7aUNBS0E7NEJBSUE7NkJBRzRDO0FBRTVDLE1BQU1SLGNBQWMsQ0FBQ1M7SUFDM0IsSUFBSUMsUUFBUXBDLElBQUFBLCtCQUFlO0lBQzNCb0MsUUFBUUMsSUFBQUEsNEJBQWtCLEVBQUNEO0lBQzNCQSxRQUFRNUIsSUFBQUEsMEJBQVUsRUFBQzRCO0lBRW5CLElBQUlFLFlBQXlCO0lBQzdCLElBQUlDLGFBQWEsSUFBSUM7SUFFckIsS0FBSyxNQUFNQyxhQUFhTixRQUFRTyxVQUFVLENBQUU7UUFDM0MsTUFBTUMsU0FBUzNCLElBQUFBLG9DQUFjLEVBQUN5QixXQUFXTDtRQUN6Q0EsUUFBUU8sT0FBT1AsS0FBSztRQUNwQkUsWUFBWUssT0FBT0MsSUFBSTtRQUN2QkwsYUFBYU4sSUFBQUEsbUJBQVksRUFBQ00sWUFBWUksT0FBT0UsT0FBTztJQUNyRDtJQUVBLElBQUksQ0FBQ1AsV0FBVztRQUNmQSxZQUFZUSxJQUFBQSxhQUFRO0lBQ3JCO0lBRUEsT0FBTztRQUFFRixNQUFNTjtRQUFXTyxTQUFTTjtRQUFZSDtJQUFNO0FBQ3REIn0=