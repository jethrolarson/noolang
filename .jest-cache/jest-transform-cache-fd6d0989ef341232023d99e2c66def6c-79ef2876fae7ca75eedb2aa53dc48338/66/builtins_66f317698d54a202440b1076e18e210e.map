{"version":3,"sources":["/workspace/src/typer/builtins.ts"],"sourcesContent":["import { TypeState } from './types';\nimport {\n\tfunctionType,\n\tintType,\n\tboolType,\n\tstringType,\n\trecordType,\n\ttupleType,\n\tlistTypeWithElement,\n\ttypeVariable,\n\tunitType,\n\tType,\n\tEffect,\n} from '../ast';\n\n// Helper: Create common function types\nconst createUnaryFunctionType = (paramType: Type, returnType: Type): Type =>\n\tfunctionType([paramType], returnType);\n\nconst createBinaryFunctionType = (\n\tparam1Type: Type,\n\tparam2Type: Type,\n\treturnType: Type\n): Type => functionType([param1Type, param2Type], returnType);\n\n// Initialize built-in types\nexport const initializeBuiltins = (state: TypeState): TypeState => {\n\tconst newEnv = new Map(state.environment);\n\n\t// Arithmetic operators\n\tnewEnv.set('+', {\n\t\ttype: functionType([intType(), intType()], intType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('-', {\n\t\ttype: functionType([intType(), intType()], intType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('*', {\n\t\ttype: functionType([intType(), intType()], intType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('/', {\n\t\ttype: functionType([intType(), intType()], intType()),\n\t\tquantifiedVars: [],\n\t});\n\n\t// Comparison operators\n\tnewEnv.set('==', {\n\t\ttype: functionType([typeVariable('a'), typeVariable('a')], boolType()),\n\t\tquantifiedVars: ['a'],\n\t});\n\tnewEnv.set('!=', {\n\t\ttype: functionType([typeVariable('a'), typeVariable('a')], boolType()),\n\t\tquantifiedVars: ['a'],\n\t});\n\tnewEnv.set('<', {\n\t\ttype: functionType([intType(), intType()], boolType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('>', {\n\t\ttype: functionType([intType(), intType()], boolType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('<=', {\n\t\ttype: functionType([intType(), intType()], boolType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('>=', {\n\t\ttype: functionType([intType(), intType()], boolType()),\n\t\tquantifiedVars: [],\n\t});\n\n\tconst tailType = functionType(\n\t\t[listTypeWithElement(typeVariable('a'))],\n\t\tlistTypeWithElement(typeVariable('a'))\n\t);\n\tnewEnv.set('tail', {\n\t\ttype: tailType,\n\t\tquantifiedVars: ['a'],\n\t});\n\tnewEnv.set('cons', {\n\t\ttype: functionType(\n\t\t\t[typeVariable('a'), listTypeWithElement(typeVariable('a'))],\n\t\t\tlistTypeWithElement(typeVariable('a'))\n\t\t),\n\t\tquantifiedVars: ['a'],\n\t});\n\n\t// Pipeline operator (pure)\n\tnewEnv.set('|>', {\n\t\ttype: functionType(\n\t\t\t[typeVariable('a'), functionType([typeVariable('a')], typeVariable('b'))],\n\t\t\ttypeVariable('b')\n\t\t),\n\t\tquantifiedVars: ['a', 'b'],\n\t});\n\n\t// Compose operator\n\tnewEnv.set('<|', {\n\t\ttype: functionType(\n\t\t\t[typeVariable('a'), functionType([typeVariable('a')], typeVariable('b'))],\n\t\t\ttypeVariable('b')\n\t\t),\n\t\tquantifiedVars: ['a', 'b'],\n\t});\n\n\t// Thrush operator (pure) - same as pipeline\n\tnewEnv.set('|', {\n\t\ttype: functionType(\n\t\t\t[typeVariable('a'), functionType([typeVariable('a')], typeVariable('b'))],\n\t\t\ttypeVariable('b')\n\t\t),\n\t\tquantifiedVars: ['a', 'b'],\n\t});\n\n\t// Semicolon operator (effectful - effects are unioned)\n\tnewEnv.set(';', {\n\t\ttype: functionType(\n\t\t\t[typeVariable('a'), typeVariable('b')],\n\t\t\ttypeVariable('b')\n\t\t),\n\t\tquantifiedVars: ['a', 'b'],\n\t});\n\n\t// Dollar operator (low precedence function application)\n\tnewEnv.set('$', {\n\t\ttype: functionType(\n\t\t\t[functionType([typeVariable('a')], typeVariable('b')), typeVariable('a')],\n\t\t\ttypeVariable('b')\n\t\t),\n\t\tquantifiedVars: ['a', 'b'],\n\t});\n\n\t// Effectful functions - I/O and logging\n\tnewEnv.set('print', {\n\t\ttype: functionType(\n\t\t\t[typeVariable('a')],\n\t\t\ttypeVariable('a'),\n\t\t\tnew Set(['write'])\n\t\t),\n\t\tquantifiedVars: ['a'],\n\t});\n\n\tnewEnv.set('println', {\n\t\ttype: functionType(\n\t\t\t[typeVariable('a')],\n\t\t\ttypeVariable('a'),\n\t\t\tnew Set(['write'])\n\t\t),\n\t\tquantifiedVars: ['a'],\n\t});\n\n\tnewEnv.set('readFile', {\n\t\ttype: functionType([stringType()], stringType(), new Set(['read'])),\n\t\tquantifiedVars: [],\n\t});\n\n\tnewEnv.set('writeFile', {\n\t\ttype: functionType(\n\t\t\t[stringType(), stringType()],\n\t\t\tunitType(),\n\t\t\tnew Set(['write'])\n\t\t),\n\t\tquantifiedVars: [],\n\t});\n\n\tnewEnv.set('log', {\n\t\ttype: functionType([stringType()], unitType(), new Set(['log'])),\n\t\tquantifiedVars: [],\n\t});\n\n\t// Random number generation - special zero-arg function syntax\n\tnewEnv.set('random', {\n\t\ttype: intType(), // For now, treat as a value with effects\n\t\tquantifiedVars: [],\n\t\teffects: new Set(['rand'] as Effect[]), // Store effects separately\n\t});\n\n\tnewEnv.set('randomRange', {\n\t\ttype: functionType([intType(), intType()], intType(), new Set(['rand'])),\n\t\tquantifiedVars: [],\n\t});\n\n\t// Mutable state operations\n\tnewEnv.set('mutSet', {\n\t\ttype: functionType(\n\t\t\t[typeVariable('ref'), typeVariable('a')],\n\t\t\tunitType(),\n\t\t\tnew Set(['state'])\n\t\t),\n\t\tquantifiedVars: ['ref', 'a'],\n\t});\n\n\tnewEnv.set('mutGet', {\n\t\ttype: functionType(\n\t\t\t[typeVariable('ref')],\n\t\t\ttypeVariable('a'),\n\t\t\tnew Set(['state'])\n\t\t),\n\t\tquantifiedVars: ['ref', 'a'],\n\t});\n\n\t// List utility functions (pure)\n\tnewEnv.set('map', {\n\t\ttype: functionType(\n\t\t\t[\n\t\t\t\tfunctionType([typeVariable('a')], typeVariable('b')),\n\t\t\t\tlistTypeWithElement(typeVariable('a')),\n\t\t\t],\n\t\t\tlistTypeWithElement(typeVariable('b'))\n\t\t),\n\t\tquantifiedVars: ['a', 'b'],\n\t});\n\tnewEnv.set('filter', {\n\t\ttype: functionType(\n\t\t\t[\n\t\t\t\tfunctionType([typeVariable('a')], boolType()),\n\t\t\t\tlistTypeWithElement(typeVariable('a')),\n\t\t\t],\n\t\t\tlistTypeWithElement(typeVariable('a'))\n\t\t),\n\t\tquantifiedVars: ['a'],\n\t});\n\tnewEnv.set('reduce', {\n\t\ttype: functionType(\n\t\t\t[\n\t\t\t\tfunctionType(\n\t\t\t\t\t[typeVariable('b')],\n\t\t\t\t\tfunctionType([typeVariable('a')], typeVariable('b'))\n\t\t\t\t),\n\t\t\t\ttypeVariable('b'),\n\t\t\t\tlistTypeWithElement(typeVariable('a')),\n\t\t\t],\n\t\t\ttypeVariable('b')\n\t\t),\n\t\tquantifiedVars: ['a', 'b'],\n\t});\n\tconst lengthType = createUnaryFunctionType(\n\t\tlistTypeWithElement(typeVariable('a')),\n\t\tintType()\n\t);\n\tnewEnv.set('length', {\n\t\ttype: lengthType,\n\t\tquantifiedVars: ['a'],\n\t});\n\tnewEnv.set('isEmpty', {\n\t\ttype: createUnaryFunctionType(\n\t\t\tlistTypeWithElement(typeVariable('a')),\n\t\t\tboolType()\n\t\t),\n\t\tquantifiedVars: ['a'],\n\t});\n\tnewEnv.set('append', {\n\t\ttype: createBinaryFunctionType(\n\t\t\tlistTypeWithElement(typeVariable('a')),\n\t\t\tlistTypeWithElement(typeVariable('a')),\n\t\t\tlistTypeWithElement(typeVariable('a'))\n\t\t),\n\t\tquantifiedVars: ['a'],\n\t});\n\n\t// Math utilities (pure)\n\tnewEnv.set('abs', {\n\t\ttype: createUnaryFunctionType(intType(), intType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('max', {\n\t\ttype: createBinaryFunctionType(intType(), intType(), intType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('min', {\n\t\ttype: createBinaryFunctionType(intType(), intType(), intType()),\n\t\tquantifiedVars: [],\n\t});\n\n\t// String utilities (pure)\n\tnewEnv.set('concat', {\n\t\ttype: createBinaryFunctionType(stringType(), stringType(), stringType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('toString', {\n\t\ttype: createUnaryFunctionType(typeVariable('a'), stringType()),\n\t\tquantifiedVars: ['a'],\n\t});\n\n\t// Record utilities\n\tnewEnv.set('hasKey', {\n\t\ttype: createBinaryFunctionType(recordType({}), stringType(), boolType()),\n\t\tquantifiedVars: [],\n\t});\n\tnewEnv.set('hasValue', {\n\t\ttype: createBinaryFunctionType(\n\t\t\trecordType({}),\n\t\t\ttypeVariable('a'),\n\t\t\tboolType()\n\t\t),\n\t\tquantifiedVars: ['a'],\n\t});\n\tnewEnv.set('set', {\n\t\ttype: functionType(\n\t\t\t[\n\t\t\t\ttypeVariable('accessor'), // Accept any accessor function type\n\t\t\t\trecordType({}),\n\t\t\t\ttypeVariable('a'),\n\t\t\t],\n\t\t\trecordType({})\n\t\t),\n\t\tquantifiedVars: ['accessor', 'a'],\n\t});\n\n\t// Tuple operations - only keep sound ones\n\tnewEnv.set(\n\t\t'tupleLength',\n\t\t{ type: functionType([tupleType([])], intType()), quantifiedVars: [] } // Any tuple -> Int\n\t);\n\tnewEnv.set(\n\t\t'tupleIsEmpty',\n\t\t{ type: functionType([tupleType([])], boolType()), quantifiedVars: [] } // Any tuple -> Bool\n\t);\n\n\t// head function is now self-hosted in stdlib.noo\n\n\t// Minimal built-in for self-hosted functions\n\tnewEnv.set('list_get', {\n\t\ttype: functionType(\n\t\t\t[intType(), listTypeWithElement(typeVariable('a'))],\n\t\t\ttypeVariable('a')\n\t\t),\n\t\tquantifiedVars: ['a'],\n\t});\n\n\treturn { ...state, environment: newEnv };\n};\n"],"names":["initializeBuiltins","createUnaryFunctionType","paramType","returnType","functionType","createBinaryFunctionType","param1Type","param2Type","state","newEnv","Map","environment","set","type","intType","quantifiedVars","typeVariable","boolType","tailType","listTypeWithElement","Set","stringType","unitType","effects","lengthType","recordType","tupleType"],"mappings":"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"}