ac0b3e933fa41359d29c1d58aff42e9e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "initializeBuiltins", {
    enumerable: true,
    get: function() {
        return initializeBuiltins;
    }
});
const _ast = require("../ast");
// Helper: Create common function types
const createUnaryFunctionType = (paramType, returnType)=>(0, _ast.functionType)([
        paramType
    ], returnType);
const createBinaryFunctionType = (param1Type, param2Type, returnType)=>(0, _ast.functionType)([
        param1Type,
        param2Type
    ], returnType);
const initializeBuiltins = (state)=>{
    const newEnv = new Map(state.environment);
    // Arithmetic operators
    newEnv.set('+', {
        type: (0, _ast.functionType)([
            (0, _ast.intType)(),
            (0, _ast.intType)()
        ], (0, _ast.intType)()),
        quantifiedVars: []
    });
    newEnv.set('-', {
        type: (0, _ast.functionType)([
            (0, _ast.intType)(),
            (0, _ast.intType)()
        ], (0, _ast.intType)()),
        quantifiedVars: []
    });
    newEnv.set('*', {
        type: (0, _ast.functionType)([
            (0, _ast.intType)(),
            (0, _ast.intType)()
        ], (0, _ast.intType)()),
        quantifiedVars: []
    });
    newEnv.set('/', {
        type: (0, _ast.functionType)([
            (0, _ast.intType)(),
            (0, _ast.intType)()
        ], (0, _ast.intType)()),
        quantifiedVars: []
    });
    // Comparison operators
    newEnv.set('==', {
        type: (0, _ast.functionType)([
            (0, _ast.typeVariable)('a'),
            (0, _ast.typeVariable)('a')
        ], (0, _ast.boolType)()),
        quantifiedVars: [
            'a'
        ]
    });
    newEnv.set('!=', {
        type: (0, _ast.functionType)([
            (0, _ast.typeVariable)('a'),
            (0, _ast.typeVariable)('a')
        ], (0, _ast.boolType)()),
        quantifiedVars: [
            'a'
        ]
    });
    newEnv.set('<', {
        type: (0, _ast.functionType)([
            (0, _ast.intType)(),
            (0, _ast.intType)()
        ], (0, _ast.boolType)()),
        quantifiedVars: []
    });
    newEnv.set('>', {
        type: (0, _ast.functionType)([
            (0, _ast.intType)(),
            (0, _ast.intType)()
        ], (0, _ast.boolType)()),
        quantifiedVars: []
    });
    newEnv.set('<=', {
        type: (0, _ast.functionType)([
            (0, _ast.intType)(),
            (0, _ast.intType)()
        ], (0, _ast.boolType)()),
        quantifiedVars: []
    });
    newEnv.set('>=', {
        type: (0, _ast.functionType)([
            (0, _ast.intType)(),
            (0, _ast.intType)()
        ], (0, _ast.boolType)()),
        quantifiedVars: []
    });
    const tailType = (0, _ast.functionType)([
        (0, _ast.listTypeWithElement)((0, _ast.typeVariable)('a'))
    ], (0, _ast.listTypeWithElement)((0, _ast.typeVariable)('a')));
    newEnv.set('tail', {
        type: tailType,
        quantifiedVars: [
            'a'
        ]
    });
    newEnv.set('cons', {
        type: (0, _ast.functionType)([
            (0, _ast.typeVariable)('a'),
            (0, _ast.listTypeWithElement)((0, _ast.typeVariable)('a'))
        ], (0, _ast.listTypeWithElement)((0, _ast.typeVariable)('a'))),
        quantifiedVars: [
            'a'
        ]
    });
    // Pipeline operator (pure)
    newEnv.set('|>', {
        type: (0, _ast.functionType)([
            (0, _ast.typeVariable)('a'),
            (0, _ast.functionType)([
                (0, _ast.typeVariable)('a')
            ], (0, _ast.typeVariable)('b'))
        ], (0, _ast.typeVariable)('b')),
        quantifiedVars: [
            'a',
            'b'
        ]
    });
    // Compose operator
    newEnv.set('<|', {
        type: (0, _ast.functionType)([
            (0, _ast.typeVariable)('a'),
            (0, _ast.functionType)([
                (0, _ast.typeVariable)('a')
            ], (0, _ast.typeVariable)('b'))
        ], (0, _ast.typeVariable)('b')),
        quantifiedVars: [
            'a',
            'b'
        ]
    });
    // Thrush operator (pure) - same as pipeline
    newEnv.set('|', {
        type: (0, _ast.functionType)([
            (0, _ast.typeVariable)('a'),
            (0, _ast.functionType)([
                (0, _ast.typeVariable)('a')
            ], (0, _ast.typeVariable)('b'))
        ], (0, _ast.typeVariable)('b')),
        quantifiedVars: [
            'a',
            'b'
        ]
    });
    // Semicolon operator (effectful - effects are unioned)
    newEnv.set(';', {
        type: (0, _ast.functionType)([
            (0, _ast.typeVariable)('a'),
            (0, _ast.typeVariable)('b')
        ], (0, _ast.typeVariable)('b')),
        quantifiedVars: [
            'a',
            'b'
        ]
    });
    // Dollar operator (low precedence function application)
    newEnv.set('$', {
        type: (0, _ast.functionType)([
            (0, _ast.functionType)([
                (0, _ast.typeVariable)('a')
            ], (0, _ast.typeVariable)('b')),
            (0, _ast.typeVariable)('a')
        ], (0, _ast.typeVariable)('b')),
        quantifiedVars: [
            'a',
            'b'
        ]
    });
    // Effectful functions - I/O and logging
    newEnv.set('print', {
        type: (0, _ast.functionType)([
            (0, _ast.typeVariable)('a')
        ], (0, _ast.typeVariable)('a'), new Set([
            'write'
        ])),
        quantifiedVars: [
            'a'
        ]
    });
    newEnv.set('println', {
        type: (0, _ast.functionType)([
            (0, _ast.typeVariable)('a')
        ], (0, _ast.typeVariable)('a'), new Set([
            'write'
        ])),
        quantifiedVars: [
            'a'
        ]
    });
    newEnv.set('readFile', {
        type: (0, _ast.functionType)([
            (0, _ast.stringType)()
        ], (0, _ast.stringType)(), new Set([
            'read'
        ])),
        quantifiedVars: []
    });
    newEnv.set('writeFile', {
        type: (0, _ast.functionType)([
            (0, _ast.stringType)(),
            (0, _ast.stringType)()
        ], (0, _ast.unitType)(), new Set([
            'write'
        ])),
        quantifiedVars: []
    });
    newEnv.set('log', {
        type: (0, _ast.functionType)([
            (0, _ast.stringType)()
        ], (0, _ast.unitType)(), new Set([
            'log'
        ])),
        quantifiedVars: []
    });
    // Random number generation - special zero-arg function syntax
    newEnv.set('random', {
        type: (0, _ast.intType)(),
        quantifiedVars: [],
        effects: new Set([
            'rand'
        ])
    });
    newEnv.set('randomRange', {
        type: (0, _ast.functionType)([
            (0, _ast.intType)(),
            (0, _ast.intType)()
        ], (0, _ast.intType)(), new Set([
            'rand'
        ])),
        quantifiedVars: []
    });
    // Mutable state operations
    newEnv.set('mutSet', {
        type: (0, _ast.functionType)([
            (0, _ast.typeVariable)('ref'),
            (0, _ast.typeVariable)('a')
        ], (0, _ast.unitType)(), new Set([
            'state'
        ])),
        quantifiedVars: [
            'ref',
            'a'
        ]
    });
    newEnv.set('mutGet', {
        type: (0, _ast.functionType)([
            (0, _ast.typeVariable)('ref')
        ], (0, _ast.typeVariable)('a'), new Set([
            'state'
        ])),
        quantifiedVars: [
            'ref',
            'a'
        ]
    });
    // List utility functions (pure)
    newEnv.set('map', {
        type: (0, _ast.functionType)([
            (0, _ast.functionType)([
                (0, _ast.typeVariable)('a')
            ], (0, _ast.typeVariable)('b')),
            (0, _ast.listTypeWithElement)((0, _ast.typeVariable)('a'))
        ], (0, _ast.listTypeWithElement)((0, _ast.typeVariable)('b'))),
        quantifiedVars: [
            'a',
            'b'
        ]
    });
    newEnv.set('filter', {
        type: (0, _ast.functionType)([
            (0, _ast.functionType)([
                (0, _ast.typeVariable)('a')
            ], (0, _ast.boolType)()),
            (0, _ast.listTypeWithElement)((0, _ast.typeVariable)('a'))
        ], (0, _ast.listTypeWithElement)((0, _ast.typeVariable)('a'))),
        quantifiedVars: [
            'a'
        ]
    });
    newEnv.set('reduce', {
        type: (0, _ast.functionType)([
            (0, _ast.functionType)([
                (0, _ast.typeVariable)('b')
            ], (0, _ast.functionType)([
                (0, _ast.typeVariable)('a')
            ], (0, _ast.typeVariable)('b'))),
            (0, _ast.typeVariable)('b'),
            (0, _ast.listTypeWithElement)((0, _ast.typeVariable)('a'))
        ], (0, _ast.typeVariable)('b')),
        quantifiedVars: [
            'a',
            'b'
        ]
    });
    const lengthType = createUnaryFunctionType((0, _ast.listTypeWithElement)((0, _ast.typeVariable)('a')), (0, _ast.intType)());
    newEnv.set('length', {
        type: lengthType,
        quantifiedVars: [
            'a'
        ]
    });
    newEnv.set('isEmpty', {
        type: createUnaryFunctionType((0, _ast.listTypeWithElement)((0, _ast.typeVariable)('a')), (0, _ast.boolType)()),
        quantifiedVars: [
            'a'
        ]
    });
    newEnv.set('append', {
        type: createBinaryFunctionType((0, _ast.listTypeWithElement)((0, _ast.typeVariable)('a')), (0, _ast.listTypeWithElement)((0, _ast.typeVariable)('a')), (0, _ast.listTypeWithElement)((0, _ast.typeVariable)('a'))),
        quantifiedVars: [
            'a'
        ]
    });
    // Math utilities (pure)
    newEnv.set('abs', {
        type: createUnaryFunctionType((0, _ast.intType)(), (0, _ast.intType)()),
        quantifiedVars: []
    });
    newEnv.set('max', {
        type: createBinaryFunctionType((0, _ast.intType)(), (0, _ast.intType)(), (0, _ast.intType)()),
        quantifiedVars: []
    });
    newEnv.set('min', {
        type: createBinaryFunctionType((0, _ast.intType)(), (0, _ast.intType)(), (0, _ast.intType)()),
        quantifiedVars: []
    });
    // String utilities (pure)
    newEnv.set('concat', {
        type: createBinaryFunctionType((0, _ast.stringType)(), (0, _ast.stringType)(), (0, _ast.stringType)()),
        quantifiedVars: []
    });
    newEnv.set('toString', {
        type: createUnaryFunctionType((0, _ast.typeVariable)('a'), (0, _ast.stringType)()),
        quantifiedVars: [
            'a'
        ]
    });
    // Record utilities
    newEnv.set('hasKey', {
        type: createBinaryFunctionType((0, _ast.recordType)({}), (0, _ast.stringType)(), (0, _ast.boolType)()),
        quantifiedVars: []
    });
    newEnv.set('hasValue', {
        type: createBinaryFunctionType((0, _ast.recordType)({}), (0, _ast.typeVariable)('a'), (0, _ast.boolType)()),
        quantifiedVars: [
            'a'
        ]
    });
    newEnv.set('set', {
        type: (0, _ast.functionType)([
            (0, _ast.typeVariable)('accessor'),
            (0, _ast.recordType)({}),
            (0, _ast.typeVariable)('a')
        ], (0, _ast.recordType)({})),
        quantifiedVars: [
            'accessor',
            'a'
        ]
    });
    // Tuple operations - only keep sound ones
    newEnv.set('tupleLength', {
        type: (0, _ast.functionType)([
            (0, _ast.tupleType)([])
        ], (0, _ast.intType)()),
        quantifiedVars: []
    } // Any tuple -> Int
    );
    newEnv.set('tupleIsEmpty', {
        type: (0, _ast.functionType)([
            (0, _ast.tupleType)([])
        ], (0, _ast.boolType)()),
        quantifiedVars: []
    } // Any tuple -> Bool
    );
    // head function is now self-hosted in stdlib.noo
    // Minimal built-in for self-hosted functions
    newEnv.set('list_get', {
        type: (0, _ast.functionType)([
            (0, _ast.intType)(),
            (0, _ast.listTypeWithElement)((0, _ast.typeVariable)('a'))
        ], (0, _ast.typeVariable)('a')),
        quantifiedVars: [
            'a'
        ]
    });
    return {
        ...state,
        environment: newEnv
    };
};

//# sourceMappingURL=data:application/json;base64,