{"version":3,"sources":["/workspace/src/typer/substitute.ts"],"sourcesContent":["import { type Type, type Constraint } from \"../ast\";\nimport { mapObject } from \"./helpers\";\n\n// Performance tracking for substitute\nlet substituteCallCount = 0;\nlet totalSubstituteTime = 0;\n\n// Cache for substitution results to avoid repeated work\nconst substituteCache = new Map<string, Type>();\n\n// Apply substitution to a type\nexport const substitute = (\n\ttype: Type,\n\tsubstitution: Map<string, Type>,\n): Type => {\n\tconst startTime = Date.now();\n\tsubstituteCallCount++;\n\t\n\tlet result: Type;\n\t// Generate cache key - only for type variables as they're most common\n\tif (type.kind === 'variable' && substitution.size < 20) {\n\t\tconst cacheKey = `${type.name}:${Array.from(substitution.entries()).map(([k,v]) => `${k}=${v.kind}`).join(',')}`;\n\t\tconst cached = substituteCache.get(cacheKey);\n\t\tif (cached) {\n\t\t\tresult = cached;\n\t\t} else {\n\t\t\tresult = substituteWithCache(type, substitution, new Set());\n\t\t\tif (substituteCache.size < 1000) { // Prevent unbounded cache growth\n\t\t\t\tsubstituteCache.set(cacheKey, result);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tresult = substituteWithCache(type, substitution, new Set());\n\t}\n\t\n\tconst elapsed = Date.now() - startTime;\n\ttotalSubstituteTime += elapsed;\n\t\n\t// Stats tracking (disabled for clean output)\n\t\n\treturn result;\n};\n\nconst substituteWithCache = (\n\ttype: Type,\n\tsubstitution: Map<string, Type>,\n\tseen: Set<string>,\n): Type => {\n\tswitch (type.kind) {\n\t\tcase \"variable\": {\n\t\t\tif (seen.has(type.name)) {\n\t\t\t\t// Cycle detected, return original variable\n\t\t\t\treturn type;\n\t\t\t}\n\t\t\tconst sub = substitution.get(type.name);\n\t\t\tif (sub) {\n\t\t\t\tseen.add(type.name);\n\t\t\t\tconst result = substituteWithCache(sub, substitution, seen);\n\t\t\t\tseen.delete(type.name);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\treturn type;\n\t\t}\n\t\tcase \"function\":\n\t\t\treturn {\n\t\t\t\t...type,\n\t\t\t\tparams: type.params.map((param) =>\n\t\t\t\t\tsubstituteWithCache(param, substitution, seen),\n\t\t\t\t),\n\t\t\t\treturn: substituteWithCache(type.return, substitution, seen),\n\t\t\t\tconstraints: type.constraints?.map((c) =>\n\t\t\t\t\tsubstituteConstraint(c, substitution),\n\t\t\t\t),\n\t\t\t};\n\t\tcase \"list\":\n\t\t\treturn {\n\t\t\t\t...type,\n\t\t\t\telement: substituteWithCache(type.element, substitution, seen),\n\t\t\t};\n\t\tcase \"tuple\":\n\t\t\treturn {\n\t\t\t\t...type,\n\t\t\t\telements: type.elements.map((el) =>\n\t\t\t\t\tsubstituteWithCache(el, substitution, seen),\n\t\t\t\t),\n\t\t\t};\n\t\tcase \"record\":\n\t\t\treturn {\n\t\t\t\t...type,\n\t\t\t\tfields: mapObject(type.fields, (v, k) =>\n\t\t\t\t\tsubstituteWithCache(v, substitution, seen),\n\t\t\t\t),\n\t\t\t};\n\t\tcase \"union\":\n\t\t\treturn {\n\t\t\t\t...type,\n\t\t\t\ttypes: type.types.map((t) =>\n\t\t\t\t\tsubstituteWithCache(t, substitution, seen),\n\t\t\t\t),\n\t\t\t};\n\t\tcase \"variant\":\n\t\t\treturn {\n\t\t\t\t...type,\n\t\t\t\targs: type.args.map((arg) =>\n\t\t\t\t\tsubstituteWithCache(arg, substitution, seen),\n\t\t\t\t),\n\t\t\t};\n\t\tdefault:\n\t\t\treturn type;\n\t}\n};\n\n// Apply substitution to a constraint\nexport const substituteConstraint = (\n\tconstraint: Constraint,\n\tsubstitution: Map<string, Type>,\n): Constraint => {\n\tswitch (constraint.kind) {\n\t\tcase \"is\":\n\t\t\treturn constraint; // No substitution needed for is constraints\n\t\tcase \"hasField\":\n\t\t\treturn {\n\t\t\t\t...constraint,\n\t\t\t\tfieldType: substitute(constraint.fieldType, substitution),\n\t\t\t};\n\t\tcase \"implements\":\n\t\t\treturn constraint; // No substitution needed for implements constraints\n\t\tcase \"custom\":\n\t\t\treturn {\n\t\t\t\t...constraint,\n\t\t\t\targs: constraint.args.map((arg) => substitute(arg, substitution)),\n\t\t\t};\n\t\tdefault:\n\t\t\treturn constraint;\n\t}\n};"],"names":["substitute","substituteConstraint","substituteCallCount","totalSubstituteTime","substituteCache","Map","type","substitution","startTime","Date","now","result","kind","size","cacheKey","name","Array","from","entries","map","k","v","join","cached","get","substituteWithCache","Set","set","elapsed","seen","has","sub","add","delete","params","param","return","constraints","c","element","elements","el","fields","mapObject","types","t","args","arg","constraint","fieldType"],"mappings":"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"}