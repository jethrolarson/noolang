de1c13343a0b80a516d99fabdf5b7cfd
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _lexer = require("../../lexer");
const _parser = require("../../parser/parser");
const _index = require("../index");
const _helpers = require("../helpers");
// Helper function to parse a string into a program
const parseProgram = (source)=>{
    const lexer = new _lexer.Lexer(source);
    const tokens = lexer.tokenize();
    return (0, _parser.parse)(tokens);
};
(0, _globals.describe)('Functional Typer - Let-Polymorphism', ()=>{
    (0, _globals.describe)('Core Let-Polymorphism', ()=>{
        (0, _globals.it)('should generalize polymorphic identity function', ()=>{
            const program = parseProgram('id = fn x => x');
            const result = (0, _index.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe('(α) -> α');
        });
        (0, _globals.it)('should allow polymorphic function to be used with different types', ()=>{
            const program = parseProgram(`
        id = fn x => x;
        num = id 42;
        str = id "hello";
        bool = id True
      `);
            const result = (0, _index.typeProgram)(program);
            // The sequence returns the type of the rightmost expression
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe('Bool');
        });
        (0, _globals.it)('should handle higher-order functions with generalization', ()=>{
            const program = parseProgram(`
        apply = fn f x => f x;
        double = fn x => x * 2;
        result = apply double 5
      `);
            const result = (0, _index.typeProgram)(program);
            // The sequence returns the type of the rightmost expression
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe('Int');
        });
    });
    (0, _globals.describe)('Let-Polymorphism Edge Cases', ()=>{
        (0, _globals.it)('should handle nested function definitions', ()=>{
            const program = parseProgram(`
        outer = fn x => (
          inner = fn y => x;
          inner 42
        )
      `);
            const result = (0, _index.typeProgram)(program);
            // This should work with proper generalization
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe('(α) -> α');
        });
        (0, _globals.it)('should handle curried polymorphic functions', ()=>{
            const program = parseProgram(`
        add = fn x y => x + y;
        addFive = add 5;
        result = addFive 3
      `);
            const result = (0, _index.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe('Int');
        });
        (0, _globals.it)('should handle multiple polymorphic functions in sequence', ()=>{
            const program = parseProgram(`
        id = fn x => x;
        const = fn x y => x;
        result1 = id 42;
        result2 = const "hello" 123;
        result3 = id True
      `);
            const result = (0, _index.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe('Bool');
        });
    });
    (0, _globals.describe)('Type Environment Consistency', ()=>{
        (0, _globals.it)('should properly instantiate polymorphic functions in single program', ()=>{
            const program = parseProgram(`
        id = fn x => x;
        numResult = id 42;
        strResult = id "hello";
        boolResult = id True;
        numResult
      `);
            const result = (0, _index.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe('Int');
        });
        (0, _globals.it)('should handle polymorphic function with multiple instantiations', ()=>{
            const program = parseProgram(`
        id = fn x => x;
        id 42;
        id "hello";
        id True
      `);
            const result = (0, _index.typeProgram)(program);
            (0, _globals.expect)((0, _helpers.typeToString)(result.type, result.state.substitution)).toBe('Bool');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,