40f7627ef6577d367c22aca7adbf6c23
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _lexer = require("../../lexer");
const _parser = require("../parser");
// Helper functions for type-safe testing
function assertLiteralExpression(expr) {
    if (expr.kind !== "literal") {
        throw new Error(`Expected literal expression, got ${expr.kind}`);
    }
    return expr;
}
function assertVariableExpression(expr) {
    if (expr.kind !== "variable") {
        throw new Error(`Expected variable expression, got ${expr.kind}`);
    }
    return expr;
}
function assertFunctionExpression(expr) {
    if (expr.kind !== "function") {
        throw new Error(`Expected function expression, got ${expr.kind}`);
    }
    return expr;
}
function assertApplicationExpression(expr) {
    if (expr.kind !== "application") {
        throw new Error(`Expected application expression, got ${expr.kind}`);
    }
    return expr;
}
function assertBinaryExpression(expr) {
    if (expr.kind !== "binary") {
        throw new Error(`Expected binary expression, got ${expr.kind}`);
    }
    return expr;
}
function assertIfExpression(expr) {
    if (expr.kind !== "if") {
        throw new Error(`Expected if expression, got ${expr.kind}`);
    }
    return expr;
}
function assertRecordExpression(expr) {
    if (expr.kind !== "record") {
        throw new Error(`Expected record expression, got ${expr.kind}`);
    }
    return expr;
}
function assertAccessorExpression(expr) {
    if (expr.kind !== "accessor") {
        throw new Error(`Expected accessor expression, got ${expr.kind}`);
    }
    return expr;
}
function assertUnitExpression(expr) {
    if (expr.kind !== "unit") {
        throw new Error(`Expected unit expression, got ${expr.kind}`);
    }
    return expr;
}
function assertTypeDefinitionExpression(expr) {
    if (expr.kind !== "type-definition") {
        throw new Error(`Expected type definition expression, got ${expr.kind}`);
    }
    return expr;
}
function assertWhereExpression(expr) {
    if (expr.kind !== "where") {
        throw new Error(`Expected where expression, got ${expr.kind}`);
    }
    return expr;
}
function assertMutableDefinitionExpression(expr) {
    if (expr.kind !== "mutable-definition") {
        throw new Error(`Expected mutable definition expression, got ${expr.kind}`);
    }
    return expr;
}
function assertMutationExpression(expr) {
    if (expr.kind !== "mutation") {
        throw new Error(`Expected mutation expression, got ${expr.kind}`);
    }
    return expr;
}
function assertConstraintDefinitionExpression(expr) {
    if (expr.kind !== "constraint-definition") {
        throw new Error(`Expected constraint definition expression, got ${expr.kind}`);
    }
    return expr;
}
function assertImplementDefinitionExpression(expr) {
    if (expr.kind !== "implement-definition") {
        throw new Error(`Expected implement definition expression, got ${expr.kind}`);
    }
    return expr;
}
function assertConstrainedExpression(expr) {
    if (expr.kind !== "constrained") {
        throw new Error(`Expected constrained expression, got ${expr.kind}`);
    }
    return expr;
}
function assertRecordType(type) {
    if (type.kind !== "record") {
        throw new Error(`Expected record type, got ${type.kind}`);
    }
}
function assertTupleType(type) {
    if (type.kind !== "tuple") {
        throw new Error(`Expected tuple type, got ${type.kind}`);
    }
}
function assertListType(type) {
    if (type.kind !== "list") {
        throw new Error(`Expected list type, got ${type.kind}`);
    }
}
function assertFunctionType(type) {
    if (type.kind !== "function") {
        throw new Error(`Expected function type, got ${type.kind}`);
    }
}
function assertVariableType(type) {
    if (type.kind !== "variable") {
        throw new Error(`Expected variable type, got ${type.kind}`);
    }
}
function assertDefinitionExpression(expr) {
    if (expr.kind !== "definition") {
        throw new Error(`Expected definition expression, got ${expr.kind}`);
    }
    return expr;
}
function assertTypedExpression(expr) {
    if (expr.kind !== "typed") {
        throw new Error(`Expected typed expression, got ${expr.kind}`);
    }
    return expr;
}
function assertMatchExpression(expr) {
    if (expr.kind !== "match") {
        throw new Error(`Expected match expression, got ${expr.kind}`);
    }
    return expr;
}
function assertParseSuccess(result) {
    if (!result.success) {
        throw new Error(`Expected parse success, got ${result.error}`);
    }
}
function assertParseError(result) {
    if (result.success) {
        throw new Error(`Expected parse error, got success: (${JSON.stringify(result)})`);
    }
}
describe("Parser", ()=>{
    test("should parse simple literals", ()=>{
        const lexer = new _lexer.Lexer("42");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const literal = assertLiteralExpression(program.statements[0]);
        expect(literal.value).toBe(42);
    });
    test("should parse string literals", ()=>{
        const lexer = new _lexer.Lexer('"hello"');
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const literal = assertLiteralExpression(program.statements[0]);
        expect(literal.value).toBe("hello");
    });
    test("should parse boolean literals", ()=>{
        const lexer = new _lexer.Lexer("True");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        expect(program.statements[0].kind).toBe("variable");
        expect(program.statements[0].name).toBe("True");
    });
    test("should parse variable references", ()=>{
        const lexer = new _lexer.Lexer("x");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const variable = assertVariableExpression(program.statements[0]);
        expect(variable.name).toBe("x");
    });
    test("should parse function definitions", ()=>{
        const lexer = new _lexer.Lexer("fn x => x + 1");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const func = assertFunctionExpression(program.statements[0]);
        expect(func.params).toEqual([
            "x"
        ]);
        expect(func.body.kind).toBe("binary");
    });
    test("should parse function applications", ()=>{
        const lexer = new _lexer.Lexer("(fn x => x + 1) 2");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const app = assertApplicationExpression(program.statements[0]);
        expect(app.func.kind).toBe("function");
        expect(app.args).toHaveLength(1);
        const arg = assertLiteralExpression(app.args[0]);
        expect(arg.value).toBe(2);
    });
    test("should parse binary expressions", ()=>{
        const lexer = new _lexer.Lexer("2 + 3");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const binary = assertBinaryExpression(program.statements[0]);
        expect(binary.operator).toBe("+");
    });
    test("should parse lists", ()=>{
        const lexer = new _lexer.Lexer("[1, 2, 3]");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        expect(program.statements[0].kind).toBe("list");
        const elements = program.statements[0].elements;
        expect(Array.isArray(elements)).toBe(true);
        expect(elements).toHaveLength(3);
        expect(elements[0].kind).toBe("literal");
        expect(elements[0].value).toBe(1);
        expect(elements[1].kind).toBe("literal");
        expect(elements[1].value).toBe(2);
        expect(elements[2].kind).toBe("literal");
        expect(elements[2].value).toBe(3);
    });
    test("should parse if expressions", ()=>{
        const lexer = new _lexer.Lexer("if True then 1 else 2");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        expect(program.statements[0].kind).toBe("if");
        const ifExpr = program.statements[0];
        expect(ifExpr.condition.name).toBe("True");
        expect(ifExpr.then.value).toBe(1);
        expect(ifExpr.else.value).toBe(2);
    });
    test("should parse pipeline expressions", ()=>{
        const lexer = new _lexer.Lexer("[1, 2, 3] |> map");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const pipeline = program.statements[0];
        expect(pipeline.kind).toBe("pipeline");
        expect(pipeline.steps[0].kind).toBe("list");
        expect(pipeline.steps[1].kind).toBe("variable");
    });
    test("should parse single-field record", ()=>{
        const lexer = new _lexer.Lexer('{ @name "Alice", @age 30 }');
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        expect(program.statements[0].kind).toBe("record");
        const record = program.statements[0];
        expect(record.fields).toHaveLength(2);
        expect(record.fields[0].name).toBe("name");
        expect(record.fields[0].value.value).toBe("Alice");
        expect(record.fields[1].name).toBe("age");
        expect(record.fields[1].value.value).toBe(30);
    });
    test("should parse multi-field record (semicolon separated)", ()=>{
        const lexer = new _lexer.Lexer('{ @name "Alice", @age 30 }');
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        expect(program.statements[0].kind).toBe("record");
        const record = program.statements[0];
        expect(record.fields).toHaveLength(2);
        expect(record.fields[0].name).toBe("name");
        expect(record.fields[0].value.value).toBe("Alice");
        expect(record.fields[1].name).toBe("age");
        expect(record.fields[1].value.value).toBe(30);
    });
    test("should parse multi-field record (semicolon separated)", ()=>{
        const lexer = new _lexer.Lexer('{ @name "Alice", @age 30 }');
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        expect(program.statements[0].kind).toBe("record");
        const record = program.statements[0];
        expect(record.fields).toHaveLength(2);
        expect(record.fields[0].name).toBe("name");
        expect(record.fields[0].value.value).toBe("Alice");
        expect(record.fields[1].name).toBe("age");
        expect(record.fields[1].value.value).toBe(30);
    });
    test("should parse accessor", ()=>{
        const lexer = new _lexer.Lexer("@name");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        expect(program.statements[0].kind).toBe("accessor");
        const accessor = program.statements[0];
        expect(accessor.field).toBe("name");
    });
    test("should parse function with unit parameter", ()=>{
        const lexer = new _lexer.Lexer("fn {} => 42");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const func = assertFunctionExpression(program.statements[0]);
        expect(func.params).toEqual([
            "_unit"
        ]); // Unit parameter
        expect(func.body.kind).toBe("literal");
        expect(func.body.value).toBe(42);
    });
    test("should parse deeply nested tuples in records", ()=>{
        const lexer = new _lexer.Lexer("{ @key [1, {{{1}}}] }");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        // Check the outermost record
        expect(program.statements).toHaveLength(1);
        const outer = program.statements[0];
        expect(outer.kind).toBe("record");
        const keyField = outer.fields[0];
        expect(keyField.name).toBe("key");
        // Check that keyField.value is a list with two elements
        expect(keyField.value.kind).toBe("list");
        expect(keyField.value.elements).toHaveLength(2);
        // First element should be a literal
        expect(keyField.value.elements[0].kind).toBe("literal");
        expect(keyField.value.elements[0].value).toBe(1);
        // Second element should be a nested tuple structure
        let nestedTuple = keyField.value.elements[1];
        expect(nestedTuple.kind).toBe("tuple");
        // Check the nested structure: tuple -> tuple -> tuple -> literal
        for(let i = 0; i < 3; i++){
            expect(nestedTuple.kind).toBe("tuple");
            expect(nestedTuple.elements).toHaveLength(1);
            nestedTuple = nestedTuple.elements[0];
        }
        expect(nestedTuple.kind).toBe("literal");
        expect(nestedTuple.value).toBe(1);
    });
    test("should parse records with nested lists and records", ()=>{
        const lexer = new _lexer.Lexer("{ @key [1, { @inner [2, 3] }] }");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const outer = program.statements[0];
        expect(outer.kind).toBe("record");
        const keyField = outer.fields[0];
        expect(keyField.name).toBe("key");
        const list = keyField.value;
        expect(list.kind).toBe("list");
        expect(list.elements[0].kind).toBe("literal");
        expect(list.elements[0].value).toBe(1);
        const nestedRecord = list.elements[1];
        expect(nestedRecord.kind).toBe("record");
        const innerField = nestedRecord.fields[0];
        expect(innerField.name).toBe("inner");
        const innerList = innerField.value;
        expect(innerList.kind).toBe("list");
        expect(innerList.elements.map((e)=>e.value)).toEqual([
            2,
            3
        ]);
    });
    test("should parse lists of records", ()=>{
        const lexer = new _lexer.Lexer("[{ @a 1 }, { @b 2 }]");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const list = program.statements[0];
        expect(list.kind).toBe("list");
        expect(list.elements[0].kind).toBe("record");
        expect(list.elements[1].kind).toBe("record");
        expect(list.elements[0].fields[0].name).toBe("a");
        expect(list.elements[0].fields[0].value.value).toBe(1);
        expect(list.elements[1].fields[0].name).toBe("b");
        expect(list.elements[1].fields[0].value.value).toBe(2);
    });
    test("should parse a single tuple", ()=>{
        const lexer = new _lexer.Lexer("{1}");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const tuple = program.statements[0];
        expect(tuple.kind).toBe("tuple");
        expect(tuple.elements[0].kind).toBe("literal");
        expect(tuple.elements[0].value).toBe(1);
    });
    test("should parse a single record", ()=>{
        const lexer = new _lexer.Lexer("{ @foo 1 }");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const record = program.statements[0];
        expect(record.kind).toBe("record");
        expect(record.fields[0].name).toBe("foo");
        expect(record.fields[0].value.value).toBe(1);
    });
    test("should parse a list of literals", ()=>{
        const lexer = new _lexer.Lexer("[1, 2]");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const list = program.statements[0];
        expect(list.kind).toBe("list");
        expect(list.elements[0].kind).toBe("literal");
        expect(list.elements[0].value).toBe(1);
        expect(list.elements[1].kind).toBe("literal");
        expect(list.elements[1].value).toBe(2);
    });
    test("should parse a list of tuples", ()=>{
        const lexer = new _lexer.Lexer("[{1}, {2}]");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const list = program.statements[0];
        expect(list.kind).toBe("list");
        expect(list.elements[0].kind).toBe("tuple");
        expect(list.elements[0].elements[0].value).toBe(1);
        expect(list.elements[1].kind).toBe("tuple");
        expect(list.elements[1].elements[0].value).toBe(2);
    });
    test("should parse a list of records", ()=>{
        const lexer = new _lexer.Lexer("[{ @foo 1 }, { @bar 2 }]");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const list = program.statements[0];
        expect(list.kind).toBe("list");
        expect(list.elements[0].kind).toBe("record");
        expect(list.elements[0].fields[0].name).toBe("foo");
        expect(list.elements[0].fields[0].value.value).toBe(1);
        expect(list.elements[1].kind).toBe("record");
        expect(list.elements[1].fields[0].name).toBe("bar");
        expect(list.elements[1].fields[0].value.value).toBe(2);
    });
    test("should parse thrush operator", ()=>{
        const lexer = new _lexer.Lexer("10 | (fn x => x + 1)");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const thrush = program.statements[0];
        expect(thrush.kind).toBe("binary");
        expect(thrush.operator).toBe("|");
        expect(thrush.left.kind).toBe("literal");
        expect(thrush.right.kind).toBe("function");
    });
    test("should parse chained thrush operators as left-associative", ()=>{
        const lexer = new _lexer.Lexer("a | b | c");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const chain = program.statements[0];
        expect(chain.kind).toBe("binary");
        expect(chain.operator).toBe("|");
        expect(chain.left.kind).toBe("binary");
        expect(chain.left.operator).toBe("|");
        expect(chain.left.left.kind).toBe("variable");
        expect(chain.left.left.name).toBe("a");
        expect(chain.left.right.kind).toBe("variable");
        expect(chain.left.right.name).toBe("b");
        expect(chain.right.kind).toBe("variable");
        expect(chain.right.name).toBe("c");
    });
    test("should parse thrush operator after record", ()=>{
        const lexer = new _lexer.Lexer("{@key 1, @key2 False} | @key");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        // Verify it's a binary expression with thrush operator
        const expr = program.statements[0];
        expect(expr.kind).toBe("binary");
        expect(expr.operator).toBe("|");
        expect(expr.left.kind).toBe("record");
        expect(expr.right.kind).toBe("accessor");
    });
    // Add tests for empty unit expression
    test("should parse empty braces as unit", ()=>{
        const lexer = new _lexer.Lexer("{}");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const unit = assertUnitExpression(program.statements[0]);
        expect(unit.kind).toBe("unit");
    });
    // Add tests for function with empty parentheses
    test("should parse function with empty parentheses", ()=>{
        const lexer = new _lexer.Lexer("fn () => 42");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const func = assertFunctionExpression(program.statements[0]);
        expect(func.params).toEqual([]);
        expect(func.body.kind).toBe("literal");
    });
    // Add tests for function with multiple parameters
    test("should parse function with multiple parameters", ()=>{
        const lexer = new _lexer.Lexer("fn x y z => x + y + z");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const func = assertFunctionExpression(program.statements[0]);
        expect(func.params).toEqual([
            "x",
            "y",
            "z"
        ]);
        expect(func.body.kind).toBe("binary");
    });
    // Add tests for empty lists
    test("should parse empty list", ()=>{
        const lexer = new _lexer.Lexer("[]");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        expect(program.statements[0].kind).toBe("list");
        const list = program.statements[0];
        expect(list.elements).toHaveLength(0);
    });
    // Add tests for lists with trailing commas
    test("should parse list with trailing comma", ()=>{
        const lexer = new _lexer.Lexer("[1, 2, 3,]");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        expect(program.statements[0].kind).toBe("list");
        const list = program.statements[0];
        expect(list.elements).toHaveLength(3);
    });
    // Add tests for records with trailing commas
    test("should parse record with trailing comma", ()=>{
        const lexer = new _lexer.Lexer("{ @name \"Alice\", @age 30, }");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        expect(program.statements[0].kind).toBe("record");
        const record = program.statements[0];
        expect(record.fields).toHaveLength(2);
    });
    // Add tests for unary minus (adjacent)
    test("should parse unary minus (adjacent)", ()=>{
        const lexer = new _lexer.Lexer("-42");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        expect(program.statements[0].kind).toBe("binary");
        const binary = program.statements[0];
        expect(binary.operator).toBe("*");
        expect(binary.left.kind).toBe("literal");
        expect(binary.left.value).toBe(-1);
        expect(binary.right.kind).toBe("literal");
        expect(binary.right.value).toBe(42);
    });
    // Add tests for minus operator (non-adjacent)
    test("should parse minus operator (non-adjacent)", ()=>{
        const lexer = new _lexer.Lexer("10 - 5");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        expect(program.statements[0].kind).toBe("binary");
        const binary = program.statements[0];
        expect(binary.operator).toBe("-");
        expect(binary.left.kind).toBe("literal");
        expect(binary.left.value).toBe(10);
        expect(binary.right.kind).toBe("literal");
        expect(binary.right.value).toBe(5);
    });
});
// Add new test suite for Type Definitions (ADTs)
describe("Type Definitions (ADTs)", ()=>{
    test("should parse simple type definition", ()=>{
        const lexer = new _lexer.Lexer("type Bool = True | False");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const typeDef = assertTypeDefinitionExpression(program.statements[0]);
        expect(typeDef.name).toBe("Bool");
        expect(typeDef.typeParams).toEqual([]);
        expect(typeDef.constructors).toHaveLength(2);
        expect(typeDef.constructors[0].name).toBe("True");
        expect(typeDef.constructors[0].args).toEqual([]);
        expect(typeDef.constructors[1].name).toBe("False");
        expect(typeDef.constructors[1].args).toEqual([]);
    });
    test("should parse type definition with parameters", ()=>{
        const lexer = new _lexer.Lexer("type Option a = None | Some a");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const typeDef = assertTypeDefinitionExpression(program.statements[0]);
        expect(typeDef.name).toBe("Option");
        expect(typeDef.typeParams).toEqual([
            "a"
        ]);
        expect(typeDef.constructors).toHaveLength(2);
        expect(typeDef.constructors[0].name).toBe("None");
        expect(typeDef.constructors[0].args).toEqual([]);
        expect(typeDef.constructors[1].name).toBe("Some");
        expect(typeDef.constructors[1].args).toHaveLength(1);
    });
    test("should parse type definition with complex constructors", ()=>{
        const lexer = new _lexer.Lexer("type Either a b = Left a | Right b");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const typeDef = assertTypeDefinitionExpression(program.statements[0]);
        expect(typeDef.name).toBe("Either");
        expect(typeDef.typeParams).toEqual([
            "a",
            "b"
        ]);
        expect(typeDef.constructors).toHaveLength(2);
        expect(typeDef.constructors[0].name).toBe("Left");
        expect(typeDef.constructors[1].name).toBe("Right");
    });
    test("should parse type definition with multiple constructor arguments", ()=>{
        const lexer = new _lexer.Lexer("type Person = Person String Number");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const typeDef = assertTypeDefinitionExpression(program.statements[0]);
        expect(typeDef.name).toBe("Person");
        expect(typeDef.constructors).toHaveLength(1);
        expect(typeDef.constructors[0].name).toBe("Person");
        expect(typeDef.constructors[0].args).toHaveLength(2);
    });
});
// Add new test suite for Pattern Matching
describe("Pattern Matching", ()=>{
    test("should parse simple match expression", ()=>{
        const lexer = new _lexer.Lexer("match x with ( True => 1; False => 0 )");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const matchExpr = assertMatchExpression(program.statements[0]);
        expect(matchExpr.expression.kind).toBe("variable");
        expect(matchExpr.cases).toHaveLength(2);
        expect(matchExpr.cases[0].pattern.kind).toBe("constructor");
        expect(matchExpr.cases[0].pattern.name).toBe("True");
        expect(matchExpr.cases[0].expression.kind).toBe("literal");
        expect(matchExpr.cases[0].expression.value).toBe(1);
    });
    test("should parse match with variable patterns", ()=>{
        const lexer = new _lexer.Lexer("match x with ( Some y => y; None => 0 )");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const matchExpr = assertMatchExpression(program.statements[0]);
        expect(matchExpr.cases).toHaveLength(2);
        expect(matchExpr.cases[0].pattern.kind).toBe("constructor");
        expect(matchExpr.cases[0].pattern.name).toBe("Some");
        expect(matchExpr.cases[0].pattern.args).toHaveLength(1);
        expect(matchExpr.cases[0].pattern.args[0].kind).toBe("variable");
    });
    test("should parse match with wildcard patterns", ()=>{
        const lexer = new _lexer.Lexer("match x with ( Some _ => 1; _ => 0 )");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const matchExpr = assertMatchExpression(program.statements[0]);
        expect(matchExpr.cases).toHaveLength(2);
        expect(matchExpr.cases[0].pattern.kind).toBe("constructor");
        // Note: _ is parsed as a variable pattern because it's an identifier in the lexer
        expect(matchExpr.cases[1].pattern.kind).toBe("variable");
        expect(matchExpr.cases[1].pattern.name).toBe("_");
    });
    test.skip("should parse match with literal patterns", ()=>{
        // TODO: This test is skipped due to parser precedence issues with top-level match expressions.
        // The parser choice ordering causes parseMatchExpression to conflict with other parsers
        // when parsing at the top level. This needs parser architecture improvements to resolve.
        const lexer = new _lexer.Lexer('match x with ( 1 => "one"; "hello" => "world"; _ => "other" )');
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const matchExpr = assertMatchExpression(program.statements[0]);
        expect(matchExpr.cases).toHaveLength(3);
        expect(matchExpr.cases[0].pattern.kind).toBe("literal");
        expect(matchExpr.cases[0].pattern.value).toBe(1);
        expect(matchExpr.cases[1].pattern.kind).toBe("literal");
        expect(matchExpr.cases[1].pattern.value).toBe("hello");
    });
    test("should parse match with nested constructor patterns", ()=>{
        const lexer = new _lexer.Lexer("match x with ( Wrap (Value n) => n; _ => 0 )");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const matchExpr = assertMatchExpression(program.statements[0]);
        expect(matchExpr.cases).toHaveLength(2);
        expect(matchExpr.cases[0].pattern.kind).toBe("constructor");
        expect(matchExpr.cases[0].pattern.name).toBe("Wrap");
        expect(matchExpr.cases[0].pattern.args).toHaveLength(1);
        const nestedPattern = matchExpr.cases[0].pattern.args[0];
        expect(nestedPattern.kind).toBe("constructor");
        expect(nestedPattern.name).toBe("Value");
    });
});
// Add new test suite for Where Expressions
describe("Where Expressions", ()=>{
    test("should parse where expression with single definition", ()=>{
        const lexer = new _lexer.Lexer("x + y where ( x = 1 )");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const whereExpr = assertWhereExpression(program.statements[0]);
        expect(whereExpr.main.kind).toBe("binary");
        expect(whereExpr.definitions).toHaveLength(1);
        expect(whereExpr.definitions[0].kind).toBe("definition");
        expect(whereExpr.definitions[0].name).toBe("x");
    });
    test("should parse where expression with multiple definitions", ()=>{
        const lexer = new _lexer.Lexer("x + y where ( x = 1; y = 2 )");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const whereExpr = assertWhereExpression(program.statements[0]);
        expect(whereExpr.definitions).toHaveLength(2);
        expect(whereExpr.definitions[0].name).toBe("x");
        expect(whereExpr.definitions[1].name).toBe("y");
    });
    test("should parse where expression with mutable definition", ()=>{
        const lexer = new _lexer.Lexer("x + y where ( mut x = 1; y = 2 )");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const whereExpr = assertWhereExpression(program.statements[0]);
        expect(whereExpr.definitions).toHaveLength(2);
        expect(whereExpr.definitions[0].kind).toBe("mutable-definition");
        expect(whereExpr.definitions[1].kind).toBe("definition");
    });
});
// Add new test suite for Mutable Definitions and Mutations
describe("Mutable Definitions and Mutations", ()=>{
    test("should parse mutable definition", ()=>{
        const lexer = new _lexer.Lexer("mut x = 42");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const mutDef = assertMutableDefinitionExpression(program.statements[0]);
        expect(mutDef.name).toBe("x");
        expect(mutDef.value.kind).toBe("literal");
        expect(mutDef.value.value).toBe(42);
    });
    test("should parse mutation", ()=>{
        const lexer = new _lexer.Lexer("mut! x = 100");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const mutation = assertMutationExpression(program.statements[0]);
        expect(mutation.target).toBe("x");
        expect(mutation.value.kind).toBe("literal");
        expect(mutation.value.value).toBe(100);
    });
    test("should parse mutable definition with complex expression", ()=>{
        const lexer = new _lexer.Lexer("mut result = fn x => x * 2");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const mutDef = assertMutableDefinitionExpression(program.statements[0]);
        expect(mutDef.name).toBe("result");
        expect(mutDef.value.kind).toBe("function");
    });
});
// Add new test suite for Constraint Definitions and Implementations
describe("Constraint Definitions and Implementations", ()=>{
    test.skip("should parse constraint definition", ()=>{
        // TODO: This test is skipped due to parser precedence issues with top-level constraint definitions.
        // The parser choice ordering causes parseConstraintDefinition to conflict with other parsers
        // when parsing at the top level. This needs parser architecture improvements to resolve.
        const lexer = new _lexer.Lexer("constraint Monad m ( return a : a -> m a; bind a b : m a -> (a -> m b) -> m b )");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const constraintDef = assertConstraintDefinitionExpression(program.statements[0]);
        expect(constraintDef.name).toBe("Monad");
        expect(constraintDef.typeParam).toBe("m");
        expect(constraintDef.functions).toHaveLength(2);
        expect(constraintDef.functions[0].name).toBe("return");
        expect(constraintDef.functions[1].name).toBe("bind");
    });
    test("should parse implement definition", ()=>{
        const lexer = new _lexer.Lexer("implement Monad Option ( return = Some; bind = fn opt f => match opt with ( Some x => f x; None => None ) )");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const implDef = assertImplementDefinitionExpression(program.statements[0]);
        expect(implDef.constraintName).toBe("Monad");
        expect(implDef.typeName).toBe("Option");
        expect(implDef.implementations).toHaveLength(2);
        expect(implDef.implementations[0].name).toBe("return");
        expect(implDef.implementations[1].name).toBe("bind");
    });
    test("should parse constraint with simple functions", ()=>{
        const lexer = new _lexer.Lexer("constraint Eq a ( eq a : a -> a -> Bool )");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const constraintDef = assertConstraintDefinitionExpression(program.statements[0]);
        expect(constraintDef.name).toBe("Eq");
        expect(constraintDef.typeParam).toBe("a");
        expect(constraintDef.functions).toHaveLength(1);
        expect(constraintDef.functions[0].name).toBe("eq");
        expect(constraintDef.functions[0].typeParams).toEqual([
            "a"
        ]);
    });
});
// Add new test suite for Advanced Type Expressions
describe("Advanced Type Expressions", ()=>{
    test("should parse Tuple type constructor", ()=>{
        const lexer = new _lexer.Lexer("Tuple Int String Bool");
        const tokens = lexer.tokenize();
        const result = (0, _parser.parseTypeExpression)(tokens);
        assertParseSuccess(result);
        expect(result.value.kind).toBe("tuple");
        const tupleConstructor = result.value;
        expect(tupleConstructor.elements).toHaveLength(3);
    });
    test("should parse parenthesized type expression", ()=>{
        const lexer = new _lexer.Lexer("(Int -> String)");
        const tokens = lexer.tokenize();
        const result = (0, _parser.parseTypeExpression)(tokens);
        assertParseSuccess(result);
        assertFunctionType(result.value);
    });
    test("should parse List type with generic parameter", ()=>{
        const lexer = new _lexer.Lexer("List");
        const tokens = lexer.tokenize();
        const result = (0, _parser.parseTypeExpression)(tokens);
        assertParseSuccess(result);
        assertListType(result.value);
        const listType = result.value;
        expect(listType.element.kind).toBe("variable");
        expect(listType.element.name).toBe("a");
    });
    test("should parse variant type with args", ()=>{
        const lexer = new _lexer.Lexer("Maybe String");
        const tokens = lexer.tokenize();
        const result = (0, _parser.parseTypeExpression)(tokens);
        assertParseSuccess(result);
        expect(result.value.kind).toBe("variant");
        const variantType = result.value;
        expect(variantType.name).toBe("Maybe");
        expect(variantType.args).toHaveLength(1);
    });
});
// Add new test suite for Constraint Expressions
describe("Constraint Expressions", ()=>{
    test("should parse simple constraint expression", ()=>{
        const lexer = new _lexer.Lexer("x : Int given a is Eq");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const constrained = assertConstrainedExpression(program.statements[0]);
        expect(constrained.expression.kind).toBe("variable");
        expect(constrained.type.kind).toBe("primitive");
        expect(constrained.constraint.kind).toBe("is");
        expect(constrained.constraint.typeVar).toBe("a");
        expect(constrained.constraint.constraint).toBe("Eq");
    });
    test("should parse constraint with and operator", ()=>{
        const lexer = new _lexer.Lexer("x : a given a is Eq and a is Ord");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const constrained = assertConstrainedExpression(program.statements[0]);
        expect(constrained.constraint.kind).toBe("and");
        const andConstraint = constrained.constraint;
        expect(andConstraint.left.kind).toBe("is");
        expect(andConstraint.right.kind).toBe("is");
    });
    test("should parse constraint with or operator", ()=>{
        const lexer = new _lexer.Lexer("x : a given a is Eq or a is Ord");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const constrained = assertConstrainedExpression(program.statements[0]);
        expect(constrained.constraint.kind).toBe("or");
    });
    test.skip("should parse constraint with hasField", ()=>{
        // TODO: This test is skipped due to parser precedence issues with top-level constrained expressions.
        // The parser choice ordering causes constraint parsing to conflict with other parsers
        // when parsing at the top level. This needs parser architecture improvements to resolve.
        const lexer = new _lexer.Lexer('x : a given a has field "name" of type String');
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const constrained = assertConstrainedExpression(program.statements[0]);
        expect(constrained.constraint.kind).toBe("hasField");
        const hasFieldConstraint = constrained.constraint;
        expect(hasFieldConstraint.typeVar).toBe("a");
        expect(hasFieldConstraint.field).toBe("name");
        expect(hasFieldConstraint.fieldType.kind).toBe("primitive");
    });
    test("should parse constraint with implements", ()=>{
        const lexer = new _lexer.Lexer("x : a given a implements Iterable");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const constrained = assertConstrainedExpression(program.statements[0]);
        expect(constrained.constraint.kind).toBe("implements");
        const implementsConstraint = constrained.constraint;
        expect(implementsConstraint.typeVar).toBe("a");
        expect(implementsConstraint.interfaceName).toBe("Iterable");
    });
    test("should parse parenthesized constraint", ()=>{
        const lexer = new _lexer.Lexer("x : a given (a is Eq and a is Ord) or a is Show");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const constrained = assertConstrainedExpression(program.statements[0]);
        expect(constrained.constraint.kind).toBe("or");
        const orConstraint = constrained.constraint;
        expect(orConstraint.left.kind).toBe("paren");
        expect(orConstraint.right.kind).toBe("is");
    });
});
// Add new test suite for Error Conditions
describe("Error Conditions", ()=>{
    test("should throw error for unexpected token after expression", ()=>{
        const lexer = new _lexer.Lexer("1 + +"); // Invalid double operator
        const tokens = lexer.tokenize();
        expect(()=>(0, _parser.parse)(tokens)).toThrow("Parse error");
    });
    test("should throw error for parse error with line information", ()=>{
        const lexer = new _lexer.Lexer("fn ==> 42"); // invalid double arrow
        const tokens = lexer.tokenize();
        expect(()=>(0, _parser.parse)(tokens)).toThrow("Parse error");
    });
    test("should handle empty input", ()=>{
        const lexer = new _lexer.Lexer("");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(0);
    });
    test("should handle only semicolons", ()=>{
        const lexer = new _lexer.Lexer(";;;;");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(0);
    });
    test("should handle mixed named and positional fields error", ()=>{
        expect(()=>{
            const lexer = new _lexer.Lexer("{ @name \"Alice\", 30 }"); // mixed named and positional
            const tokens = lexer.tokenize();
            (0, _parser.parse)(tokens);
        }).toThrow("Parse error");
    });
    test("should handle invalid field after comma in record", ()=>{
        expect(()=>{
            const lexer = new _lexer.Lexer("{ @name \"Alice\", }"); // trailing comma with no field
            const tokens = lexer.tokenize();
            (0, _parser.parse)(tokens);
        }).not.toThrow(); // should handle trailing comma gracefully
    });
    test("should handle invalid element after comma in list", ()=>{
        expect(()=>{
            const lexer = new _lexer.Lexer("[1, 2, ]"); // trailing comma with no element
            const tokens = lexer.tokenize();
            (0, _parser.parse)(tokens);
        }).not.toThrow(); // should handle trailing comma gracefully
    });
});
// Add new test suite for Operator Precedence
describe("Operator Precedence", ()=>{
    test("should parse operators with correct precedence", ()=>{
        const lexer = new _lexer.Lexer("a + b * c");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const expr = assertBinaryExpression(program.statements[0]);
        expect(expr.operator).toBe("+");
        expect(expr.left.kind).toBe("variable");
        expect(expr.right.kind).toBe("binary");
        const rightExpr = assertBinaryExpression(expr.right);
        expect(rightExpr.operator).toBe("*");
    });
    test("should parse comparison operators", ()=>{
        const lexer = new _lexer.Lexer("a < b == c > d");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        // Due to left associativity, this parses as (((a < b) == c) > d)
        const expr = assertBinaryExpression(program.statements[0]);
        expect(expr.operator).toBe(">");
    });
    test("should parse composition operators", ()=>{
        const lexer = new _lexer.Lexer("f |> g |> h");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const pipeline = program.statements[0];
        expect(pipeline.kind).toBe("pipeline");
        expect(pipeline.steps).toHaveLength(3);
    });
    test("should parse dollar operator", ()=>{
        const lexer = new _lexer.Lexer("f $ g $ h");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const expr = assertBinaryExpression(program.statements[0]);
        expect(expr.operator).toBe("$");
    });
});
describe("Top-level sequence parsing", ()=>{
    test("multiple definitions and final expression", ()=>{
        const lexer = new _lexer.Lexer("a = 1; b = 2; a + b");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const seq = program.statements[0];
        expect(seq.kind).toBe("binary"); // semicolon sequence
    });
    test("multiple definitions and final record", ()=>{
        const code = `
      add = fn x y => x + y;
      sub = fn x y => x - y;
      math = { @add add, @sub sub };
      math
    `;
        const lexer = new _lexer.Lexer(code);
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const seq = program.statements[0];
        expect(seq.kind).toBe("binary");
    });
    test("sequence with trailing semicolon", ()=>{
        const lexer = new _lexer.Lexer("a = 1; b = 2; a + b;");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const seq = program.statements[0];
        expect(seq.kind).toBe("binary");
    });
});
describe("Type annotation parsing", ()=>{
    function parseType(typeSrc) {
        const lexer = new _lexer.Lexer(typeSrc);
        const tokens = lexer.tokenize();
        return (0, _parser.parseTypeExpression)(tokens);
    }
    test("parses record type annotation", ()=>{
        const result = parseType("{ name: String, age: Number }");
        assertParseSuccess(result);
        assertRecordType(result.value);
        expect(result.value.kind).toBe("record");
        expect(result.value.fields).toHaveProperty("name");
        expect(result.value.fields).toHaveProperty("age");
        expect(result.value.fields.name.kind).toBe("primitive");
        expect(result.value.fields.age.kind).toBe("primitive");
    });
    test("parses tuple type annotation", ()=>{
        const result = parseType("{ Number, String }");
        assertParseSuccess(result);
        assertTupleType(result.value);
        expect(result.value.elements[0].kind).toBe("primitive");
        expect(result.value.elements[1].kind).toBe("primitive");
    });
    test("parses list type annotation", ()=>{
        const result = parseType("List Number");
        assertParseSuccess(result);
        assertListType(result.value);
        expect(result.value.element.kind).toBe("primitive");
    });
    test("parses function type annotation", ()=>{
        const result = parseType("Number -> Number");
        assertParseSuccess(result);
        assertFunctionType(result.value);
        const funcType = result.value;
        expect(funcType.params[0].kind).toBe("primitive");
        expect(funcType.return.kind).toBe("primitive");
    });
    test("parses type variable", ()=>{
        const result = parseType("a");
        assertParseSuccess(result);
        assertVariableType(result.value);
        expect(result.value.kind).toBe("variable");
        expect(result.value.name).toBe("a");
    });
    // Add comprehensive tests for type constructor application
    test("parses simple type constructor application", ()=>{
        const result = parseType("Option Int");
        assertParseSuccess(result);
        expect(result.value.kind).toBe("variant");
        const variantType = result.value;
        expect(variantType.name).toBe("Option");
        expect(variantType.args).toHaveLength(1);
        expect(variantType.args[0].kind).toBe("primitive");
        expect(variantType.args[0].name).toBe("Int");
    });
    test("parses type constructor with type variable", ()=>{
        const result = parseType("Option a");
        assertParseSuccess(result);
        expect(result.value.kind).toBe("variant");
        const variantType = result.value;
        expect(variantType.name).toBe("Option");
        expect(variantType.args).toHaveLength(1);
        expect(variantType.args[0].kind).toBe("variable");
        expect(variantType.args[0].name).toBe("a");
    });
    test("parses type constructor with multiple arguments", ()=>{
        const result = parseType("Either String Int");
        assertParseSuccess(result);
        expect(result.value.kind).toBe("variant");
        const variantType = result.value;
        expect(variantType.name).toBe("Either");
        expect(variantType.args).toHaveLength(2);
        expect(variantType.args[0].kind).toBe("primitive");
        expect(variantType.args[0].name).toBe("String");
        expect(variantType.args[1].kind).toBe("primitive");
        expect(variantType.args[1].name).toBe("Int");
    });
    test("parses type constructor with mixed type arguments", ()=>{
        const result = parseType("Map String a");
        assertParseSuccess(result);
        expect(result.value.kind).toBe("variant");
        const variantType = result.value;
        expect(variantType.name).toBe("Map");
        expect(variantType.args).toHaveLength(2);
        expect(variantType.args[0].kind).toBe("primitive");
        expect(variantType.args[0].name).toBe("String");
        expect(variantType.args[1].kind).toBe("variable");
        expect(variantType.args[1].name).toBe("a");
    });
    test("parses nested type constructor application", ()=>{
        const result = parseType("Option (Either String Int)");
        assertParseSuccess(result);
        expect(result.value.kind).toBe("variant");
        const variantType = result.value;
        expect(variantType.name).toBe("Option");
        expect(variantType.args).toHaveLength(1);
        expect(variantType.args[0].kind).toBe("variant");
        expect(variantType.args[0].name).toBe("Either");
        expect(variantType.args[0].args).toHaveLength(2);
    });
    test("parses single letter type constructor for constraints", ()=>{
        // While the advanced `m a` syntax isn't currently supported,
        // we should still be able to parse simple type variables for constraints
        const result = parseType("m");
        assertParseSuccess(result);
        expect(result.value.kind).toBe("variable");
        const varType = result.value;
        expect(varType.name).toBe("m");
    // TODO: In the future, we should support `m a` syntax:
    // const advancedResult = parseType("m a");
    // expect(advancedResult.value.kind).toBe("variant");
    // expect(advancedResult.value.name).toBe("m");
    // expect(advancedResult.value.args).toHaveLength(1);
    });
    test("parses type constructor in function type", ()=>{
        const result = parseType("Option a -> Bool");
        assertParseSuccess(result);
        expect(result.value.kind).toBe("function");
        const funcType = result.value;
        expect(funcType.params[0].kind).toBe("variant");
        expect(funcType.params[0].name).toBe("Option");
        expect(funcType.params[0].args).toHaveLength(1);
        expect(funcType.return.kind).toBe("variant");
        expect(funcType.return.name).toBe("Bool");
    });
    test("parses constraint function types", ()=>{
        // Test simple constraint function
        const result = parseType("a -> a");
        assertParseSuccess(result);
        expect(result.value.kind).toBe("function");
        const funcType = result.value;
        expect(funcType.params[0].kind).toBe("variable");
        expect(funcType.params[0].name).toBe("a");
        expect(funcType.return.kind).toBe("variable");
        expect(funcType.return.name).toBe("a");
    // TODO: In the future, we should support more complex constraint functions:
    // const complexResult = parseType("m a -> (a -> m b) -> m b");
    // expect(complexResult.value.kind).toBe("function");
    // This would be the monadic bind signature
    });
    test("parses nested record type", ()=>{
        const result = parseType("{ person: { name: String, age: Number }, active: Bool }");
        assertParseSuccess(result);
        assertRecordType(result.value);
        expect(result.value.fields).toHaveProperty("person");
        expect(result.value.fields).toHaveProperty("active");
        expect(result.value.fields.person.kind).toBe("record");
        expect(result.value.fields.active.kind).toBe("variant");
    });
});
describe("Top-level definitions with type annotations", ()=>{
    function parseDefinition(defSrc) {
        const lexer = new _lexer.Lexer(defSrc);
        const tokens = lexer.tokenize();
        return (0, _parser.parse)(tokens);
    }
    test("parses definition with function type annotation", ()=>{
        const result = parseDefinition("add = fn x y => x + y : Number -> Number -> Number;");
        expect(result.statements).toHaveLength(1);
        expect(result.statements[0].kind).toBe("definition");
        const def = assertDefinitionExpression(result.statements[0]);
        expect(def.name).toBe("add");
        expect(def.value.kind).toBe("function");
    // Function expressions with type annotations may not wrap in "typed" nodes
    // The type information might be stored directly on the function
    });
    test("parses definition with primitive type annotation", ()=>{
        const result = parseDefinition("answer = 42 : Number;");
        expect(result.statements).toHaveLength(1);
        expect(result.statements[0].kind).toBe("definition");
        const def = assertDefinitionExpression(result.statements[0]);
        expect(def.name).toBe("answer");
        const typed = assertTypedExpression(def.value);
        expect(typed.expression.kind).toBe("literal");
        expect(typed.type.kind).toBe("primitive");
    });
    test("parses definition with list type annotation", ()=>{
        const result = parseDefinition("numbers = [1, 2, 3] : List Number;");
        expect(result.statements).toHaveLength(1);
        const def = assertDefinitionExpression(result.statements[0]);
        expect(def.name).toBe("numbers");
        const typed = assertTypedExpression(def.value);
        expect(typed.expression.kind).toBe("list");
        expect(typed.type.kind).toBe("list"); // List types have kind "list"
        expect(typed.type.element.kind).toBe("primitive"); // Number is a primitive type  
        expect(typed.type.element.name).toBe("Int"); // Number maps to Int internally
    });
    test("parses multiple definitions with type annotations", ()=>{
        const result = parseDefinition(`
      add = fn x y => x + y : Number -> Number -> Number;
      answer = 42 : Number;
      numbers = [1, 2, 3] : List Number;
    `);
        expect(result.statements).toHaveLength(1);
        const seq = assertBinaryExpression(result.statements[0]);
        expect(seq.kind).toBe("binary"); // semicolon sequence
        expect(seq.operator).toBe(";");
    });
    // Phase 1: Effect parsing tests
    describe("Effect parsing", ()=>{
        test("should parse function type with single effect", ()=>{
            const lexer = new _lexer.Lexer("Int -> Int !write");
            const tokens = lexer.tokenize();
            const result = (0, _parser.parseTypeExpression)(tokens);
            assertParseSuccess(result);
            assertFunctionType(result.value);
            const funcType = result.value;
            expect([
                ...funcType.effects
            ]).toEqual([
                "write"
            ]);
            expect(funcType.params).toHaveLength(1);
            expect(funcType.params[0].kind).toBe("primitive");
            expect(funcType.return.kind).toBe("primitive");
        });
        test("should parse function type with multiple effects", ()=>{
            const lexer = new _lexer.Lexer("Int -> String !write !log");
            const tokens = lexer.tokenize();
            const result = (0, _parser.parseTypeExpression)(tokens);
            assertParseSuccess(result);
            assertFunctionType(result.value);
            const funcType = result.value;
            expect([
                ...funcType.effects
            ].sort()).toEqual([
                "log",
                "write"
            ]);
        });
        test("should parse function type with all valid effects", ()=>{
            const lexer = new _lexer.Lexer("Int -> Int !log !read !write !state !time !rand !ffi !async");
            const tokens = lexer.tokenize();
            const result = (0, _parser.parseTypeExpression)(tokens);
            assertParseSuccess(result);
            assertFunctionType(result.value);
            const funcType = result.value;
            expect([
                ...funcType.effects
            ].sort()).toEqual([
                "async",
                "ffi",
                "log",
                "rand",
                "read",
                "state",
                "time",
                "write"
            ]);
        });
        test("should parse function type with no effects", ()=>{
            const lexer = new _lexer.Lexer("Int -> Int");
            const tokens = lexer.tokenize();
            const result = (0, _parser.parseTypeExpression)(tokens);
            assertParseSuccess(result);
            assertFunctionType(result.value);
            const funcType = result.value;
            expect([
                ...funcType.effects
            ]).toEqual([]);
        });
        test("should parse multi-parameter function with effects", ()=>{
            const lexer = new _lexer.Lexer("Int -> String -> Bool !read");
            const tokens = lexer.tokenize();
            const result = (0, _parser.parseTypeExpression)(tokens);
            assertParseSuccess(result);
            assertFunctionType(result.value);
            const funcType = result.value;
            expect([
                ...funcType.effects
            ]).toEqual([
                "read"
            ]);
            expect(funcType.params).toHaveLength(1);
            expect(funcType.return.kind).toBe("function");
        });
        test("should reject invalid effect names", ()=>{
            const lexer = new _lexer.Lexer("Int -> Int !invalid");
            const tokens = lexer.tokenize();
            const result = (0, _parser.parseTypeExpression)(tokens);
            assertParseError(result);
            expect(result.error).toContain("Invalid effect: invalid");
        });
        test("should require effect name after exclamation mark", ()=>{
            const lexer = new _lexer.Lexer("Int -> Int !");
            const tokens = lexer.tokenize();
            const result = (0, _parser.parseTypeExpression)(tokens);
            assertParseError(result);
            expect(result.error).toContain("Expected effect name after !");
        });
        test("should parse typed expression with effects", ()=>{
            const result = parseDefinition("x : Int -> Int !state");
            expect(result.statements).toHaveLength(1);
            const typed = assertTypedExpression(result.statements[0]);
            assertFunctionType(typed.type);
            const funcType = typed.type;
            expect([
                ...funcType.effects
            ]).toEqual([
                "state"
            ]);
        });
        test("should parse function definition with effect annotation", ()=>{
            const result = parseDefinition("fn x => x : Int -> Int !log");
            expect(result.statements).toHaveLength(1);
            const func = assertFunctionExpression(result.statements[0]);
            const typed = assertTypedExpression(func.body);
            assertFunctionType(typed.type);
            const funcType = typed.type;
            expect([
                ...funcType.effects
            ]).toEqual([
                "log"
            ]);
        });
        test("should automatically deduplicate effects", ()=>{
            const lexer = new _lexer.Lexer("Int -> Int !write !log !write");
            const tokens = lexer.tokenize();
            const result = (0, _parser.parseTypeExpression)(tokens);
            assertParseSuccess(result);
            assertFunctionType(result.value);
            const funcType = result.value;
            // Set automatically deduplicates, so !write !log !write becomes {log, write}
            expect([
                ...funcType.effects
            ].sort()).toEqual([
                "log",
                "write"
            ]);
            expect(funcType.effects.size).toBe(2);
        });
    });
});
// Add new test suite for Edge Cases and Error Conditions to improve coverage
describe("Edge Cases and Error Conditions", ()=>{
    test("should handle empty input for type expressions", ()=>{
        const tokens = [];
        const result = (0, _parser.parseTypeExpression)(tokens);
        assertParseError(result);
        expect(result.error).toContain("Expected type expression");
    });
    test("should handle invalid tokens for type expressions", ()=>{
        const lexer = new _lexer.Lexer("@invalid");
        const tokens = lexer.tokenize();
        const result = (0, _parser.parseTypeExpression)(tokens);
        assertParseError(result);
        expect(result.error).toContain("Expected type expression");
    });
    test("should parse Unit type correctly", ()=>{
        const lexer = new _lexer.Lexer("Unit");
        const tokens = lexer.tokenize();
        const result = (0, _parser.parseTypeExpression)(tokens);
        assertParseSuccess(result);
        expect(result.value.kind).toBe("unit");
    });
    test("should parse Number type correctly", ()=>{
        const lexer = new _lexer.Lexer("Number");
        const tokens = lexer.tokenize();
        const result = (0, _parser.parseTypeExpression)(tokens);
        assertParseSuccess(result);
        expect(result.value.kind).toBe("primitive");
        expect(result.value.name).toBe("Int");
    });
    test("should handle incomplete function type", ()=>{
        const lexer = new _lexer.Lexer("Int ->");
        const tokens = lexer.tokenize();
        const result = (0, _parser.parseTypeExpression)(tokens);
        assertParseError(result);
    });
    test("should handle invalid effect name", ()=>{
        const lexer = new _lexer.Lexer("Int -> Int !invalideffect");
        const tokens = lexer.tokenize();
        const result = (0, _parser.parseTypeExpression)(tokens);
        assertParseError(result);
        expect(result.error).toContain("Invalid effect: invalideffect");
    });
    test("should handle missing effect name after exclamation", ()=>{
        const lexer = new _lexer.Lexer("Int -> Int !");
        const tokens = lexer.tokenize();
        const result = (0, _parser.parseTypeExpression)(tokens);
        assertParseError(result);
        expect(result.error).toContain("Expected effect name after !");
    });
    test("should handle generic List type", ()=>{
        const lexer = new _lexer.Lexer("List");
        const tokens = lexer.tokenize();
        const result = (0, _parser.parseTypeExpression)(tokens);
        assertParseSuccess(result);
        assertListType(result.value);
        expect(result.value.element.kind).toBe("variable");
        expect(result.value.element.name).toBe("a");
    });
    test("should handle List type with argument", ()=>{
        const lexer = new _lexer.Lexer("List String");
        const tokens = lexer.tokenize();
        const result = (0, _parser.parseTypeExpression)(tokens);
        assertParseSuccess(result);
        assertListType(result.value);
        expect(result.value.element.kind).toBe("primitive");
    });
    test("should handle empty record fields", ()=>{
        const lexer = new _lexer.Lexer("{ }");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const unit = assertUnitExpression(program.statements[0]);
        expect(unit.kind).toBe("unit");
    });
    test.skip("should handle record field parsing edge cases", ()=>{
        // TODO: This test is skipped because the input "{ @name @value }" is actually valid syntax
        // that parses as a record with positional fields. Need to find a truly invalid syntax
        // to test error conditions, or adjust the test expectation.
        const lexer = new _lexer.Lexer("{ @name @value }"); // Invalid syntax - two accessors
        const tokens = lexer.tokenize();
        expect(()=>(0, _parser.parse)(tokens)).toThrow("Parse error");
    });
    test("should handle empty list elements", ()=>{
        const lexer = new _lexer.Lexer("[]");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        expect(program.statements[0].kind).toBe("list");
        const list = program.statements[0];
        expect(list.elements).toHaveLength(0);
    });
    test("should handle adjacent minus for unary operator", ()=>{
        const lexer = new _lexer.Lexer("-123");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        expect(program.statements[0].kind).toBe("binary");
        const binary = program.statements[0];
        expect(binary.operator).toBe("*");
        expect(binary.left.value).toBe(-1);
        expect(binary.right.value).toBe(123);
    });
    test("should handle non-adjacent minus for binary operator", ()=>{
        const lexer = new _lexer.Lexer("a - b");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        expect(program.statements[0].kind).toBe("binary");
        const binary = program.statements[0];
        expect(binary.operator).toBe("-");
    });
    test("should handle function type without effects fallback", ()=>{
        const lexer = new _lexer.Lexer("String -> Int");
        const tokens = lexer.tokenize();
        const result = (0, _parser.parseTypeExpression)(tokens);
        assertParseSuccess(result);
        assertFunctionType(result.value);
        expect([
            ...result.value.effects
        ]).toEqual([]);
    });
    test("should handle lowercase type variable", ()=>{
        const lexer = new _lexer.Lexer("a");
        const tokens = lexer.tokenize();
        const result = (0, _parser.parseTypeExpression)(tokens);
        assertParseSuccess(result);
        assertVariableType(result.value);
        expect(result.value.name).toBe("a");
    });
    test("should handle record type edge case", ()=>{
        const lexer = new _lexer.Lexer("{ name: String }");
        const tokens = lexer.tokenize();
        const result = (0, _parser.parseTypeExpression)(tokens);
        assertParseSuccess(result);
        assertRecordType(result.value);
        expect(result.value.fields).toHaveProperty("name");
    });
    test("should handle tuple type edge case", ()=>{
        const lexer = new _lexer.Lexer("{ String, Int }");
        const tokens = lexer.tokenize();
        const result = (0, _parser.parseTypeExpression)(tokens);
        assertParseSuccess(result);
        assertTupleType(result.value);
        expect(result.value.elements).toHaveLength(2);
    });
    test.skip("should handle debug logging when enabled", ()=>{
        // Set debug environment variable
        const originalDebug = process.env.NOO_DEBUG_PARSE;
        process.env.NOO_DEBUG_PARSE = "1";
        const lexer = new _lexer.Lexer("42");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        // Restore original environment
        if (originalDebug) {
            process.env.NOO_DEBUG_PARSE = originalDebug;
        } else {
            delete process.env.NOO_DEBUG_PARSE;
        }
    });
    test("should handle unexpected token types in primary parser", ()=>{
        // Create a mock token with an unexpected type
        const tokens = [
            {
                type: "COMMENT",
                value: "# comment",
                location: {
                    start: {
                        line: 1,
                        column: 1
                    },
                    end: {
                        line: 1,
                        column: 9
                    }
                }
            }
        ];
        expect(()=>(0, _parser.parse)(tokens)).toThrow("Parse error");
    });
    test("should handle various punctuation cases", ()=>{
        const testCases = [
            "(",
            "[",
            "{"
        ];
        for (const testCase of testCases){
            const lexer = new _lexer.Lexer(testCase);
            const tokens = lexer.tokenize();
            expect(()=>(0, _parser.parse)(tokens)).toThrow("Parse error");
        }
    });
    test("should handle type atom parsing edge cases", ()=>{
        // Test various edge cases that might not be covered
        const testCases = [
            "(Int -> String)",
            "Maybe Int",
            "Either String Int"
        ];
        for (const testCase of testCases){
            const lexer = new _lexer.Lexer(testCase);
            const tokens = lexer.tokenize();
            const result = (0, _parser.parseTypeExpression)(tokens);
            assertParseSuccess(result);
        }
    });
    test("should handle constraint expression edge cases", ()=>{
        const lexer = new _lexer.Lexer("x : a given (a is Eq)");
        const tokens = lexer.tokenize();
        const program = (0, _parser.parse)(tokens);
        expect(program.statements).toHaveLength(1);
        const constrained = assertConstrainedExpression(program.statements[0]);
        expect(constrained.constraint.kind).toBe("paren");
    });
    test("should handle complex parsing edge cases for coverage", ()=>{
        // Test some complex parsing scenarios
        const testCases = [
            "fn x y z => x + y + z",
            "(fn x => x) 42",
            "[1, 2, 3] |> map |> filter",
            "{ @a 1, @b 2, @c 3 }",
            "match x with ( Some y => y + 1; None => 0 )"
        ];
        for (const testCase of testCases){
            const lexer = new _lexer.Lexer(testCase);
            const tokens = lexer.tokenize();
            const program = (0, _parser.parse)(tokens);
            expect(program.statements).toHaveLength(1);
        }
    });
});

//# sourceMappingURL=data:application/json;base64,