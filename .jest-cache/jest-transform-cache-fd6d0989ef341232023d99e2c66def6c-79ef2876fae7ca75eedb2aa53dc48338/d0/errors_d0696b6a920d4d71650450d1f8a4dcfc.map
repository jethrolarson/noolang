{"version":3,"sources":["/workspace/src/errors.ts"],"sourcesContent":["export type ErrorType =\n  | \"ParseError\"\n  | \"TypeError\"\n  | \"RuntimeError\"\n  | \"ImportError\"\n  | \"LexerError\";\n\nexport interface ErrorLocation {\n  line: number;\n  column: number;\n  start?: number;\n  end?: number;\n}\n\nexport interface NoolangError {\n  type: ErrorType;\n  message: string;\n  location?: ErrorLocation;\n  context?: string;\n  suggestion?: string;\n}\n\nexport const createError = (\n\ttype: ErrorType,\n\tmessage: string,\n\tlocation?: ErrorLocation,\n\tcontext?: string,\n\tsuggestion?: string,\n): NoolangError => ({\n\ttype,\n\tmessage,\n\tlocation,\n\tcontext,\n\tsuggestion,\n});\n\nexport function errorToString(error: NoolangError): string {\n  let result = `${error.type}: ${error.message}`;\n\n  if (error.location) {\n    result += ` at line ${error.location.line}, column ${error.location.column}`;\n  }\n\n  if (error.context) {\n    result += `\\nContext: ${error.context}`;\n  }\n\n  if (error.suggestion) {\n    result += `\\nSuggestion: ${error.suggestion}`;\n  }\n\n  return result;\n}\n\nexport const errorToJSON = (error: NoolangError): string =>\n\tJSON.stringify(error, null, 2);\n"],"names":["createError","errorToJSON","errorToString","type","message","location","context","suggestion","error","result","line","column","JSON","stringify"],"mappings":";;;;;;;;;;;QAsBaA;eAAAA;;QAgCAC;eAAAA;;QAlBGC;eAAAA;;;AAdT,MAAMF,cAAc,CAC1BG,MACAC,SACAC,UACAC,SACAC,aACmB,CAAA;QACnBJ;QACAC;QACAC;QACAC;QACAC;IACD,CAAA;AAEO,SAASL,cAAcM,KAAmB;IAC/C,IAAIC,SAAS,GAAGD,MAAML,IAAI,CAAC,EAAE,EAAEK,MAAMJ,OAAO,EAAE;IAE9C,IAAII,MAAMH,QAAQ,EAAE;QAClBI,UAAU,CAAC,SAAS,EAAED,MAAMH,QAAQ,CAACK,IAAI,CAAC,SAAS,EAAEF,MAAMH,QAAQ,CAACM,MAAM,EAAE;IAC9E;IAEA,IAAIH,MAAMF,OAAO,EAAE;QACjBG,UAAU,CAAC,WAAW,EAAED,MAAMF,OAAO,EAAE;IACzC;IAEA,IAAIE,MAAMD,UAAU,EAAE;QACpBE,UAAU,CAAC,cAAc,EAAED,MAAMD,UAAU,EAAE;IAC/C;IAEA,OAAOE;AACT;AAEO,MAAMR,cAAc,CAACO,QAC3BI,KAAKC,SAAS,CAACL,OAAO,MAAM"}