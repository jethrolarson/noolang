{"version":3,"sources":["/workspace/src/typer/decoration.ts"],"sourcesContent":["import {\n\ttype Expression,\n\ttype Program,\n\ttype DefinitionExpression,\n\ttype MutableDefinitionExpression,\n\tunitType,\n} from '../ast';\nimport { type TypeState } from './types';\nimport { createTypeState, loadStdlib } from './type-operations';\nimport { initializeBuiltins } from './builtins';\nimport { typeExpression } from './expression-dispatcher';\n\n// Decorate AST nodes with inferred types - now uses single-pass typing\nexport const typeAndDecorate = (program: Program, initialState?: TypeState) => {\n\tlet state = initialState || createTypeState();\n\tif (!initialState) {\n\t\tstate = initializeBuiltins(state);\n\t\tstate = loadStdlib(state);\n\t}\n\n\t// Process all statements with typeExpression, then decorate the AST\n\tlet currentState = state;\n\tlet finalType = null;\n\t\n\tfor (const statement of program.statements) {\n\t\t// Type the statement (this does all the work)\n\t\tconst result = typeExpression(statement, currentState);\n\t\tcurrentState = result.state;\n\t\tfinalType = result.type;\n\t\t\n\t\t// Now just add the computed type to the AST node (lightweight decoration)\n\t\tstatement.type = result.type;\n\t}\n\t\n\tif (!finalType) {\n\t\tfinalType = unitType();\n\t}\n\t\n\treturn { \n\t\tprogram: { ...program }, \n\t\tstate: currentState \n\t};\n};"],"names":["typeAndDecorate","program","initialState","state","createTypeState","initializeBuiltins","loadStdlib","currentState","finalType","statement","statements","result","typeExpression","type","unitType"],"mappings":";;;;+BAaaA;;;eAAAA;;;qBAPN;gCAEqC;0BACT;sCACJ;AAGxB,MAAMA,kBAAkB,CAACC,SAAkBC;IACjD,IAAIC,QAAQD,gBAAgBE,IAAAA,+BAAe;IAC3C,IAAI,CAACF,cAAc;QAClBC,QAAQE,IAAAA,4BAAkB,EAACF;QAC3BA,QAAQG,IAAAA,0BAAU,EAACH;IACpB;IAEA,oEAAoE;IACpE,IAAII,eAAeJ;IACnB,IAAIK,YAAY;IAEhB,KAAK,MAAMC,aAAaR,QAAQS,UAAU,CAAE;QAC3C,8CAA8C;QAC9C,MAAMC,SAASC,IAAAA,oCAAc,EAACH,WAAWF;QACzCA,eAAeI,OAAOR,KAAK;QAC3BK,YAAYG,OAAOE,IAAI;QAEvB,0EAA0E;QAC1EJ,UAAUI,IAAI,GAAGF,OAAOE,IAAI;IAC7B;IAEA,IAAI,CAACL,WAAW;QACfA,YAAYM,IAAAA,aAAQ;IACrB;IAEA,OAAO;QACNb,SAAS;YAAE,GAAGA,OAAO;QAAC;QACtBE,OAAOI;IACR;AACD"}