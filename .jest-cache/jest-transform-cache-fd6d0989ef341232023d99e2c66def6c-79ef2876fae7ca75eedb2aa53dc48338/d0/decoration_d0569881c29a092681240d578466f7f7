fd0e0203f1e516696f1cafe5d9c8a4ac
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "typeAndDecorate", {
    enumerable: true,
    get: function() {
        return typeAndDecorate;
    }
});
const _ast = require("../ast");
const _typeoperations = require("./type-operations");
const _builtins = require("./builtins");
const _expressiondispatcher = require("./expression-dispatcher");
const typeAndDecorate = (program, initialState)=>{
    let state = initialState || (0, _typeoperations.createTypeState)();
    if (!initialState) {
        state = (0, _builtins.initializeBuiltins)(state);
        state = (0, _typeoperations.loadStdlib)(state);
    }
    // Process all statements with typeExpression, then decorate the AST
    let currentState = state;
    let finalType = null;
    for (const statement of program.statements){
        // Type the statement (this does all the work)
        const result = (0, _expressiondispatcher.typeExpression)(statement, currentState);
        currentState = result.state;
        finalType = result.type;
        // Now just add the computed type to the AST node (lightweight decoration)
        statement.type = result.type;
    }
    if (!finalType) {
        finalType = (0, _ast.unitType)();
    }
    return {
        program: {
            ...program
        },
        state: currentState
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2Uvc3JjL3R5cGVyL2RlY29yYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0dHlwZSBFeHByZXNzaW9uLFxuXHR0eXBlIFByb2dyYW0sXG5cdHR5cGUgRGVmaW5pdGlvbkV4cHJlc3Npb24sXG5cdHR5cGUgTXV0YWJsZURlZmluaXRpb25FeHByZXNzaW9uLFxuXHR1bml0VHlwZSxcbn0gZnJvbSAnLi4vYXN0JztcbmltcG9ydCB7IHR5cGUgVHlwZVN0YXRlIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVUeXBlU3RhdGUsIGxvYWRTdGRsaWIgfSBmcm9tICcuL3R5cGUtb3BlcmF0aW9ucyc7XG5pbXBvcnQgeyBpbml0aWFsaXplQnVpbHRpbnMgfSBmcm9tICcuL2J1aWx0aW5zJztcbmltcG9ydCB7IHR5cGVFeHByZXNzaW9uIH0gZnJvbSAnLi9leHByZXNzaW9uLWRpc3BhdGNoZXInO1xuXG4vLyBEZWNvcmF0ZSBBU1Qgbm9kZXMgd2l0aCBpbmZlcnJlZCB0eXBlcyAtIG5vdyB1c2VzIHNpbmdsZS1wYXNzIHR5cGluZ1xuZXhwb3J0IGNvbnN0IHR5cGVBbmREZWNvcmF0ZSA9IChwcm9ncmFtOiBQcm9ncmFtLCBpbml0aWFsU3RhdGU/OiBUeXBlU3RhdGUpID0+IHtcblx0bGV0IHN0YXRlID0gaW5pdGlhbFN0YXRlIHx8IGNyZWF0ZVR5cGVTdGF0ZSgpO1xuXHRpZiAoIWluaXRpYWxTdGF0ZSkge1xuXHRcdHN0YXRlID0gaW5pdGlhbGl6ZUJ1aWx0aW5zKHN0YXRlKTtcblx0XHRzdGF0ZSA9IGxvYWRTdGRsaWIoc3RhdGUpO1xuXHR9XG5cblx0Ly8gUHJvY2VzcyBhbGwgc3RhdGVtZW50cyB3aXRoIHR5cGVFeHByZXNzaW9uLCB0aGVuIGRlY29yYXRlIHRoZSBBU1Rcblx0bGV0IGN1cnJlbnRTdGF0ZSA9IHN0YXRlO1xuXHRsZXQgZmluYWxUeXBlID0gbnVsbDtcblx0XG5cdGZvciAoY29uc3Qgc3RhdGVtZW50IG9mIHByb2dyYW0uc3RhdGVtZW50cykge1xuXHRcdC8vIFR5cGUgdGhlIHN0YXRlbWVudCAodGhpcyBkb2VzIGFsbCB0aGUgd29yaylcblx0XHRjb25zdCByZXN1bHQgPSB0eXBlRXhwcmVzc2lvbihzdGF0ZW1lbnQsIGN1cnJlbnRTdGF0ZSk7XG5cdFx0Y3VycmVudFN0YXRlID0gcmVzdWx0LnN0YXRlO1xuXHRcdGZpbmFsVHlwZSA9IHJlc3VsdC50eXBlO1xuXHRcdFxuXHRcdC8vIE5vdyBqdXN0IGFkZCB0aGUgY29tcHV0ZWQgdHlwZSB0byB0aGUgQVNUIG5vZGUgKGxpZ2h0d2VpZ2h0IGRlY29yYXRpb24pXG5cdFx0c3RhdGVtZW50LnR5cGUgPSByZXN1bHQudHlwZTtcblx0fVxuXHRcblx0aWYgKCFmaW5hbFR5cGUpIHtcblx0XHRmaW5hbFR5cGUgPSB1bml0VHlwZSgpO1xuXHR9XG5cdFxuXHRyZXR1cm4geyBcblx0XHRwcm9ncmFtOiB7IC4uLnByb2dyYW0gfSwgXG5cdFx0c3RhdGU6IGN1cnJlbnRTdGF0ZSBcblx0fTtcbn07Il0sIm5hbWVzIjpbInR5cGVBbmREZWNvcmF0ZSIsInByb2dyYW0iLCJpbml0aWFsU3RhdGUiLCJzdGF0ZSIsImNyZWF0ZVR5cGVTdGF0ZSIsImluaXRpYWxpemVCdWlsdGlucyIsImxvYWRTdGRsaWIiLCJjdXJyZW50U3RhdGUiLCJmaW5hbFR5cGUiLCJzdGF0ZW1lbnQiLCJzdGF0ZW1lbnRzIiwicmVzdWx0IiwidHlwZUV4cHJlc3Npb24iLCJ0eXBlIiwidW5pdFR5cGUiXSwibWFwcGluZ3MiOiI7Ozs7K0JBYWFBOzs7ZUFBQUE7OztxQkFQTjtnQ0FFcUM7MEJBQ1Q7c0NBQ0o7QUFHeEIsTUFBTUEsa0JBQWtCLENBQUNDLFNBQWtCQztJQUNqRCxJQUFJQyxRQUFRRCxnQkFBZ0JFLElBQUFBLCtCQUFlO0lBQzNDLElBQUksQ0FBQ0YsY0FBYztRQUNsQkMsUUFBUUUsSUFBQUEsNEJBQWtCLEVBQUNGO1FBQzNCQSxRQUFRRyxJQUFBQSwwQkFBVSxFQUFDSDtJQUNwQjtJQUVBLG9FQUFvRTtJQUNwRSxJQUFJSSxlQUFlSjtJQUNuQixJQUFJSyxZQUFZO0lBRWhCLEtBQUssTUFBTUMsYUFBYVIsUUFBUVMsVUFBVSxDQUFFO1FBQzNDLDhDQUE4QztRQUM5QyxNQUFNQyxTQUFTQyxJQUFBQSxvQ0FBYyxFQUFDSCxXQUFXRjtRQUN6Q0EsZUFBZUksT0FBT1IsS0FBSztRQUMzQkssWUFBWUcsT0FBT0UsSUFBSTtRQUV2QiwwRUFBMEU7UUFDMUVKLFVBQVVJLElBQUksR0FBR0YsT0FBT0UsSUFBSTtJQUM3QjtJQUVBLElBQUksQ0FBQ0wsV0FBVztRQUNmQSxZQUFZTSxJQUFBQSxhQUFRO0lBQ3JCO0lBRUEsT0FBTztRQUNOYixTQUFTO1lBQUUsR0FBR0EsT0FBTztRQUFDO1FBQ3RCRSxPQUFPSTtJQUNSO0FBQ0QifQ==