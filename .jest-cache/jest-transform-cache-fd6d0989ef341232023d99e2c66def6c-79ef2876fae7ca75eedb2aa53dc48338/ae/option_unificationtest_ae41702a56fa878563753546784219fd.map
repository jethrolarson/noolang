{"version":3,"sources":["/workspace/test/option_unification.test.ts"],"sourcesContent":["import { Lexer } from \"../src/lexer\";\nimport { parse } from \"../src/parser/parser\";\nimport { typeAndDecorate } from \"../src/typer\";\nimport { Evaluator, Value } from \"../src/evaluator\";\n\nfunction unwrapValue(val: Value): any {\n  if (val === null) return null;\n  if (typeof val !== \"object\") return val;\n  switch (val.tag) {\n    case \"number\":\n      return val.value;\n    case \"string\":\n      return val.value;\n    case \"constructor\":\n      if (val.name === \"True\") return true;\n      if (val.name === \"False\") return false;\n      return { name: val.name, args: val.args.map(unwrapValue) };\n    case \"list\":\n      return val.values.map(unwrapValue);\n    case \"tuple\":\n      return val.values.map(unwrapValue);\n    case \"record\": {\n      const obj: any = {};\n      for (const k in val.fields) obj[k] = unwrapValue(val.fields[k]);\n      return obj;\n    }\n    default:\n      return val;\n  }\n}\n\ndescribe(\"Option Type Unification Tests\", () => {\n  let evaluator: Evaluator;\n\n  beforeEach(() => {\n    evaluator = new Evaluator();\n  });\n\n  const runCode = (code: string) => {\n    const lexer = new Lexer(code);\n    const tokens = lexer.tokenize();\n    const ast = parse(tokens);\n    const decoratedResult = typeAndDecorate(ast);\n    return evaluator.evaluateProgram(decoratedResult.program);\n  };\n\n  test(\"should handle simple Option construction\", () => {\n    const code = `Some 42`;\n    const result = runCode(code);\n    const unwrapped = unwrapValue(result.finalResult);\n    expect(unwrapped.name).toBe(\"Some\");\n    expect(unwrapped.args).toEqual([42]);\n  });\n\n  test(\"should handle None construction\", () => {\n    const code = `None`;\n    const result = runCode(code);\n    const unwrapped = unwrapValue(result.finalResult);\n    expect(unwrapped.name).toBe(\"None\");\n    expect(unwrapped.args).toEqual([]);\n  });\n\n  test(\"should handle Option in conditional expressions\", () => {\n    // FIXME: Currently fails with \"Cannot unify Option a with Option a\"\n    const code = `\n      result = if True then Some 42 else None;\n      result\n    `;\n    const result = runCode(code);\n    const unwrapped = unwrapValue(result.finalResult);\n    expect(unwrapped.name).toBe(\"Some\");\n    expect(unwrapped.args).toEqual([42]);\n  });\n\n  test(\"should handle Option function return types\", () => {\n    const code = `\n      makeOption = fn x => if x > 0 then Some x else None;\n      makeOption 5\n    `;\n    const result = runCode(code);\n    const unwrapped = unwrapValue(result.finalResult);\n    expect(unwrapped.name).toBe(\"Some\");\n    expect(unwrapped.args).toEqual([5]);\n  });\n\n  test(\"should handle safe division function\", () => {\n    // FIXME: Currently fails with \"Cannot unify Option a with Option a\"\n    const code = `\n      safe_divide = fn a b => if b == 0 then None else Some (a / b);\n      safe_divide 10 2\n    `;\n    const result = runCode(code);\n    const unwrapped = unwrapValue(result.finalResult);\n    expect(unwrapped.name).toBe(\"Some\");\n    expect(unwrapped.args).toEqual([5]);\n  });\n});\n"],"names":["unwrapValue","val","tag","value","name","args","map","values","obj","k","fields","describe","evaluator","beforeEach","Evaluator","runCode","code","lexer","Lexer","tokens","tokenize","ast","parse","decoratedResult","typeAndDecorate","evaluateProgram","program","test","result","unwrapped","finalResult","expect","toBe","toEqual"],"mappings":";;;;uBAAsB;wBACA;uBACU;2BACC;AAEjC,SAASA,YAAYC,GAAU;IAC7B,IAAIA,QAAQ,MAAM,OAAO;IACzB,IAAI,OAAOA,QAAQ,UAAU,OAAOA;IACpC,OAAQA,IAAIC,GAAG;QACb,KAAK;YACH,OAAOD,IAAIE,KAAK;QAClB,KAAK;YACH,OAAOF,IAAIE,KAAK;QAClB,KAAK;YACH,IAAIF,IAAIG,IAAI,KAAK,QAAQ,OAAO;YAChC,IAAIH,IAAIG,IAAI,KAAK,SAAS,OAAO;YACjC,OAAO;gBAAEA,MAAMH,IAAIG,IAAI;gBAAEC,MAAMJ,IAAII,IAAI,CAACC,GAAG,CAACN;YAAa;QAC3D,KAAK;YACH,OAAOC,IAAIM,MAAM,CAACD,GAAG,CAACN;QACxB,KAAK;YACH,OAAOC,IAAIM,MAAM,CAACD,GAAG,CAACN;QACxB,KAAK;YAAU;gBACb,MAAMQ,MAAW,CAAC;gBAClB,IAAK,MAAMC,KAAKR,IAAIS,MAAM,CAAEF,GAAG,CAACC,EAAE,GAAGT,YAAYC,IAAIS,MAAM,CAACD,EAAE;gBAC9D,OAAOD;YACT;QACA;YACE,OAAOP;IACX;AACF;AAEAU,SAAS,iCAAiC;IACxC,IAAIC;IAEJC,WAAW;QACTD,YAAY,IAAIE,oBAAS;IAC3B;IAEA,MAAMC,UAAU,CAACC;QACf,MAAMC,QAAQ,IAAIC,YAAK,CAACF;QACxB,MAAMG,SAASF,MAAMG,QAAQ;QAC7B,MAAMC,MAAMC,IAAAA,aAAK,EAACH;QAClB,MAAMI,kBAAkBC,IAAAA,sBAAe,EAACH;QACxC,OAAOT,UAAUa,eAAe,CAACF,gBAAgBG,OAAO;IAC1D;IAEAC,KAAK,4CAA4C;QAC/C,MAAMX,OAAO,CAAC,OAAO,CAAC;QACtB,MAAMY,SAASb,QAAQC;QACvB,MAAMa,YAAY7B,YAAY4B,OAAOE,WAAW;QAChDC,OAAOF,UAAUzB,IAAI,EAAE4B,IAAI,CAAC;QAC5BD,OAAOF,UAAUxB,IAAI,EAAE4B,OAAO,CAAC;YAAC;SAAG;IACrC;IAEAN,KAAK,mCAAmC;QACtC,MAAMX,OAAO,CAAC,IAAI,CAAC;QACnB,MAAMY,SAASb,QAAQC;QACvB,MAAMa,YAAY7B,YAAY4B,OAAOE,WAAW;QAChDC,OAAOF,UAAUzB,IAAI,EAAE4B,IAAI,CAAC;QAC5BD,OAAOF,UAAUxB,IAAI,EAAE4B,OAAO,CAAC,EAAE;IACnC;IAEAN,KAAK,mDAAmD;QACtD,oEAAoE;QACpE,MAAMX,OAAO,CAAC;;;IAGd,CAAC;QACD,MAAMY,SAASb,QAAQC;QACvB,MAAMa,YAAY7B,YAAY4B,OAAOE,WAAW;QAChDC,OAAOF,UAAUzB,IAAI,EAAE4B,IAAI,CAAC;QAC5BD,OAAOF,UAAUxB,IAAI,EAAE4B,OAAO,CAAC;YAAC;SAAG;IACrC;IAEAN,KAAK,8CAA8C;QACjD,MAAMX,OAAO,CAAC;;;IAGd,CAAC;QACD,MAAMY,SAASb,QAAQC;QACvB,MAAMa,YAAY7B,YAAY4B,OAAOE,WAAW;QAChDC,OAAOF,UAAUzB,IAAI,EAAE4B,IAAI,CAAC;QAC5BD,OAAOF,UAAUxB,IAAI,EAAE4B,OAAO,CAAC;YAAC;SAAE;IACpC;IAEAN,KAAK,wCAAwC;QAC3C,oEAAoE;QACpE,MAAMX,OAAO,CAAC;;;IAGd,CAAC;QACD,MAAMY,SAASb,QAAQC;QACvB,MAAMa,YAAY7B,YAAY4B,OAAOE,WAAW;QAChDC,OAAOF,UAAUzB,IAAI,EAAE4B,IAAI,CAAC;QAC5BD,OAAOF,UAAUxB,IAAI,EAAE4B,OAAO,CAAC;YAAC;SAAE;IACpC;AACF"}