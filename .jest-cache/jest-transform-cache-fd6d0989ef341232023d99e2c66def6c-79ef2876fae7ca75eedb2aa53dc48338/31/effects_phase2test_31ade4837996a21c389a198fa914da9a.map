{"version":3,"sources":["/workspace/test/effects_phase2.test.ts"],"sourcesContent":["// Phase 2 Effects System Tests\n// Testing separated effects in TypeResult and effect composition\n\nimport { Lexer } from '../src/lexer';\nimport { parse } from '../src/parser/parser';\nimport { typeProgram, emptyEffects, singleEffect, unionEffects } from '../src/typer';\nimport type { Effect } from '../src/ast';\n\nconst runNoolang = (code: string) => {\n\tconst lexer = new Lexer(code);\n\tconst tokens = lexer.tokenize();\n\tconst program = parse(tokens);\n\t\n\treturn typeProgram(program);\n};\n\ndescribe('Effects Phase 2: Separated Effects Architecture', () => {\n\tdescribe('Effect Helper Functions', () => {\n\t\ttest('emptyEffects creates empty effect set', () => {\n\t\t\tconst effects = emptyEffects();\n\t\t\texpect(effects.size).toBe(0);\n\t\t});\n\n\t\ttest('singleEffect creates single effect set', () => {\n\t\t\tconst effects = singleEffect('read');\n\t\t\texpect(effects.size).toBe(1);\n\t\t\texpect(effects.has('read')).toBe(true);\n\t\t});\n\n\t\ttest('unionEffects combines multiple effect sets', () => {\n\t\t\tconst effects1 = singleEffect('read' as Effect);\n\t\t\tconst effects2 = singleEffect('log' as Effect);\n\t\t\tconst effects3 = new Set(['state', 'read'] as Effect[]); // includes duplicate 'read'\n\t\t\t\n\t\t\tconst combined = unionEffects(effects1, effects2, effects3);\n\t\t\texpect(combined.size).toBe(3);\n\t\t\texpect(combined.has('read')).toBe(true);\n\t\t\texpect(combined.has('log')).toBe(true);\n\t\t\texpect(combined.has('state')).toBe(true);\n\t\t});\n\t});\n\n\tdescribe('Pure Expressions Return Empty Effects', () => {\n\t\ttest('literals have no effects', () => {\n\t\t\tconst result = runNoolang('42');\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('pure functions have no effects', () => {\n\t\t\tconst result = runNoolang('fn x => x + 1');\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('pure function application has no effects', () => {\n\t\t\tconst result = runNoolang('add = fn x y => x + y; add 2 3');\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('pure conditionals have no effects', () => {\n\t\t\tconst result = runNoolang('if True then 1 else 2');\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('pure lists have no effects', () => {\n\t\t\tconst result = runNoolang('[1, 2, 3]');\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('pure records have no effects', () => {\n\t\t\tconst result = runNoolang('{ @name \"Alice\", @age 30 }');\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('pure tuples have no effects', () => {\n\t\t\tconst result = runNoolang('{1, 2, 3}');\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('pure pattern matching has no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\ttype Color = Red | Green | Blue;\n\t\t\t\tcolor = Red;\n\t\t\t\tmatch color with (Red => 1; Green => 2; Blue => 3)\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n\n\tdescribe('Type System Returns TypeResult with Effects', () => {\n\t\ttest('typeProgram returns TypeResult with type and effects', () => {\n\t\t\tconst result = runNoolang('42');\n\t\t\texpect(result).toHaveProperty('type');\n\t\t\texpect(result).toHaveProperty('effects');\n\t\t\texpect(result).toHaveProperty('state');\n\t\t\texpect(result.type.kind).toBe('primitive');\n\t\t\texpect(result.effects).toBeInstanceOf(Set);\n\t\t});\n\n\t\ttest('complex expressions return proper TypeResult structure', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tadd = fn x y => x + y;\n\t\t\t\tmultiply = fn a b => a * b;\n\t\t\t\tcompute = fn x => add (multiply x 2) 3;\n\t\t\t\tcompute 5\n\t\t\t`);\n\t\t\texpect(result.type.kind).toBe('primitive');\n\t\t\tif (result.type.kind === 'primitive') {\n\t\t\t\texpect(result.type.name).toBe('Int');\n\t\t\t}\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n\n\tdescribe('Effect Propagation in Sequences', () => {\n\t\ttest('sequences collect effects from all statements', () => {\n\t\t\t// Note: We don't have actual effectful built-ins yet, so this tests the infrastructure\n\t\t\tconst result = runNoolang('x = 1; y = 2; x + y');\n\t\t\texpect(result.effects.size).toBe(0); // All pure operations\n\t\t});\n\n\t\ttest('sequences with pure operations have no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\ta = 10;\n\t\t\t\tb = 20;\n\t\t\t\tc = 30;\n\t\t\t\ta + b + c\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n\n\tdescribe('Effect Propagation in Function Applications', () => {\n\t\ttest('function application with pure function and pure arguments has no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tadd = fn x y => x + y;\n\t\t\t\tadd (1 + 2) (3 * 4)\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('curried function application propagates effects correctly', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tcurry = fn f => fn x => fn y => f x y;\n\t\t\t\tadd = fn x y => x + y;\n\t\t\t\tcurriedAdd = curry add;\n\t\t\t\tcurriedAdd 1 2\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n\n\tdescribe('Effect Propagation in Conditionals', () => {\n\t\ttest('conditional with pure branches has no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tcondition = True;\n\t\t\t\tif condition then 1 + 2 else 3 * 4\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('nested conditionals with pure expressions have no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tx = 5;\n\t\t\t\tif x > 0 then (if x > 10 then 100 else 50) else 0\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n\n\tdescribe('Effect Propagation in Data Structures', () => {\n\t\ttest('lists with pure elements have no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tadd = fn x => x + 1;\n\t\t\t\t[add 1, add 2, add 3]\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('records with pure field values have no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tcompute = fn x => x * 2;\n\t\t\t\t{ @a compute 5, @b compute 10 }\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('tuples with pure elements have no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tdouble = fn x => x * 2;\n\t\t\t\t{double 1, double 2, double 3}\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n\n\tdescribe('Effect Propagation in Pipeline Operations', () => {\n\t\ttest('pipeline with pure functions has no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tdouble = fn x => x * 2;\n\t\t\t\tadd5 = fn x => x + 5;\n\t\t\t\tcompose = fn f => fn g => fn x => f (g x);\n\t\t\t\tpipeline = compose add5 double;\n\t\t\t\tpipeline 10\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('thrush operator with pure functions has no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tdouble = fn x => x * 2;\n\t\t\t\t10 | double\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n\n\tdescribe('Effect Propagation in Pattern Matching', () => {\n\t\ttest('pattern matching with pure cases has no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\ttype Option a = Some a | None;\n\t\t\t\topt = Some 42;\n\t\t\t\tmatch opt with (\n\t\t\t\t\tSome x => x * 2;\n\t\t\t\t\tNone => 0\n\t\t\t\t)\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('nested pattern matching with pure expressions has no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\ttype Result a b = Ok a | Err b;\n\t\t\t\ttype Option a = Some a | None;\n\t\t\t\t\n\t\t\t\tresult = Ok (Some 42);\n\t\t\t\tmatch result with (\n\t\t\t\t\tOk opt => match opt with (Some x => x; None => 0);\n\t\t\t\t\tErr e => -1\n\t\t\t\t)\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n\n\tdescribe('Functions Inherit Effects from Body', () => {\n\t\ttest('function with pure body has no effects', () => {\n\t\t\tconst result = runNoolang('fn x => x + 1');\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('function with complex pure body has no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\tfn x => if x > 0 then x * 2 else x + 1\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\n\t\ttest('function with pure function calls in body has no effects', () => {\n\t\t\tconst result = runNoolang(`\n\t\t\t\thelper = fn y => y * 3;\n\t\t\t\tfn x => helper (x + 1)\n\t\t\t`);\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n\n\tdescribe('Type System Architecture Validation', () => {\n\t\ttest('TypeResult structure is consistent across all expression types', () => {\n\t\t\tconst expressions = [\n\t\t\t\t'42',\n\t\t\t\t'\"hello\"',\n\t\t\t\t'True',\n\t\t\t\t'fn x => x',\n\t\t\t\t'[1, 2, 3]',\n\t\t\t\t'{ @a 1, @b 2 }',\n\t\t\t\t'{1, 2}',\n\t\t\t\t'if True then 1 else 2',\n\t\t\t\t'1 + 2',\n\t\t\t\t'head [1, 2, 3]'\n\t\t\t];\n\n\t\t\tfor (const expr of expressions) {\n\t\t\t\tconst result = runNoolang(expr);\n\t\t\t\texpect(result).toHaveProperty('type');\n\t\t\t\texpect(result).toHaveProperty('effects');\n\t\t\t\texpect(result).toHaveProperty('state');\n\t\t\t\texpect(result.effects).toBeInstanceOf(Set);\n\t\t\t}\n\t\t});\n\n\t\ttest('effects are properly typed as Set<Effect>', () => {\n\t\t\tconst result = runNoolang('42');\n\t\t\texpect(result.effects).toBeInstanceOf(Set);\n\t\t\t// Verify we can use Set methods\n\t\t\texpect(typeof result.effects.has).toBe('function');\n\t\t\texpect(typeof result.effects.add).toBe('function');\n\t\t\texpect(result.effects.size).toBe(0);\n\t\t});\n\t});\n});"],"names":["runNoolang","code","lexer","Lexer","tokens","tokenize","program","parse","typeProgram","describe","test","effects","emptyEffects","expect","size","toBe","singleEffect","has","effects1","effects2","effects3","Set","combined","unionEffects","result","toHaveProperty","type","kind","toBeInstanceOf","name","expressions","expr","add"],"mappings":"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"}