2a67356c1ef317c447815733242ecd54
// Type expression dispatcher with proper error handling
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "typeExpression", {
    enumerable: true,
    get: function() {
        return typeExpression;
    }
});
const _ast = require("../ast");
const _types = require("./types");
const _typeinference = require("./type-inference");
const _functionapplication = require("./function-application");
const _patternmatching = require("./pattern-matching");
const typeExpression = (expr, state)=>{
    switch(expr.kind){
        case 'literal':
            return (0, _typeinference.typeLiteral)(expr, state);
        case 'variable':
            return (0, _typeinference.typeVariableExpr)(expr, state);
        case 'function':
            return (0, _typeinference.typeFunction)(expr, state);
        case 'application':
            return (0, _functionapplication.typeApplication)(expr, state);
        case 'binary':
            return (0, _typeinference.typeBinary)(expr, state);
        case 'if':
            return (0, _typeinference.typeIf)(expr, state);
        case 'list':
            return (0, _typeinference.typeList)(expr, state);
        case 'record':
            return (0, _typeinference.typeRecord)(expr, state);
        case 'tuple':
            return (0, _typeinference.typeTuple)(expr, state);
        case 'accessor':
            return (0, _typeinference.typeAccessor)(expr, state);
        case 'definition':
            return (0, _typeinference.typeDefinition)(expr, state);
        case 'unit':
            return (0, _types.createPureTypeResult)((0, _ast.unitType)(), state);
        case 'type-definition':
            return (0, _patternmatching.typeTypeDefinition)(expr, state);
        case 'constraint-definition':
            return (0, _typeinference.typeConstraintDefinition)(expr, state);
        case 'implement-definition':
            return (0, _typeinference.typeImplementDefinition)(expr, state);
        case 'match':
            return (0, _patternmatching.typeMatch)(expr, state);
        case 'pipeline':
            return (0, _functionapplication.typePipeline)(expr, state);
        default:
            throw new Error(`Unknown expression kind: ${expr.kind}`);
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2Uvc3JjL3R5cGVyL2V4cHJlc3Npb24tZGlzcGF0Y2hlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUeXBlIGV4cHJlc3Npb24gZGlzcGF0Y2hlciB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZ1xuaW1wb3J0IHsgXG5cdHR5cGUgRXhwcmVzc2lvbiwgXG5cdHR5cGUgVHlwZSxcblx0dHlwZSBFZmZlY3QsXG5cdHVuaXRUeXBlXG59IGZyb20gJy4uL2FzdCc7XG5pbXBvcnQgeyBUeXBlU3RhdGUsIFR5cGVSZXN1bHQsIGNyZWF0ZVB1cmVUeXBlUmVzdWx0IH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge1xuXHR0eXBlTGl0ZXJhbCxcblx0dHlwZVZhcmlhYmxlRXhwcixcblx0dHlwZUZ1bmN0aW9uLFxuXHR0eXBlQmluYXJ5LFxuXHR0eXBlSWYsXG5cdHR5cGVMaXN0LFxuXHR0eXBlUmVjb3JkLFxuXHR0eXBlVHVwbGUsXG5cdHR5cGVBY2Nlc3Nvcixcblx0dHlwZURlZmluaXRpb24sXG5cdHR5cGVDb25zdHJhaW50RGVmaW5pdGlvbixcblx0dHlwZUltcGxlbWVudERlZmluaXRpb24sXG59IGZyb20gJy4vdHlwZS1pbmZlcmVuY2UnO1xuaW1wb3J0IHsgdHlwZUFwcGxpY2F0aW9uLCB0eXBlUGlwZWxpbmUgfSBmcm9tICcuL2Z1bmN0aW9uLWFwcGxpY2F0aW9uJztcbmltcG9ydCB7IHR5cGVNYXRjaCwgdHlwZVR5cGVEZWZpbml0aW9uIH0gZnJvbSAnLi9wYXR0ZXJuLW1hdGNoaW5nJztcblxuLy8gTWFpbiB0eXBlIGluZmVyZW5jZSBkaXNwYXRjaGVyXG5leHBvcnQgY29uc3QgdHlwZUV4cHJlc3Npb24gPSAoXG5cdGV4cHI6IEV4cHJlc3Npb24sXG5cdHN0YXRlOiBUeXBlU3RhdGVcbik6IFR5cGVSZXN1bHQgPT4ge1xuXHRzd2l0Y2ggKGV4cHIua2luZCkge1xuXHRcdGNhc2UgJ2xpdGVyYWwnOlxuXHRcdFx0cmV0dXJuIHR5cGVMaXRlcmFsKGV4cHIsIHN0YXRlKTtcblxuXHRcdGNhc2UgJ3ZhcmlhYmxlJzpcblx0XHRcdHJldHVybiB0eXBlVmFyaWFibGVFeHByKGV4cHIsIHN0YXRlKTtcblxuXHRcdGNhc2UgJ2Z1bmN0aW9uJzpcblx0XHRcdHJldHVybiB0eXBlRnVuY3Rpb24oZXhwciwgc3RhdGUpO1xuXG5cdFx0Y2FzZSAnYXBwbGljYXRpb24nOlxuXHRcdFx0cmV0dXJuIHR5cGVBcHBsaWNhdGlvbihleHByLCBzdGF0ZSk7XG5cblx0XHRjYXNlICdiaW5hcnknOlxuXHRcdFx0cmV0dXJuIHR5cGVCaW5hcnkoZXhwciwgc3RhdGUpO1xuXG5cdFx0Y2FzZSAnaWYnOlxuXHRcdFx0cmV0dXJuIHR5cGVJZihleHByLCBzdGF0ZSk7XG5cblx0XHRjYXNlICdsaXN0Jzpcblx0XHRcdHJldHVybiB0eXBlTGlzdChleHByLCBzdGF0ZSk7XG5cblx0XHRjYXNlICdyZWNvcmQnOlxuXHRcdFx0cmV0dXJuIHR5cGVSZWNvcmQoZXhwciwgc3RhdGUpO1xuXG5cdFx0Y2FzZSAndHVwbGUnOlxuXHRcdFx0cmV0dXJuIHR5cGVUdXBsZShleHByLCBzdGF0ZSk7XG5cblx0XHRjYXNlICdhY2Nlc3Nvcic6XG5cdFx0XHRyZXR1cm4gdHlwZUFjY2Vzc29yKGV4cHIsIHN0YXRlKTtcblxuXHRcdGNhc2UgJ2RlZmluaXRpb24nOlxuXHRcdFx0cmV0dXJuIHR5cGVEZWZpbml0aW9uKGV4cHIsIHN0YXRlKTtcblxuXHRcdGNhc2UgJ3VuaXQnOlxuXHRcdFx0cmV0dXJuIGNyZWF0ZVB1cmVUeXBlUmVzdWx0KHVuaXRUeXBlKCksIHN0YXRlKTtcblxuXHRcdGNhc2UgJ3R5cGUtZGVmaW5pdGlvbic6XG5cdFx0XHRyZXR1cm4gdHlwZVR5cGVEZWZpbml0aW9uKGV4cHIsIHN0YXRlKTtcblxuXHRcdGNhc2UgJ2NvbnN0cmFpbnQtZGVmaW5pdGlvbic6XG5cdFx0XHRyZXR1cm4gdHlwZUNvbnN0cmFpbnREZWZpbml0aW9uKGV4cHIsIHN0YXRlKTtcblxuXHRcdGNhc2UgJ2ltcGxlbWVudC1kZWZpbml0aW9uJzpcblx0XHRcdHJldHVybiB0eXBlSW1wbGVtZW50RGVmaW5pdGlvbihleHByLCBzdGF0ZSk7XG5cblx0XHRjYXNlICdtYXRjaCc6XG5cdFx0XHRyZXR1cm4gdHlwZU1hdGNoKGV4cHIsIHN0YXRlKTtcblxuXHRcdGNhc2UgJ3BpcGVsaW5lJzpcblx0XHRcdHJldHVybiB0eXBlUGlwZWxpbmUoZXhwciwgc3RhdGUpO1xuXG5cdFx0ZGVmYXVsdDpcblx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5rbm93biBleHByZXNzaW9uIGtpbmQ6ICR7KGV4cHIgYXMgYW55KS5raW5kfWApO1xuXHR9XG59OyJdLCJuYW1lcyI6WyJ0eXBlRXhwcmVzc2lvbiIsImV4cHIiLCJzdGF0ZSIsImtpbmQiLCJ0eXBlTGl0ZXJhbCIsInR5cGVWYXJpYWJsZUV4cHIiLCJ0eXBlRnVuY3Rpb24iLCJ0eXBlQXBwbGljYXRpb24iLCJ0eXBlQmluYXJ5IiwidHlwZUlmIiwidHlwZUxpc3QiLCJ0eXBlUmVjb3JkIiwidHlwZVR1cGxlIiwidHlwZUFjY2Vzc29yIiwidHlwZURlZmluaXRpb24iLCJjcmVhdGVQdXJlVHlwZVJlc3VsdCIsInVuaXRUeXBlIiwidHlwZVR5cGVEZWZpbml0aW9uIiwidHlwZUNvbnN0cmFpbnREZWZpbml0aW9uIiwidHlwZUltcGxlbWVudERlZmluaXRpb24iLCJ0eXBlTWF0Y2giLCJ0eXBlUGlwZWxpbmUiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUEsd0RBQXdEOzs7OzsrQkEwQjNDQTs7O2VBQUFBOzs7cUJBcEJOO3VCQUNxRDsrQkFjckQ7cUNBQ3VDO2lDQUNBO0FBR3ZDLE1BQU1BLGlCQUFpQixDQUM3QkMsTUFDQUM7SUFFQSxPQUFRRCxLQUFLRSxJQUFJO1FBQ2hCLEtBQUs7WUFDSixPQUFPQyxJQUFBQSwwQkFBVyxFQUFDSCxNQUFNQztRQUUxQixLQUFLO1lBQ0osT0FBT0csSUFBQUEsK0JBQWdCLEVBQUNKLE1BQU1DO1FBRS9CLEtBQUs7WUFDSixPQUFPSSxJQUFBQSwyQkFBWSxFQUFDTCxNQUFNQztRQUUzQixLQUFLO1lBQ0osT0FBT0ssSUFBQUEsb0NBQWUsRUFBQ04sTUFBTUM7UUFFOUIsS0FBSztZQUNKLE9BQU9NLElBQUFBLHlCQUFVLEVBQUNQLE1BQU1DO1FBRXpCLEtBQUs7WUFDSixPQUFPTyxJQUFBQSxxQkFBTSxFQUFDUixNQUFNQztRQUVyQixLQUFLO1lBQ0osT0FBT1EsSUFBQUEsdUJBQVEsRUFBQ1QsTUFBTUM7UUFFdkIsS0FBSztZQUNKLE9BQU9TLElBQUFBLHlCQUFVLEVBQUNWLE1BQU1DO1FBRXpCLEtBQUs7WUFDSixPQUFPVSxJQUFBQSx3QkFBUyxFQUFDWCxNQUFNQztRQUV4QixLQUFLO1lBQ0osT0FBT1csSUFBQUEsMkJBQVksRUFBQ1osTUFBTUM7UUFFM0IsS0FBSztZQUNKLE9BQU9ZLElBQUFBLDZCQUFjLEVBQUNiLE1BQU1DO1FBRTdCLEtBQUs7WUFDSixPQUFPYSxJQUFBQSwyQkFBb0IsRUFBQ0MsSUFBQUEsYUFBUSxLQUFJZDtRQUV6QyxLQUFLO1lBQ0osT0FBT2UsSUFBQUEsbUNBQWtCLEVBQUNoQixNQUFNQztRQUVqQyxLQUFLO1lBQ0osT0FBT2dCLElBQUFBLHVDQUF3QixFQUFDakIsTUFBTUM7UUFFdkMsS0FBSztZQUNKLE9BQU9pQixJQUFBQSxzQ0FBdUIsRUFBQ2xCLE1BQU1DO1FBRXRDLEtBQUs7WUFDSixPQUFPa0IsSUFBQUEsMEJBQVMsRUFBQ25CLE1BQU1DO1FBRXhCLEtBQUs7WUFDSixPQUFPbUIsSUFBQUEsaUNBQVksRUFBQ3BCLE1BQU1DO1FBRTNCO1lBQ0MsTUFBTSxJQUFJb0IsTUFBTSxDQUFDLHlCQUF5QixFQUFFLEFBQUNyQixLQUFhRSxJQUFJLEVBQUU7SUFDbEU7QUFDRCJ9