96ed79cfc9f61046fb91fe75856c1b8c
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get cleanSubstitutions () {
        return cleanSubstitutions;
    },
    get createTypeState () {
        return createTypeState;
    },
    get flattenStatements () {
        return flattenStatements;
    },
    get freeTypeVars () {
        return freeTypeVars;
    },
    get freeTypeVarsEnv () {
        return freeTypeVarsEnv;
    },
    get freshTypeVariable () {
        return freshTypeVariable;
    },
    get freshenTypeVariables () {
        return freshenTypeVariables;
    },
    get generalize () {
        return generalize;
    },
    get instantiate () {
        return instantiate;
    },
    get loadStdlib () {
        return loadStdlib;
    }
});
const _nodefs = /*#__PURE__*/ _interop_require_wildcard(require("node:fs"));
const _nodepath = /*#__PURE__*/ _interop_require_wildcard(require("node:path"));
const _ast = require("../ast");
const _parser = require("../parser/parser");
const _lexer = require("../lexer");
const _types = require("./types");
const _substitute = require("./substitute");
const _expressiondispatcher = require("./expression-dispatcher");
const _helpers = require("./helpers");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const freshTypeVariable = (state)=>{
    const newCounter = state.counter + 1;
    const newType = (0, _ast.typeVariable)(`Î±${newCounter}`);
    // Avoid spreading the entire state object for better performance
    return [
        newType,
        {
            ...state,
            counter: newCounter
        }
    ];
};
const freeTypeVars = (type, acc = new Set())=>{
    switch(type.kind){
        case 'variable':
            acc.add(type.name);
            break;
        case 'function':
            for (const param of type.params)freeTypeVars(param, acc);
            freeTypeVars(type.return, acc);
            break;
        case 'list':
            freeTypeVars(type.element, acc);
            break;
        case 'tuple':
            for (const el of type.elements)freeTypeVars(el, acc);
            break;
        case 'record':
            Object.values(type.fields).forEach((v)=>freeTypeVars(v, acc));
            break;
        case 'union':
            type.types.forEach((t)=>freeTypeVars(t, acc));
            break;
        case 'variant':
            type.args.forEach((arg)=>freeTypeVars(arg, acc));
            break;
    }
    return acc;
};
const freeTypeVarsEnv = (env)=>{
    const acc = new Set();
    for (const scheme of env.values()){
        freeTypeVars(scheme.type, acc);
    }
    return acc;
};
const generalize = (type, env, substitution)=>{
    // Apply current substitution to the type before generalizing
    const substitutedType = (0, _substitute.substitute)(type, substitution);
    const typeVars = freeTypeVars(substitutedType);
    const envVars = freeTypeVarsEnv(env);
    const quantifiedVars = [];
    for (const varName of typeVars){
        if (!envVars.has(varName)) {
            quantifiedVars.push(varName);
        }
    }
    return {
        type: substitutedType,
        quantifiedVars
    };
};
const instantiate = (scheme, state)=>{
    const mapping = new Map();
    let currentState = state;
    for (const varName of scheme.quantifiedVars){
        const [freshVar, newState] = freshTypeVariable(currentState);
        mapping.set(varName, freshVar);
        currentState = newState;
    }
    const [instantiatedType, finalState] = freshenTypeVariables(scheme.type, mapping, currentState);
    return [
        instantiatedType,
        finalState
    ];
};
const freshenTypeVariables = (type, mapping = new Map(), state)=>{
    switch(type.kind){
        case 'variable':
            {
                const freshVar = mapping.get(type.name);
                if (freshVar) {
                    // Copy constraints from the original variable to the fresh one
                    if (freshVar.kind === 'variable') {
                        freshVar.constraints = freshVar.constraints || [];
                        if (type.constraints) {
                            for (const c of type.constraints){
                                if (!freshVar.constraints.some((existing)=>(0, _helpers.constraintsEqual)(existing, c))) {
                                    freshVar.constraints.push(c);
                                }
                            }
                        }
                    }
                    return [
                        freshVar,
                        state
                    ];
                }
                return [
                    type,
                    state
                ];
            }
        case 'function':
            {
                let currentState = state;
                const newParams = [];
                for (const param of type.params){
                    const [newParam, nextState] = freshenTypeVariables(param, mapping, currentState);
                    newParams.push(newParam);
                    currentState = nextState;
                }
                const [newReturn, finalState] = freshenTypeVariables(type.return, mapping, currentState);
                return [
                    {
                        ...type,
                        params: newParams,
                        return: newReturn
                    },
                    finalState
                ];
            }
        case 'list':
            {
                const [newElem, nextState] = freshenTypeVariables(type.element, mapping, state);
                return [
                    {
                        ...type,
                        element: newElem
                    },
                    nextState
                ];
            }
        case 'tuple':
            {
                let currentState = state;
                const newElems = [];
                for (const el of type.elements){
                    const [newEl, nextState] = freshenTypeVariables(el, mapping, currentState);
                    newElems.push(newEl);
                    currentState = nextState;
                }
                return [
                    {
                        ...type,
                        elements: newElems
                    },
                    currentState
                ];
            }
        case 'record':
            {
                let currentState = state;
                const newFields = {};
                for (const [key, fieldType] of Object.entries(type.fields)){
                    const [newField, nextState] = freshenTypeVariables(fieldType, mapping, currentState);
                    newFields[key] = newField;
                    currentState = nextState;
                }
                return [
                    {
                        ...type,
                        fields: newFields
                    },
                    currentState
                ];
            }
        case 'union':
            {
                let currentState = state;
                const newTypes = [];
                for (const t of type.types){
                    const [newType, nextState] = freshenTypeVariables(t, mapping, currentState);
                    newTypes.push(newType);
                    currentState = nextState;
                }
                return [
                    {
                        ...type,
                        types: newTypes
                    },
                    currentState
                ];
            }
        case 'variant':
            {
                let currentState = state;
                const newArgs = [];
                for (const arg of type.args){
                    const [newArg, nextState] = freshenTypeVariables(arg, mapping, currentState);
                    newArgs.push(newArg);
                    currentState = nextState;
                }
                return [
                    {
                        ...type,
                        args: newArgs
                    },
                    currentState
                ];
            }
        default:
            return [
                type,
                state
            ];
    }
};
const flattenStatements = (expr)=>{
    if (expr.kind === 'binary' && expr.operator === ';') {
        return [
            ...flattenStatements(expr.left),
            ...flattenStatements(expr.right)
        ];
    }
    return [
        expr
    ];
};
const loadStdlib = (state)=>{
    try {
        // Find stdlib.noo relative to this file
        const stdlibPath = _nodepath.join(__dirname, '..', '..', 'stdlib.noo');
        if (!_nodefs.existsSync(stdlibPath)) {
            console.warn(`Warning: stdlib.noo not found at ${stdlibPath}`);
            return state;
        }
        const stdlibContent = _nodefs.readFileSync(stdlibPath, 'utf-8');
        const lexer = new _lexer.Lexer(stdlibContent);
        const tokens = lexer.tokenize();
        const stdlibProgram = (0, _parser.parse)(tokens);
        // Flatten any semicolon-separated statements
        const allStatements = [];
        for (const statement of stdlibProgram.statements){
            allStatements.push(...flattenStatements(statement));
        }
        let currentState = state;
        for (const statement of allStatements){
            const result = (0, _expressiondispatcher.typeExpression)(statement, currentState);
            currentState = result.state;
        }
        return currentState;
    } catch (error) {
        console.warn(`Warning: Failed to load stdlib.noo:`, error);
        return state;
    }
};
const createTypeState = ()=>({
        environment: new Map(),
        substitution: new Map(),
        counter: 0,
        constraints: [],
        adtRegistry: new Map(),
        accessorCache: new Map(),
        constraintRegistry: (0, _types.createConstraintRegistry)()
    });
const cleanSubstitutions = (state)=>({
        ...state,
        substitution: new Map(),
        constraints: []
    });

//# sourceMappingURL=data:application/json;base64,