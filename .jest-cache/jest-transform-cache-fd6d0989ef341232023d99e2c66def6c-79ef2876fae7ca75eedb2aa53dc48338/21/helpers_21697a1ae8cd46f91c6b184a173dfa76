cbc1aa6d83b95e70f440a7994b337f2e
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get constraintsEqual () {
        return constraintsEqual;
    },
    get createBinaryFunctionType () {
        return createBinaryFunctionType;
    },
    get createPolymorphicBinaryFunction () {
        return createPolymorphicBinaryFunction;
    },
    get createPolymorphicUnaryFunction () {
        return createPolymorphicUnaryFunction;
    },
    get createUnaryFunctionType () {
        return createUnaryFunctionType;
    },
    get formatEffectsString () {
        return formatEffectsString;
    },
    get getExprLocation () {
        return getExprLocation;
    },
    get isTypeKind () {
        return isTypeKind;
    },
    get mapObject () {
        return mapObject;
    },
    get mapSet () {
        return mapSet;
    },
    get occursIn () {
        return occursIn;
    },
    get propagateConstraintToTypeVariable () {
        return propagateConstraintToTypeVariable;
    },
    get throwTypeError () {
        return throwTypeError;
    },
    get typeToString () {
        return typeToString;
    },
    get typesEqual () {
        return typesEqual;
    },
    get typesSimilar () {
        return typesSimilar;
    }
});
const _ast = require("../ast");
const _typeerrors = require("./type-errors");
const _substitute = require("./substitute");
const getExprLocation = (expr)=>({
        line: expr.location?.start.line || 1,
        column: expr.location?.start.column || 1
    });
function throwTypeError(errorFactory, location) {
    const loc = location || {
        line: 1,
        column: 1
    };
    throw new Error((0, _typeerrors.formatTypeError)(errorFactory(loc)));
}
function formatEffectsString(effects) {
    if (effects.size === 0) return "";
    return ` ${Array.from(effects).map((e)=>`!${e}`).join(' ')}`;
}
const createUnaryFunctionType = (paramType, returnType)=>(0, _ast.functionType)([
        paramType
    ], returnType);
const createBinaryFunctionType = (param1Type, param2Type, returnType)=>(0, _ast.functionType)([
        param1Type,
        param2Type
    ], returnType);
const createPolymorphicUnaryFunction = (paramVar, returnVar)=>(0, _ast.functionType)([
        (0, _ast.typeVariable)(paramVar)
    ], (0, _ast.typeVariable)(returnVar));
const createPolymorphicBinaryFunction = (param1Var, param2Var, returnVar)=>(0, _ast.functionType)([
        (0, _ast.typeVariable)(param1Var),
        (0, _ast.typeVariable)(param2Var)
    ], (0, _ast.typeVariable)(returnVar));
function mapObject(obj, fn) {
    const result = {};
    for(const k in obj)result[k] = fn(obj[k], k);
    return result;
}
function mapSet(map, key, value) {
    // For performance, avoid copying large maps unnecessarily
    if (map.has(key) && map.get(key) === value) {
        return map; // No change needed
    }
    const copy = new Map(map);
    copy.set(key, value);
    return copy;
}
function isTypeKind(t, kind) {
    return t.kind === kind;
}
// Cache for typesEqual to avoid repeated deep comparisons
const typesEqualCache = new Map();
const typesEqual = (t1, t2)=>{
    // Quick reference equality check
    if (t1 === t2) return true;
    if (t1.kind !== t2.kind) {
        return false;
    }
    // Simple cache for primitive/variable types
    if ((t1.kind === 'primitive' || t1.kind === 'variable') && (t2.kind === 'primitive' || t2.kind === 'variable')) {
        const key = `${t1.kind}:${t1.name}-${t2.kind}:${t2.name}`;
        let cached = typesEqualCache.get(key);
        if (cached !== undefined) return cached;
        const result = typesEqualUncached(t1, t2);
        if (typesEqualCache.size < 500) {
            typesEqualCache.set(key, result);
        }
        return result;
    }
    return typesEqualUncached(t1, t2);
};
const typesEqualUncached = (t1, t2)=>{
    switch(t1.kind){
        case "variable":
            return t1.name === t2.name;
        case "primitive":
            return t1.name === t2.name;
        case "function":
            {
                const f2 = t2;
                if (t1.params.length !== f2.params.length) {
                    return false;
                }
                return t1.params.every((param, i)=>typesEqual(param, f2.params[i])) && typesEqual(t1.return, f2.return);
            }
        case "list":
            return typesEqual(t1.element, t2.element);
        case "tuple":
            {
                const t2_tuple = t2;
                if (t1.elements.length !== t2_tuple.elements.length) {
                    return false;
                }
                return t1.elements.every((element, i)=>typesEqual(element, t2_tuple.elements[i]));
            }
        case "record":
            {
                const t2_record = t2;
                const keys1 = Object.keys(t1.fields);
                const keys2 = Object.keys(t2_record.fields);
                if (keys1.length !== keys2.length) {
                    return false;
                }
                return keys1.every((key)=>typesEqual(t1.fields[key], t2_record.fields[key]));
            }
        case "union":
            {
                const t2_union = t2;
                if (t1.types.length !== t2_union.types.length) {
                    return false;
                }
                return t1.types.every((type, i)=>typesEqual(type, t2_union.types[i]));
            }
        case "unit":
            return true;
        case "variant":
            {
                const t2_variant = t2;
                if (t1.name !== t2_variant.name) {
                    return false;
                }
                if (t1.args.length !== t2_variant.args.length) {
                    return false;
                }
                return t1.args.every((arg, i)=>typesEqual(arg, t2_variant.args[i]));
            }
        default:
            return false;
    }
};
const typesSimilar = (t1, t2)=>{
    if (t1.kind !== t2.kind) return false;
    switch(t1.kind){
        case "primitive":
            return t1.name === t2.name;
        case "variable":
            return t1.name === t2.name;
        case "function":
            {
                const t2Func = t2;
                return t1.params.length === t2Func.params.length && t1.params.every((p, i)=>typesSimilar(p, t2Func.params[i])) && typesSimilar(t1.return, t2Func.return);
            }
        case "list":
            return typesSimilar(t1.element, t2.element);
        case "record":
            {
                const t2Record = t2;
                const fields1 = Object.keys(t1.fields);
                const fields2 = Object.keys(t2Record.fields);
                return fields1.length === fields2.length && fields1.every((f)=>f in t2Record.fields && typesSimilar(t1.fields[f], t2Record.fields[f]));
            }
        case "tuple":
            {
                const t2Tuple = t2;
                return t1.elements.length === t2Tuple.elements.length && t1.elements.every((e, i)=>typesSimilar(e, t2Tuple.elements[i]));
            }
        case "union":
            {
                const t2Union = t2;
                return t1.types.length === t2Union.types.length && t1.types.every((type, i)=>typesSimilar(type, t2Union.types[i]));
            }
        default:
            return false;
    }
};
const constraintsEqual = (c1, c2)=>{
    if (c1.kind !== c2.kind || c1.typeVar !== c2.typeVar) return false;
    switch(c1.kind){
        case "is":
            return c1.constraint === c2.constraint;
        case "hasField":
            {
                const c2HasField = c2;
                return c1.field === c2HasField.field && typesSimilar(c1.fieldType, c2HasField.fieldType);
            }
        case "implements":
            return c1.interfaceName === c2.interfaceName;
        case "custom":
            return c1.constraint === c2.constraint;
        default:
            return false;
    }
};
const propagateConstraintToTypeVariable = (funcType, constraint)=>{
    if (funcType.kind !== "function") return;
    // Apply constraint to matching type variables in parameters
    for (const param of funcType.params){
        if (param.kind === "variable" && param.name === constraint.typeVar) {
            if (!param.constraints) {
                param.constraints = [];
            }
            // Check if this constraint is already present
            const existingConstraint = param.constraints.find((c)=>constraintsEqual(c, constraint));
            if (!existingConstraint) {
                param.constraints.push(constraint);
            }
        }
    }
    // Also apply to return type if it matches
    if (funcType.return.kind === "variable" && funcType.return.name === constraint.typeVar) {
        if (!funcType.return.constraints) {
            funcType.return.constraints = [];
        }
        const existingConstraint = funcType.return.constraints.find((c)=>constraintsEqual(c, constraint));
        if (!existingConstraint) {
            funcType.return.constraints.push(constraint);
        }
    }
};
const typeToString = (type, substitution = new Map(), showConstraints = true)=>{
    const greek = [
        "α",
        "β",
        "γ",
        "δ",
        "ε",
        "ζ",
        "η",
        "θ",
        "ι",
        "κ",
        "λ",
        "μ",
        "ν",
        "ξ",
        "ο",
        "π",
        "ρ",
        "σ",
        "τ",
        "υ",
        "φ",
        "χ",
        "ψ",
        "ω"
    ];
    const mapping = new Map();
    let next = 0;
    function norm(t) {
        switch(t.kind){
            case "primitive":
                return t.name;
            case "function":
                {
                    const paramStr = t.params.map(norm).join(" ");
                    const effectStr = formatEffectsString(t.effects);
                    const baseType = `(${paramStr}) -> ${norm(t.return)}${effectStr}`;
                    const constraintStr = showConstraints && t.constraints && t.constraints.length > 0 ? ` given ${t.originalConstraint ? formatConstraintExpr(t.originalConstraint) : deduplicateConstraints(t.constraints).map(formatConstraint).join(" ")}` : "";
                    return constraintStr ? `${baseType}${constraintStr}` : baseType;
                }
            case "variable":
                {
                    let varStr = "";
                    if (!mapping.has(t.name)) {
                        // If the type variable name is a single letter, keep it as-is
                        // This preserves explicit type annotations like 'a -> a'
                        if (t.name.length === 1 && /^[a-z]$/.test(t.name)) {
                            mapping.set(t.name, t.name);
                        } else {
                            mapping.set(t.name, greek[next] || `t${next}`);
                            next++;
                        }
                    }
                    // biome-ignore lint/style/noNonNullAssertion: it's set if not defined above
                    varStr = mapping.get(t.name);
                    return varStr;
                }
            case "list":
                return `List ${norm(t.element)}`;
            case "tuple":
                return `(${t.elements.map(norm).join(" ")})`;
            case "record":
                return `{ ${Object.entries(t.fields).map(([name, fieldType])=>`${name}: ${norm(fieldType)}`).join(" ")} }`;
            case "union":
                return `(${t.types.map(norm).join(" | ")})`;
            case "variant":
                if (t.args.length === 0) {
                    return t.name;
                } else {
                    return `${t.name} ${t.args.map(norm).join(" ")}`;
                }
            case "unit":
                return "unit";
            case "unknown":
                return "?";
            default:
                return "unknown";
        }
    }
    function formatConstraint(c) {
        switch(c.kind){
            case "is":
                {
                    // Use the normalized variable name for consistency
                    const normalizedVarName = mapping.get(c.typeVar) || c.typeVar;
                    return `${normalizedVarName} is ${c.constraint}`;
                }
            case "hasField":
                {
                    // For hasField constraints, we need to use the normalized variable name
                    // that matches the parameter it's constraining
                    const normalizedVarName2 = mapping.get(c.typeVar) || c.typeVar;
                    return `${normalizedVarName2} has field "${c.field}" of type ${norm(c.fieldType)}`;
                }
            case "implements":
                {
                    const normalizedVarName3 = mapping.get(c.typeVar) || c.typeVar;
                    return `${normalizedVarName3} implements ${c.interfaceName}`;
                }
            case "custom":
                {
                    const normalizedVarName4 = mapping.get(c.typeVar) || c.typeVar;
                    return `${normalizedVarName4} satisfies ${c.constraint} ${c.args.map(norm).join(" ")}`;
                }
            default:
                return "unknown constraint";
        }
    }
    function formatConstraintExpr(expr) {
        switch(expr.kind){
            case "is":
            case "hasField":
            case "implements":
            case "custom":
                return formatConstraint(expr);
            case "and":
                return `${formatConstraintExpr(expr.left)} and ${formatConstraintExpr(expr.right)}`;
            case "or":
                return `${formatConstraintExpr(expr.left)} or ${formatConstraintExpr(expr.right)}`;
            case "paren":
                return `(${formatConstraintExpr(expr.expr)})`;
            default:
                return "unknown constraint";
        }
    }
    // Helper function to deduplicate constraints
    function deduplicateConstraints(constraints) {
        const result = [];
        for (const constraint of constraints){
            const isDuplicate = result.some((c)=>constraintsEqual(c, constraint));
            if (!isDuplicate) {
                result.push(constraint);
            }
        }
        return result;
    }
    // Apply substitution to the type before normalizing
    const substitutedType = (0, _substitute.substitute)(type, substitution);
    return norm(substitutedType);
};
const occursIn = (varName, type)=>{
    switch(type.kind){
        case "variable":
            return type.name === varName;
        case "function":
            return type.params.some((param)=>occursIn(varName, param)) || occursIn(varName, type.return);
        case "list":
            return occursIn(varName, type.element);
        case "tuple":
            return type.elements.some((element)=>occursIn(varName, element));
        case "record":
            return Object.values(type.fields).some((fieldType)=>occursIn(varName, fieldType));
        case "union":
            return type.types.some((t)=>occursIn(varName, t));
        case "variant":
            return type.args.some((arg)=>occursIn(varName, arg));
        default:
            return false;
    }
};

//# sourceMappingURL=data:application/json;base64,