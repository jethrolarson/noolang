{"version":3,"sources":["/workspace/src/typer/__tests__/constraint-resolution.test.ts"],"sourcesContent":["import { \n  createConstraintRegistry, \n  addConstraintDefinition, \n  addConstraintImplementation,\n  type ConstraintSignature,\n  type ConstraintImplementation\n} from '../types';\nimport { createTypeState } from '../type-operations';\nimport { \n  tryResolveConstraintFunction,\n  decorateEnvironmentWithConstraintFunctions,\n  resolveConstraintVariable,\n  createConstraintFunctionType\n} from '../constraint-resolution';\nimport { intType, stringType, functionType, listTypeWithElement } from '../../ast';\n\ndescribe('Constraint Resolution', () => {\n  test('should resolve constraint function calls', () => {\n    const state = createTypeState();\n    \n    // Add Show constraint\n    const showSignature: ConstraintSignature = {\n      name: 'Show',\n      typeParam: 'a',\n      functions: new Map([\n        ['show', functionType([intType()], stringType())]\n      ])\n    };\n    addConstraintDefinition(state.constraintRegistry, 'Show', showSignature);\n    \n    // Add Int implementation\n    const intImpl: ConstraintImplementation = {\n      functions: new Map([\n        ['show', {\n          type: functionType([intType()], stringType()),\n          quantifiedVars: [],\n          effects: new Set()\n        }]\n      ])\n    };\n    addConstraintImplementation(state.constraintRegistry, 'Show', 'Int', intImpl);\n    \n    // Try to resolve a constraint function call\n    const argTypes = [intType()];\n    const resolution = tryResolveConstraintFunction(\n      'show',\n      [], // args expressions (not used in current implementation)\n      argTypes,\n      state\n    );\n    \n    expect(resolution.resolved).toBe(true);\n    expect(resolution.specializedName).toBe('__Show_show_Int');\n    expect(resolution.typeScheme).toBeTruthy();\n  });\n\n  test('should detect constraint variables', () => {\n    const state = createTypeState();\n    \n    // Add Show constraint\n    const showSignature: ConstraintSignature = {\n      name: 'Show',\n      typeParam: 'a',\n      functions: new Map([\n        ['show', functionType([intType()], stringType())]\n      ])\n    };\n    addConstraintDefinition(state.constraintRegistry, 'Show', showSignature);\n    \n    // Test constraint variable detection\n    const resolution = resolveConstraintVariable('show', state);\n    \n    expect(resolution.resolved).toBe(true);\n    expect(resolution.needsResolution).toBe(true);\n    expect(resolution.constraintName).toBe('Show');\n    expect(resolution.functionName).toBe('show');\n  });\n\n  test('should create constraint function types', () => {\n    const state = createTypeState();\n    \n    // Add Show constraint\n    const showSignature: ConstraintSignature = {\n      name: 'Show',\n      typeParam: 'a',\n      functions: new Map([\n        ['show', functionType([intType()], stringType())]\n      ])\n    };\n    addConstraintDefinition(state.constraintRegistry, 'Show', showSignature);\n    \n    // Create constraint function type\n    const constraintType = createConstraintFunctionType('Show', 'show', state);\n    \n    expect(constraintType.kind).toBe('function');\n    if (constraintType.kind === 'function') {\n      expect(constraintType.params).toHaveLength(1);\n      expect(constraintType.params[0]).toEqual(intType());\n      expect(constraintType.return).toEqual(stringType());\n    }\n  });\n\n  test('should decorate environment with specialized functions', () => {\n    const state = createTypeState();\n    \n    // Add Show constraint and implementation\n    const showSignature: ConstraintSignature = {\n      name: 'Show',\n      typeParam: 'a',\n      functions: new Map([\n        ['show', functionType([intType()], stringType())]\n      ])\n    };\n    addConstraintDefinition(state.constraintRegistry, 'Show', showSignature);\n    \n    const intImpl: ConstraintImplementation = {\n      functions: new Map([\n        ['show', {\n          type: functionType([intType()], stringType()),\n          quantifiedVars: [],\n          effects: new Set()\n        }]\n      ])\n    };\n    addConstraintImplementation(state.constraintRegistry, 'Show', 'Int', intImpl);\n    \n    // Decorate environment\n    const decoratedState = decorateEnvironmentWithConstraintFunctions(state);\n    \n    // Check that specialized function was added\n    const specializedName = '__Show_show_Int';\n    expect(decoratedState.environment.has(specializedName)).toBe(true);\n    \n    const specializedScheme = decoratedState.environment.get(specializedName);\n    expect(specializedScheme).toBeTruthy();\n    expect(specializedScheme?.type.kind).toBe('function');\n  });\n\n  test('should handle multiple constraints and implementations', () => {\n    const state = createTypeState();\n    \n    // Add Show constraint\n    const showSignature: ConstraintSignature = {\n      name: 'Show',\n      typeParam: 'a',\n      functions: new Map([\n        ['show', functionType([intType()], stringType())]\n      ])\n    };\n    addConstraintDefinition(state.constraintRegistry, 'Show', showSignature);\n    \n    // Add Eq constraint\n    const eqSignature: ConstraintSignature = {\n      name: 'Eq',\n      typeParam: 'a',\n      functions: new Map([\n        ['equals', functionType([intType(), intType()], stringType())]\n      ])\n    };\n    addConstraintDefinition(state.constraintRegistry, 'Eq', eqSignature);\n    \n    // Add implementations for both\n    const showImpl: ConstraintImplementation = {\n      functions: new Map([\n        ['show', {\n          type: functionType([intType()], stringType()),\n          quantifiedVars: [],\n          effects: new Set()\n        }]\n      ])\n    };\n    addConstraintImplementation(state.constraintRegistry, 'Show', 'Int', showImpl);\n    \n    const eqImpl: ConstraintImplementation = {\n      functions: new Map([\n        ['equals', {\n          type: functionType([intType(), intType()], stringType()),\n          quantifiedVars: [],\n          effects: new Set()\n        }]\n      ])\n    };\n    addConstraintImplementation(state.constraintRegistry, 'Eq', 'Int', eqImpl);\n    \n    // Test resolution for both\n    const showResolution = tryResolveConstraintFunction('show', [], [intType()], state);\n    const eqResolution = tryResolveConstraintFunction('equals', [], [intType(), intType()], state);\n    \n    expect(showResolution.resolved).toBe(true);\n    expect(showResolution.specializedName).toBe('__Show_show_Int');\n    \n    expect(eqResolution.resolved).toBe(true);\n    expect(eqResolution.specializedName).toBe('__Eq_equals_Int');\n  });\n\n  test('should fail to resolve when no implementation exists', () => {\n    const state = createTypeState();\n    \n    // Add Show constraint but no implementation\n    const showSignature: ConstraintSignature = {\n      name: 'Show',\n      typeParam: 'a',\n      functions: new Map([\n        ['show', functionType([intType()], stringType())]\n      ])\n    };\n    addConstraintDefinition(state.constraintRegistry, 'Show', showSignature);\n    \n    // Try to resolve without implementation\n    const resolution = tryResolveConstraintFunction('show', [], [intType()], state);\n    \n    expect(resolution.resolved).toBe(false);\n    expect(resolution.specializedName).toBeUndefined();\n  });\n});"],"names":["describe","test","state","createTypeState","showSignature","name","typeParam","functions","Map","functionType","intType","stringType","addConstraintDefinition","constraintRegistry","intImpl","type","quantifiedVars","effects","Set","addConstraintImplementation","argTypes","resolution","tryResolveConstraintFunction","expect","resolved","toBe","specializedName","typeScheme","toBeTruthy","resolveConstraintVariable","needsResolution","constraintName","functionName","constraintType","createConstraintFunctionType","kind","params","toHaveLength","toEqual","return","decoratedState","decorateEnvironmentWithConstraintFunctions","environment","has","specializedScheme","get","eqSignature","showImpl","eqImpl","showResolution","eqResolution","toBeUndefined"],"mappings":"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"}