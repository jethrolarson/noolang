6c01b1cc1265cdc8ed8d62b136926715
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _lexer = require("../src/lexer");
const _parser = require("../src/parser/parser");
const _typer = require("../src/typer");
const _evaluator = require("../src/evaluator");
const _helpers = require("../src/typer/helpers");
// Helper function to run Noolang code and get both value and type
const runNoolang = (code)=>{
    const lexer = new _lexer.Lexer(code);
    const tokens = lexer.tokenize();
    const ast = (0, _parser.parse)(tokens);
    const decoratedResult = (0, _typer.typeAndDecorate)(ast);
    const evaluator = new _evaluator.Evaluator();
    const result = evaluator.evaluateProgram(decoratedResult.program);
    return {
        finalValue: result.finalResult,
        finalType: decoratedResult.state ? (0, _helpers.typeToString)(decoratedResult.program.statements[decoratedResult.program.statements.length - 1].type, decoratedResult.state.substitution) : "unknown"
    };
};
(0, _globals.describe)("ADT Language Limitations", ()=>{
    (0, _globals.describe)("Multiple ADT Definitions", ()=>{
        (0, _globals.it)("should now work with map and multiple ADTs (polymorphism fixed)", ()=>{
            // This test was previously failing due to lack of polymorphism in map
            // Now that map is properly polymorphic, it should work
            (0, _globals.expect)(()=>runNoolang(`
        type Color = Red | Green | Blue;
        type Shape a = Circle a | Rectangle a a | Triangle a a a;
        colors = [Red, Green, Blue];
        shapes = [Circle 3, Rectangle 5 4];
        color_to_number = fn color => match color with (Red => 1; Green => 2; Blue => 3);
        calculate_area = fn shape => match shape with (Circle radius => radius * radius * 3; Rectangle width height => width * height; Triangle a b c => (a * b) / 2);
        color_numbers = map color_to_number colors;
        areas = map calculate_area shapes;
        color_numbers
      `)).not.toThrow();
        });
        (0, _globals.it)("should work when ADTs are used in separate programs", ()=>{
            // This demonstrates the workaround: use ADTs in separate programs
            const colorResult = runNoolang(`
        type Color = Red | Green | Blue;
        colors = [Red, Green, Blue];
        color_to_number = fn color => match color with (Red => 1; Green => 2; Blue => 3);
        color_numbers = map color_to_number colors;
        color_numbers
      `);
            (0, _globals.expect)(colorResult.finalValue).toEqual({
                tag: "list",
                values: [
                    {
                        tag: "number",
                        value: 1
                    },
                    {
                        tag: "number",
                        value: 2
                    },
                    {
                        tag: "number",
                        value: 3
                    }
                ]
            });
            const shapeResult = runNoolang(`
        type Shape a = Circle a | Rectangle a a | Triangle a a a;
        shapes = [Circle 3, Rectangle 5 4];
        calculate_area = fn shape => match shape with (Circle radius => radius * radius * 3; Rectangle width height => width * height; Triangle a b c => (a * b) / 2);
        areas = map calculate_area shapes;
        areas
      `);
            (0, _globals.expect)(shapeResult.finalValue).toEqual({
                tag: "list",
                values: [
                    {
                        tag: "number",
                        value: 27
                    },
                    {
                        tag: "number",
                        value: 20
                    }
                ]
            });
        });
        (0, _globals.it)("should work when ADTs are used sequentially without map", ()=>{
            // This shows that the issue is specifically with map + multiple ADTs
            const result = runNoolang(`
        type Color = Red | Green | Blue;
        type Shape a = Circle a | Rectangle a a | Triangle a a a;
        color_to_number = fn color => match color with (Red => 1; Green => 2; Blue => 3);
        calculate_area = fn shape => match shape with (Circle radius => radius * radius * 3; Rectangle width height => width * height; Triangle a b c => (a * b) / 2);
        color_result = color_to_number Red;
        shape_result = calculate_area (Circle 5);
        { @color color_result, @shape shape_result }
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "record",
                fields: {
                    color: {
                        tag: "number",
                        value: 1
                    },
                    shape: {
                        tag: "number",
                        value: 75
                    }
                }
            });
        });
    });
    (0, _globals.describe)("Root Cause Analysis", ()=>{
        (0, _globals.it)("should demonstrate that the type unification issue is now fixed", ()=>{
            // The issue was in the type system when it tried to unify
            // type variables that had been associated with different ADT types
            // This is now fixed with proper let-polymorphism for map
            (0, _globals.expect)(()=>runNoolang(`
        type Color = Red | Green | Blue;
        type Shape a = Circle a | Rectangle a a | Triangle a a a;
        # This works fine - no type unification issues
        colors = [Red, Green, Blue];
        shapes = [Circle 3, Rectangle 5 4];
        # This also works - separate operations
        color_to_number = fn color => match color with (Red => 1; Green => 2; Blue => 3);
        calculate_area = fn shape => match shape with (Circle radius => radius * radius * 3; Rectangle width height => width * height; Triangle a b c => (a * b) / 2);
        # This now works - map is properly polymorphic
        color_numbers = map color_to_number colors;
        areas = map calculate_area shapes;
        color_numbers
      `)).not.toThrow();
        });
    });
    (0, _globals.describe)("Workarounds", ()=>{
        (0, _globals.it)("should work with separate type definitions", ()=>{
            // Workaround 1: Define ADTs in separate programs
            const result1 = runNoolang(`
        type Color = Red | Green | Blue;
        colors = [Red, Green, Blue];
        color_to_number = fn color => match color with (Red => 1; Green => 2; Blue => 3);
        map color_to_number colors
      `);
            (0, _globals.expect)(result1.finalValue).toEqual({
                tag: "list",
                values: [
                    {
                        tag: "number",
                        value: 1
                    },
                    {
                        tag: "number",
                        value: 2
                    },
                    {
                        tag: "number",
                        value: 3
                    }
                ]
            });
        });
        (0, _globals.it)("should work with manual iteration instead of map", ()=>{
            // Workaround 2: Use manual iteration instead of map
            const result = runNoolang(`
        type Color = Red | Green | Blue;
        type Shape a = Circle a | Rectangle a a | Triangle a a a;
        color_to_number = fn color => match color with (Red => 1; Green => 2; Blue => 3);
        calculate_area = fn shape => match shape with (Circle radius => radius * radius * 3; Rectangle width height => width * height; Triangle a b c => (a * b) / 2);
        # Manual iteration instead of map
        colors = [Red, Green, Blue];
        shapes = [Circle 3, Rectangle 5 4];
        color1 = color_to_number Red;
        color2 = color_to_number Green;
        color3 = color_to_number Blue;
        shape1 = calculate_area (Circle 3);
        shape2 = calculate_area (Rectangle 5 4);
        { @colors [color1, color2, color3], @shapes [shape1, shape2] }
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "record",
                fields: {
                    colors: {
                        tag: "list",
                        values: [
                            {
                                tag: "number",
                                value: 1
                            },
                            {
                                tag: "number",
                                value: 2
                            },
                            {
                                tag: "number",
                                value: 3
                            }
                        ]
                    },
                    shapes: {
                        tag: "list",
                        values: [
                            {
                                tag: "number",
                                value: 27
                            },
                            {
                                tag: "number",
                                value: 20
                            }
                        ]
                    }
                }
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,