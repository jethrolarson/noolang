29371053f7973c5865e86a99d6255ad0
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _lexer = require("../src/lexer");
const _parser = require("../src/parser/parser");
const _evaluator = require("../src/evaluator");
const _typer = require("../src/typer");
const _helpers = require("../src/typer/helpers");
// Helper function to parse and evaluate Noolang code
const runNoolang = (source)=>{
    const lexer = new _lexer.Lexer(source);
    const tokens = lexer.tokenize();
    const program = (0, _parser.parse)(tokens);
    // Type check first
    const typeResult = (0, _typer.typeProgram)(program);
    // Then evaluate
    const evaluator = new _evaluator.Evaluator();
    const evalResult = evaluator.evaluateProgram(program);
    return {
        typeResult,
        evalResult,
        finalType: (0, _helpers.typeToString)(typeResult.type, typeResult.state.substitution),
        finalValue: evalResult.finalResult
    };
};
(0, _globals.describe)("Algebraic Data Types (ADTs)", ()=>{
    (0, _globals.describe)("Built-in Option Type", ()=>{
        (0, _globals.it)("should create Some values", ()=>{
            const result = runNoolang(`
        x = Some 42;
        x
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "constructor",
                name: "Some",
                args: [
                    {
                        tag: "number",
                        value: 42
                    }
                ]
            });
        });
        (0, _globals.it)("should create None values", ()=>{
            const result = runNoolang(`
        x = None;
        x
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "constructor",
                name: "None",
                args: []
            });
        });
        (0, _globals.it)("should pattern match on Some", ()=>{
            const result = runNoolang(`
        x = Some 21;
        result = match x with (Some y => y * 2; None => 0);
        result
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "number",
                value: 42
            });
        });
        (0, _globals.it)("should pattern match on None", ()=>{
            const result = runNoolang(`
        x = None;
        result = match x with (Some y => y * 2; None => 99);
        result
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "number",
                value: 99
            });
        });
        (0, _globals.it)("should handle nested Option values", ()=>{
            const result = runNoolang(`
        nested = Some (Some 10);
        result = match nested with (
          Some inner => match inner with (Some value => value; None => 0);
          None => -1
        );
        result
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "number",
                value: 10
            });
        });
    });
    (0, _globals.describe)("Built-in Result Type", ()=>{
        (0, _globals.it)("should create Ok values", ()=>{
            const result = runNoolang(`
        x = Ok 100;
        x
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "constructor",
                name: "Ok",
                args: [
                    {
                        tag: "number",
                        value: 100
                    }
                ]
            });
        });
        (0, _globals.it)("should create Err values", ()=>{
            const result = runNoolang(`
        x = Err "failed";
        x
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "constructor",
                name: "Err",
                args: [
                    {
                        tag: "string",
                        value: "failed"
                    }
                ]
            });
        });
        (0, _globals.it)("should pattern match on Ok", ()=>{
            const result = runNoolang(`
        x = Ok 50;
        result = match x with (Ok value => value + 10; Err msg => 0);
        result
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "number",
                value: 60
            });
        });
        (0, _globals.it)("should pattern match on Err", ()=>{
            const result = runNoolang(`
        x = Err "oops";
        result = match x with (Ok value => value; Err msg => 404);
        result
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "number",
                value: 404
            });
        });
    });
    (0, _globals.describe)("Custom ADT Definitions", ()=>{
        (0, _globals.it)("should define and use a simple ADT", ()=>{
            const result = runNoolang(`
        type Color = Red | Green | Blue;
        favorite = Red;
        favorite
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "constructor",
                name: "Red",
                args: []
            });
        });
        (0, _globals.it)("should define ADT with parameters", ()=>{
            const result = runNoolang(`
        type Point a = Point a a;
        origin = Point 0 0;
        origin
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "constructor",
                name: "Point",
                args: [
                    {
                        tag: "number",
                        value: 0
                    },
                    {
                        tag: "number",
                        value: 0
                    }
                ]
            });
        });
        (0, _globals.it)("should pattern match on custom ADTs", ()=>{
            const result = runNoolang(`
        type Color = Red | Green | Blue;
        getColorCode = fn color => match color with (
          Red => 1;
          Green => 2;
          Blue => 3
        );
        result = getColorCode Red;
        result
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "number",
                value: 1
            });
        });
        _globals.it.skip("should handle recursive ADTs", ()=>{
            // Skipped: Recursive ADTs need additional type system work for self-references
            const result = runNoolang(`
        type List a = Nil | Cons a (List a);
        myList = Cons 1 (Cons 2 Nil);
        getFirst = fn list => match list with (
          Nil => 0;
          Cons x xs => x
        );
        result = getFirst myList;
        result
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "number",
                value: 1
            });
        });
        _globals.it.skip("should handle complex pattern matching with variables", ()=>{
            // Skipped: Complex recursive pattern matching needs additional work
            const result = runNoolang(`
        type Tree a = Leaf a | Branch (Tree a) (Tree a);
        tree = Branch (Leaf 5) (Leaf 10);
        sumTree = fn t => match t with (
          Leaf value => value;
          Branch left right => (sumTree left) + (sumTree right)
        );
        result = sumTree tree;
        result
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "number",
                value: 15
            });
        });
    });
    (0, _globals.describe)("Pattern Matching Features", ()=>{
        (0, _globals.it)("should handle wildcard patterns", ()=>{
            const result = runNoolang(`
        type Maybe a = Just a | Nothing;
        getValue = fn maybe => match maybe with (
          Just x => x;
          _ => 42
        );
        result = getValue Nothing;
        result
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "number",
                value: 42
            });
        });
        (0, _globals.it)("should handle literal patterns", ()=>{
            const result = runNoolang(`type Status = Success | Error | Code Int; getStatusMessage = fn status => match status with (Success => "ok"; Error => "fail"; Code 404 => "not found"; Code x => "unknown code"); result = getStatusMessage (Code 404); result`);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "string",
                value: "not found"
            });
        });
        (0, _globals.it)("should handle nested patterns", ()=>{
            const result = runNoolang(`type Wrapper a = Wrap a; type Inner = Value Int; nested = Wrap (Value 123); extract = fn w => match w with (Wrap (Value n) => n; _ => 0); result = extract nested; result`);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "number",
                value: 123
            });
        });
    });
    (0, _globals.describe)("Type Checking", ()=>{
        (0, _globals.it)("should type check ADT constructors correctly", ()=>{
            const result = runNoolang(`
        type Option a = Some a | None;
        x = Some 42;
        x
      `);
            // Should infer that x has type Option Int
            (0, _globals.expect)(result.finalType).toMatch(/Option.*Int|variant.*Option/);
        });
        (0, _globals.it)("should enforce pattern exhaustiveness (implicit)", ()=>{
            // This should work - all patterns covered
            const result = runNoolang(`
        type Bool = True | False;
        negate = fn b => match b with (True => False; False => True);
        result = negate True;
        result
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "constructor",
                name: "False",
                args: []
            });
        });
        (0, _globals.it)("should handle polymorphic ADTs", ()=>{
            const result = runNoolang(`
        type Pair a b = Pair a b;
        p = Pair 42 "hello";
        getFirst = fn pair => match pair with (Pair x y => x);
        result = getFirst p;
        result
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "number",
                value: 42
            });
        });
    });
    (0, _globals.describe)("Error Cases", ()=>{
        (0, _globals.it)("should error on unknown constructor in patterns", ()=>{
            (0, _globals.expect)(()=>{
                runNoolang(`
          type Color = Red | Green | Blue;
          x = Red;
          match x with (Yellow => 1; Red => 2)
        `);
            }).toThrow();
        });
        (0, _globals.it)("should handle partial constructor application", ()=>{
            const result = runNoolang(`
        type Point = Point Int Int;
        p = Point 1;  # Partial application - returns (Int) -> Point
        p
      `);
            // Should return a function type since it's a partial application
            (0, _globals.expect)(result.finalType).toMatch(/Int.*Point|function/);
        });
        (0, _globals.it)("should error when no pattern matches", ()=>{
            (0, _globals.expect)(()=>{
                const evaluator = new _evaluator.Evaluator();
                const source = `
          type Color = Red | Green | Blue;
          x = Blue;
          match x with (Red => 1; Green => 2)  # Missing Blue case
        `;
                const lexer = new _lexer.Lexer(source);
                const tokens = lexer.tokenize();
                const program = (0, _parser.parse)(tokens);
                evaluator.evaluateProgram(program);
            }).toThrow("No pattern matched");
        });
    });
    (0, _globals.describe)("Integration with Built-in Functions", ()=>{
        (0, _globals.it)("should work with map and Option", ()=>{
            const result = runNoolang(`
        options = [Some 1, None, Some 3];
        extractValue = fn opt => match opt with (Some x => x; None => 0);
        result = map extractValue options;
        result
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "list",
                values: [
                    {
                        tag: "number",
                        value: 1
                    },
                    {
                        tag: "number",
                        value: 0
                    },
                    {
                        tag: "number",
                        value: 3
                    }
                ]
            });
        });
        (0, _globals.it)("should work with filter and custom ADTs", ()=>{
            const result = runNoolang(`
        type Status = Active | Inactive;
        items = [Active, Inactive, Active, Active];
        isActive = fn status => match status with (Active => True; Inactive => False);
        result = filter isActive items;
        result
      `);
            (0, _globals.expect)(result.finalValue.tag).toBe("list");
            if (result.finalValue.tag === "list") {
                (0, _globals.expect)(result.finalValue.values).toHaveLength(3);
                result.finalValue.values.forEach((item)=>{
                    (0, _globals.expect)(item).toEqual({
                        tag: "constructor",
                        name: "Active",
                        args: []
                    });
                });
            }
        });
    });
    (0, _globals.describe)("Multiple ADT Definitions", ()=>{
        (0, _globals.it)("should handle multiple ADT definitions in the same program", ()=>{
            const result = runNoolang(`
        type Color = Red | Green | Blue;
        type Shape a = Circle a | Rectangle a a | Triangle a a a;
        colors = [Red, Green, Blue];
        shapes = [Circle 3, Rectangle 5 4];
        colors
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "list",
                values: [
                    {
                        tag: "constructor",
                        name: "Red",
                        args: []
                    },
                    {
                        tag: "constructor",
                        name: "Green",
                        args: []
                    },
                    {
                        tag: "constructor",
                        name: "Blue",
                        args: []
                    }
                ]
            });
        });
        (0, _globals.it)("should handle pattern matching on different ADTs separately", ()=>{
            const result = runNoolang(`
        type Color = Red | Green | Blue;
        type Shape a = Circle a | Rectangle a a | Triangle a a a;
        color_to_number = fn color => match color with (Red => 1; Green => 2; Blue => 3);
        calculate_area = fn shape => match shape with (Circle radius => radius * radius * 3; Rectangle width height => width * height; Triangle a b c => (a * b) / 2);
        color_to_number Red
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "number",
                value: 1
            });
        });
        (0, _globals.it)("should now work with map and multiple ADTs (polymorphism fixed)", ()=>{
            // This test was previously failing due to lack of polymorphism in map
            // Now that map is properly polymorphic, it should work
            (0, _globals.expect)(()=>runNoolang(`
        type Color = Red | Green | Blue;
        type Shape a = Circle a | Rectangle a a | Triangle a a a;
        colors = [Red, Green, Blue];
        shapes = [Circle 3, Rectangle 5 4];
        color_to_number = fn color => match color with (Red => 1; Green => 2; Blue => 3);
        calculate_area = fn shape => match shape with (Circle radius => radius * radius * 3; Rectangle width height => width * height; Triangle a b c => (a * b) / 2);
        color_numbers = map color_to_number colors;
        areas = map calculate_area shapes;
        color_numbers
      `)).not.toThrow();
        });
        (0, _globals.it)("should work when ADTs are used in separate operations", ()=>{
            const result = runNoolang(`
        type Color = Red | Green | Blue;
        type Shape a = Circle a | Rectangle a a | Triangle a a a;
        colors = [Red, Green, Blue];
        color_to_number = fn color => match color with (Red => 1; Green => 2; Blue => 3);
        color_numbers = map color_to_number colors;
        color_numbers
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "list",
                values: [
                    {
                        tag: "number",
                        value: 1
                    },
                    {
                        tag: "number",
                        value: 2
                    },
                    {
                        tag: "number",
                        value: 3
                    }
                ]
            });
        });
        (0, _globals.it)("should work when shapes are processed separately", ()=>{
            const result = runNoolang(`
        type Color = Red | Green | Blue;
        type Shape a = Circle a | Rectangle a a | Triangle a a a;
        shapes = [Circle 3, Rectangle 5 4];
        calculate_area = fn shape => match shape with (Circle radius => radius * radius * 3; Rectangle width height => width * height; Triangle a b c => (a * b) / 2);
        areas = map calculate_area shapes;
        areas
      `);
            (0, _globals.expect)(result.finalValue).toEqual({
                tag: "list",
                values: [
                    {
                        tag: "number",
                        value: 27
                    },
                    {
                        tag: "number",
                        value: 20
                    }
                ]
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,