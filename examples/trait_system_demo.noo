# Trait System Demo - Comprehensive Examples

# Simplified demo - focusing on basic trait functionality without complex helper functions

# 2. BASIC IMPLEMENTATIONS
# Note: Show Float, Show String, Eq Float, and Eq String are already implemented in stdlib.noo

# 3. CONDITIONAL IMPLEMENTATIONS
# Simplified Show for List (without constraints for demo purposes)
# implement Show (List a) given a implements Show (
#   show = fn list => concat "[" (concat (joinStrings ", " (map show list)) "]")
# );

# Eq for List only if elements are comparable (simplified for demo)
# implement Eq (List a) given a implements Eq (
#   equals = fn list1 list2 => 
#     if (length list1) != (length list2) 
#     then False 
#     else listEquals list1 list2
# );

# 4. MULTIPLE FUNCTION CONSTRAINTS
constraint Ord a ( 
  compare : a -> a -> Float;
  lessThan : a -> a -> Bool;
  greaterThan : a -> a -> Bool
);

implement Ord Float (
  compare = fn a b => if a < b then -1 else if a > b then 1 else 0;
  lessThan = fn a b => a < b;
  greaterThan = fn a b => a > b
);


# 7. TYPE-DIRECTED DISPATCH EXAMPLES

# Basic usage - automatically resolves implementations
demo_basic = (
  intValue = show 42;           # Uses Show Float
  stringValue = show "hello";   # Uses Show String
  listValue = show [1, 2, 3];   # Uses Show (List a) with Show Float
  
  # Comparison examples
  intEquals = equals 1 1;       # Uses Eq Float
  stringEquals = equals "a" "a"; # Uses Eq String
  listEquals = equals [1, 2] [1, 2]; # Uses Eq (List a) with Eq Float
  
  { @intValue intValue, @stringValue stringValue, @listValue listValue }
);

# 8. HIGHER-ORDER FUNCTIONS WITH CONSTRAINTS

# Function that works with any showable type
showAndPrint = fn x => (
  result = show x;
  print result;
  result
);

# Function that works with any comparable type  
findEquals = fn target list => filter (fn x => x == target) list;

# Function that works with ordered types
sortList = fn list => list; # Would use Ord constraint for actual sorting

# 9. PIPELINE OPERATIONS WITH TRAITS

pipeline_demo = (
  numbers = [1, 2, 3, 4, 5];
  
  # Show all numbers in a list
  numberStrings = map show numbers;
  
  # Find equal numbers
  equalToThree = numbers | findEquals 3;
  
  # Chain operations
  result = numbers 
    | map (fn x => x * 2)
    | map show 
    | show;  # Show the list of strings
    
  result
);

# 10. INTEGRATION WITH EXISTING FEATURES

# With ADTs (once pattern matching is available)
type Option a = Some a | None;

# Show implementation for Option
implement Show (Option a) given a implements Show (
  show = fn opt => match opt with (
    Some x => concat "Some(" (concat (show x) ")");
    None => "None"
  )
);

# With records
person_demo = (
  person = { @name "Alice", @age 30, @city "NYC" };
  
  # If we had Show for records:
  # personString = show person;
  
  # For now, manual showing
  nameString = show (@name person);
  ageString = show (@age person);
  
  concat "Person: " (concat nameString (concat ", age " ageString))
);

# 11. ERROR HANDLING DEMONSTRATION

# This would cause a compile-time error if CustomType doesn't have Show:
# bad_show = show someCustomType;  # Error: No implementation of Show for CustomType

# 12. DEMONSTRATION OF AUTOMATIC CONSTRAINT PROPAGATION

# This function automatically gets constrained to Show a
showTwice = fn x => concat (show x) (concat " " (show x));

# This function gets constrained to Eq a  
areEqual = fn x y => equals x y;

# These work because the types have implementations
result_demo = (
  twice42 = showTwice 42;           # "42 42"
  twiceHello = showTwice "hello";   # "\"hello\" \"hello\""
  equal = areEqual 1 1;             # True
  notEqual = areEqual "a" "b";      # False
  
  { @twice42 twice42, @equal equal }
);

# 13. FINAL DEMONSTRATION - PUTTING IT ALL TOGETHER

main_demo = (
  # Create some data
  numbers = [1, 2, 3];
  strings = ["hello", "world"];
  
  # Use trait system for display
  numbersShown = show numbers;      # "[1, 2, 3]"
  stringsShown = show strings;      # "[\"hello\", \"world\"]"
  
  # Use trait system for comparison
  sameNumbers = equals numbers [1, 2, 3];  # True
  sameStrings = equals strings ["hello", "world"]; # True
  
  # Combine with higher-order functions
  allShown = map show [numbers, strings];  # Would need Show (List String)
  
  # Return a summary
  {
    @numbersShown numbersShown,
    @stringsShown stringsShown,
    @sameNumbers sameNumbers,
    @sameStrings sameStrings
  }
);

# Execute the main demo
main_demo