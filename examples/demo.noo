# Noolang Comprehensive Demo: Core Language Features

# ========================================
# 1. LITERALS AND BASIC TYPES
# ========================================
number_literal = 42;
string_literal = "Hello, Noolang!";
boolean_literal = True;
unit_literal = {};

# ========================================
# 2. FUNCTIONS AND CURRYING
# ========================================
# Basic function
identity = fn x => x;

# Curried function (Haskell-style)
add = fn a => fn b => a + b;
add_ten = add 10;
result = add_ten 5;

# Function with multiple parameters
multiply = fn a b => a * b;
product = multiply 6 7;

# ========================================
# 3. RECURSION (NEW FEATURE!)
# ========================================
# Factorial function
factorial = fn n => if n == 0 then 1 else n * (factorial (n - 1));
fact_5 = factorial 5;

# Fibonacci function
fibonacci = fn n => if n <= 1 then n else (fibonacci (n - 1)) + (fibonacci (n - 2));
fib_10 = fibonacci 10;

# ========================================
# 4. DATA STRUCTURES
# ========================================
# Lists
empty_list = [];
number_list = [1, 2, 3, 4, 5];

# Records (named fields)
person = { @name "Alice", @age 30, @city "Wonderland" };

# Accessor usage
person_name = @name person;    # Get the name field
person_age = person | @age;    # Get the age field using pipe operator

# Tuples (positional fields)
point = {10, 20};

# ========================================
# 5. CONTROL FLOW
# ========================================
# If expressions
is_even = fn n => if (n / 2) * 2 == n then True else False;
even_check = is_even 10;

# ========================================
# 6. OPERATORS AND EXPRESSIONS
# ========================================
# Arithmetic operators
arithmetic_result = 10 + 5 * 2;

# Comparison operators
comparison_result = 5 < 10;

# ========================================
# 7. PIPELINE, THRUSH, AND DOLLAR OPERATORS
# ========================================
# Thrush operator (|) - function application
thrush_result = [1, 2, 3, 4, 5] | map (fn x => x * 2);

# Pipeline operator (|>) - function composition
add_one = fn x => x + 1;
square = fn x => x * x;
composed = add_one |> square;
pipeline_result = 10 | composed;

# Dollar operator ($) - low-precedence function application
# Useful for avoiding parentheses in complex expressions
# Without $ - lots of parentheses needed
complex_without_dollar = map (fn x => x * 2) (filter (fn x => x > 5) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);

# With $ - much cleaner and more readable
# complex_with_dollar = map (fn x => x * 2) $ filter (fn x => x > 5) $ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

# ========================================
# 8. MUTATION (LOCAL MUTATION)
# ========================================
# Mutable variables
mutation_demo = (
  mut counter = 0;
  mut! counter = counter + 1;
  counter
);

# ========================================
# 9. BUILT-IN FUNCTIONS
# ========================================
# List operations
head_result = head [1, 2, 3, 4, 5];
length_result = length [1, 2, 3, 4, 5];

# Higher-order functions
mapped = map (fn x => x * x) [1, 2, 3, 4, 5];
filtered = filter (fn x => x > 10) mapped;

# ========================================
# 10. TYPE CONSTRAINT SYSTEM (NEW FEATURE!)
# ========================================

# ========================================
# 10.1 BASIC CONSTRAINT SYSTEM
# ========================================

# Built-in functions carry automatic constraints
# head function: (List a) -> a given a is Collection
head_with_constraint = head [1, 2, 3, 4, 5];

# tail function: (List a) -> List a given a is Collection
tail_with_constraint = tail [1, 2, 3, 4, 5];

# length function: (List a) -> Int given a is Collection
length_with_constraint = length [1, 2, 3, 4, 5];

# ========================================
# 10.2 CONSTRAINT PROPAGATION
# ========================================

id = fn x => x;

# Function composition preserves constraints
compose = fn f g => fn x => f (g x);

# head has constraint: a is Collection
# compose preserves this constraint automatically
safeHead = compose head id;

# This works because list satisfies Collection constraint
safe_head_result = safeHead [1, 2, 3, 4, 5];

# ========================================
# 10.3 CONSTRAINT VALIDATION
# ========================================

# Records also satisfy Collection constraint
record_person = { @name "Bob", @age 25, @city "Metropolis" };

# Accessors work with any record having the required field
record_name = @name record_person;
record_age = record_person | @age;

# ========================================
# 10.4 LIST OPERATIONS WITH CONSTRAINTS
# ========================================

# All list operations require Collection constraint
numbers_for_constraints = [10, 20, 30, 40, 50];

# These work because List Int satisfies Collection constraint
first_number = head numbers_for_constraints;
rest_numbers = tail numbers_for_constraints;
count_numbers = length numbers_for_constraints;

# ========================================
# 10.5 FUNCTION COMPOSITION WITH CONSTRAINTS
# ========================================

# Create safe list operations that preserve constraints
safeTail = compose tail id;
safeLength = compose length id;

# These work because constraints are preserved through composition
composed_first = safeHead numbers_for_constraints;
composed_rest = safeTail numbers_for_constraints;
composed_count = safeLength numbers_for_constraints;

# ========================================
# 10.6 CONSTRAINT EXAMPLES WITH DIFFERENT TYPES
# ========================================

# String lists work (List String satisfies Collection constraint)
string_list = ["hello", "world", "noolang"];
first_string = head string_list;
string_count = length string_list;

# Record lists work too (Record satisfies Collection)
record_list = [
  { @name "Alice", @age 30 },
  { @name "Bob", @age 25 },
  { @name "Charlie", @age 35 }
];
first_record = head record_list;
record_count = length record_list;

# ========================================
# 11. ALGEBRAIC DATA TYPES (ADTs) - NEW FEATURE!
# ========================================

# ========================================
# 11.1 BUILT-IN OPTION TYPE
# ========================================

# Option type for handling nullable values safely
safe_divide = fn a b => if b == 0 then None else Some (a / b);
division_result = safe_divide 10 2;
zero_division = safe_divide 10 0;

# Pattern matching on Option
handle_option = fn opt => match opt with (
  Some value => value * 2;
  None => 0
);

safe_result = handle_option division_result;
zero_result = handle_option zero_division;

# ========================================
# 11.2 BUILT-IN RESULT TYPE
# ========================================

# Result type for error handling
parse_number = fn str => if str == "42" then Ok 42 else Err "Invalid number";
valid_parse = parse_number "42";
invalid_parse = parse_number "abc";

# Pattern matching on Result
handle_result = fn res => match res with (
  Ok value => value + 10;
  Err msg => 0
);

valid_result = handle_result valid_parse;
invalid_result = handle_result invalid_parse;

# ========================================
# 11.3 CUSTOM ADT DEFINITIONS
# ========================================

# Simple enum-like ADT
type Color = Red | Green | Blue;
favorite_color = Red;

# Pattern matching on custom ADT
color_to_number = fn color => match color with (
  Red => 1;
  Green => 2;
  Blue => 3
);

color_value = color_to_number favorite_color;

# ADT with parameters
type Point a = Point a a;
origin = Point 0 0;
float_point = Point 1.5 2.7;

# Pattern matching with parameter extraction
get_x = fn point => match point with (Point x y => x);
get_y = fn point => match point with (Point x y => y);

origin_x = get_x origin;
float_y = get_y float_point;

# ========================================
# 11.4 ADT PATTERN MATCHING FEATURES
# ========================================

# Multiple constructor ADT
type Shape a = Circle a | Rectangle a a | Triangle a a a;

circle = Circle 5;
rectangle = Rectangle 10 20;
triangle = Triangle 3 4 5;

# Pattern matching with multiple patterns
calculate_area = fn shape => match shape with (
  Circle radius => radius * radius * 3;
  Rectangle width height => width * height;
  Triangle a b c => (a * b) / 2
);

circle_area = calculate_area circle;
rectangle_area = calculate_area rectangle;
triangle_area = calculate_area triangle;

# ========================================
# 11.5 ADT INTEGRATION WITH EXISTING FEATURES
# ========================================

# Using ADTs with higher-order functions
shapes = [Circle 3, Rectangle 5 4, Triangle 2 3 4];
areas = map calculate_area shapes;

# Using ADTs with constraint system
colors = [Red, Green, Blue, Red];
color_numbers = map color_to_number colors;

# Combining Option with other features
options = [Some 1, None, Some 3, Some 4];
extract_or_zero = fn opt => match opt with (Some x => x; None => 0);
values = map extract_or_zero options;

# ========================================
# 12. FINAL DEMONSTRATION
# ========================================
# Showcase all features working together
final_demo_with_adts = {
  @factorial factorial 5,
  @fibonacci fibonacci 10,
  @person person,
  @mapped mapped,
  @head head_result,
  @constraint_demo {
    @head_with_constraint head_with_constraint,
    @safe_head_result safe_head_result,
    @record_name record_name,
    @first_string first_string,
    @first_record first_record
  },
  @adt_demo {
    @option_safe_result safe_result,
    @option_zero_result zero_result,
    @result_valid valid_result,
    @result_invalid invalid_result,
    @color_value color_value,
    @point_coordinates { @x origin_x, @y float_y },
    @shape_areas { @circle circle_area, @rectangle rectangle_area, @triangle triangle_area },
    @computed_areas areas,
    @color_mappings color_numbers,
    @option_values values
  }
};

# Final expression to evaluate and return  
final_demo_with_adts 