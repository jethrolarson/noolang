# Trait System Phase 2 Demo
# This demonstrates the working nominal trait system in Noolang

print "=== Trait System Phase 2 Demo ===";

# 1. DEFINE FUNDAMENTAL TRAITS

# Functor trait for mappable containers
constraint Functor f ( map: (a -> b) -> f a -> f b );

# Show trait for displaying values
constraint Show a ( show: a -> String );

# Eq trait for equality comparison
constraint Eq a ( eq: a -> a -> Bool );

print "✓ Defined Functor, Show, and Eq traits";

# 2. IMPLEMENT TRAITS FOR BASIC TYPES

# Show for Int
implement Show Int ( show = toString );

# Show for String  
implement Show String ( show = fn s => "\"" ++ s ++ "\"" );

# Eq for Int
implement Eq Int ( eq = fn x y => x == y );

print "✓ Implemented Show and Eq for basic types";

# 3. IMPLEMENT TRAITS FOR OPTION

# Show for Option
implement Show (Option a) ( show = fn opt => case opt { Some x -> "Some(" ++ show x ++ ")"; None -> "None" } );

# Eq for Option
implement Eq (Option a) ( eq = fn opt1 opt2 => case opt1 { Some x -> case opt2 { Some y -> eq x y; None -> False }; None -> case opt2 { Some _ -> False; None -> True } } );

# Functor for Option
implement Functor Option ( map = fn f opt => case opt { Some x -> Some (f x); None -> None } );

print "✓ Implemented Show, Eq, and Functor for Option";

# 4. DEMONSTRATE TRAIT FUNCTION DISPATCH

print "\n=== Testing Trait Function Dispatch ===";

# Basic Show examples
int_str = show 42;
print ("show 42 = " ++ int_str);

string_str = show "hello";
print ("show \"hello\" = " ++ string_str);

# Option Show examples
some_str = show (Some 123);
print ("show (Some 123) = " ++ some_str);

none_str = show None;
print ("show None = " ++ none_str);

# Eq examples
eq_result1 = eq 5 5;
print ("eq 5 5 = " ++ show eq_result1);

eq_result2 = eq 5 3;
print ("eq 5 3 = " ++ show eq_result2);

eq_result3 = eq (Some 1) (Some 1);
print ("eq (Some 1) (Some 1) = " ++ show eq_result3);

eq_result4 = eq (Some 1) None;
print ("eq (Some 1) None = " ++ show eq_result4);

# 5. THE KEY DEMO: FUNCTOR MAP WITH OPTIONS

print "\n=== The Key Demo: Functor map ===";

# Helper functions
increment = fn x => x + 1;
double = fn x => x * 2;

# This is what Phase 2 was designed to achieve!
result1 = map increment (Some 1);
print ("map increment (Some 1) = " ++ show result1);

result2 = map increment None;
print ("map increment None = " ++ show result2);

result3 = map double (Some 5);
print ("map double (Some 5) = " ++ show result3);

# Chaining trait function calls
result4 = map double (map increment (Some 3));
print ("map double (map increment (Some 3)) = " ++ show result4);

# 6. COMPLEX EXAMPLE WITH PARTIAL APPLICATION

print "\n=== Advanced: Partial Application ===";

# Partial application of trait functions
mapIncrement = map increment;
mapDouble = map double;

result5 = mapIncrement (Some 10);
print ("mapIncrement (Some 10) = " ++ show result5);

result6 = mapDouble (Some 7);
print ("mapDouble (Some 7) = " ++ show result6);

print "\n=== Trait System Phase 2 Demo Complete! ===";
print "✓ All trait function dispatch working correctly";
print "✓ map increment (Some 1) works as intended";
print "✓ Phase 2 implementation successful!";