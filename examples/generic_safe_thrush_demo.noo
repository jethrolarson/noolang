# Generic Safe Thrush Operator (|?) Demo
# Demonstrating that |? now works with ANY monad type, not just Option!

print "=== Safe Thrush Operator: Now Truly Generic! ===";

# Option monad examples
print "\n--- Option Monad Examples ---";
val1 = Some 5 |? (fn x => x * 2);
print "Some 5 |? (*2) = "; print val1;

val2 = None |? (fn x => x * 2);
print "None |? (*2) = "; print val2;

# Result monad examples  
print "\n--- Result Monad Examples ---";
val3 = Ok 5 |? (fn x => x * 2);
print "Ok 5 |? (*2) = "; print val3;

val4 = Err "failed" |? (fn x => x * 2);
print "Err \"failed\" |? (*2) = "; print val4;

# Monadic bind behavior (no double-wrapping)
print "\n--- Monadic Bind Behavior ---";
val5 = Some 5 |? (fn x => if (x > 0) then (Some (x + 10)) else None);
print "Some 5 |? (monadic fn) = "; print val5;

val6 = Ok 5 |? (fn x => if (x > 0) then (Ok (x + 10)) else (Err "negative"));
print "Ok 5 |? (monadic fn) = "; print val6;

val7 = Ok (-1) |? (fn x => if (x > 0) then (Ok (x + 10)) else (Err "negative"));
print "Ok (-1) |? (monadic fn) = "; print val7;

# Chaining operations
print "\n--- Chaining Multiple Operations ---";
val8 = Some 5 |? (fn x => x + 1) |? (fn x => x * 3) |? (fn x => x - 2);
print "Some 5 |? (+1) |? (*3) |? (-2) = "; print val8;

val9 = Ok 5 |? (fn x => x + 1) |? (fn x => x * 3) |? (fn x => x - 2);
print "Ok 5 |? (+1) |? (*3) |? (-2) = "; print val9;

print "\n=== The |? operator is now constraint-system based! ===";
print "✓ Works with Option, Result, and any future monad types";
print "✓ No hardcoded constructor names in TypeScript";
print "✓ Uses proper constraint resolution";
print "✓ Supports true monadic bind semantics";

# Comparison with the old approach
print "\n--- Before vs After ---";
print "BEFORE: Hardcoded for Option only";
print "AFTER: Generic for ANY monad via constraints";
print "SUCCESS: |? operator is now truly generic!";