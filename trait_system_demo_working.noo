# Noolang Trait System - Full Working Demo

# Define Show constraint for string conversion
constraint Show a ( show : a -> String );

# Implement Show for basic types
implement Show Int ( show = toString );
implement Show String ( show = fn s => concat "\"" (concat s "\"") );

# Define Eq constraint for equality testing  
constraint Eq a ( equals : a -> a -> Bool; notEquals : a -> a -> Bool );

# Implement Eq for basic types
implement Eq Int ( 
  equals = fn a b => a == b;
  notEquals = fn a b => not (a == b)
);

implement Eq String (
  equals = fn a b => a == b;
  notEquals = fn a b => not (a == b)
);

# Demonstrate type-directed dispatch
demo_show = (
  int_demo = show 42;              # Uses Show Int implementation
  string_demo = show "hello";      # Uses Show String implementation
  
  {
    @int_demo int_demo,
    @string_demo string_demo
  }
);

demo_eq = (
  int_eq = equals 1 1;             # Uses Eq Int implementation
  int_neq = notEquals 1 2;         # Uses Eq Int implementation
  string_eq = equals "a" "a";      # Uses Eq String implementation
  string_neq = notEquals "a" "b";  # Uses Eq String implementation
  
  {
    @int_eq int_eq,
    @int_neq int_neq,
    @string_eq string_eq,
    @string_neq string_neq
  }
);

# Combine everything
{
  @title "Noolang Trait System Demo",
  @show_examples demo_show,
  @eq_examples demo_eq
}