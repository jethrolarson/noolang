# Complex benchmark - focused trait system test
# Exercises the core trait system features that are confirmed working

# Basic map operations with different types
list_map_result = map (fn x => x * 2) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
option_map_some = map (fn x => x + 10) (Some 42);
option_map_none = map (fn x => x + 10) None;

# Show trait operations with confirmed working types
show_int = show 42;
show_string = show "hello";
show_bool = show True;

# Nested map operations
nested_lists = map (fn inner_list => map (fn x => x + 1) inner_list) [[1, 2, 3], [4, 5, 6], [7, 8, 9]];

# Higher-order function using traits  
multiply_by = fn factor => fn list => map (fn x => x * factor) list;

# Chain map and show operations
squared_numbers = map (fn x => x * x) [1, 2, 3, 4, 5];
chain_result = map (fn x => show x) squared_numbers;

# Records (basic language feature, not trait-specific)
test_record = {@value 42, @name "test", @active True};
record_access = (@value test_record);

# Map over record values
record_ops = map (fn x => x + 1) [(@value test_record), 10, 20];

# Constraint resolution stress test
deep_map = map (fn outer_list => 
  map (fn inner_list => 
    map (fn x => x * 2) inner_list
  ) outer_list
) [[[1, 2], [3, 4]], [[5, 6], [7, 8]]];

{
  @list_map list_map_result,
  @option_some option_map_some,
  @option_none option_map_none,
  @show_int show_int,
  @show_string show_string,
  @show_bool show_bool,
  @nested nested_lists,
  @multiply multiply_by 3 [1, 2, 3, 4, 5],
  @chained chain_result,
  @record_val record_access,
  @record_ops record_ops,
  @deep_map deep_map
}