# Complex benchmark - heavy type inference and trait system usage

# Test trait system with complex operations
trait_map_test = map (fn x => x * 2) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

# Complex nested function with heavy type inference
complex_fn = fn x =>
  (fn a =>
    (fn b =>
      (fn c =>
        map c [1, 2, 3, 4, 5]
      ) (fn z => b z + a)
    ) (fn y => a * y)
  ) (x + 1);

# Multiple trait calls in sequence
option_tests = [
  map (fn x => x + 1) (Some 42),
  map (fn x => x * 2) (Some 21),
  map (fn x => x - 5) None
];

# Heavy constraint propagation with records
make_record = fn x y z =>
  {@a x, @b y, @c z, @computed x + y * z};

# Test trait system with record operations
records = map (fn i => make_record i (i * 2) (i * 3)) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

# Complex expression with multiple trait interactions
nested_computation = map (fn record =>
  {@original record, @doubled map (fn x => x * 2) [(@a record), (@b record), (@c record)]}
) records;

# Test Show trait with various types
show_tests = [
  show 42,
  show "hello",
  show True,
  show (Some 123)
];

# Multiple trait constraints in one expression
combined_test = map show (map (fn x => Some x) [1, 2, 3, 4, 5]);

{
  @trait_map trait_map_test,
  @complex_result complex_fn 10,
  @option_tests option_tests,
  @records records,
  @nested nested_computation,
  @show_tests show_tests,
  @combined combined_test
}