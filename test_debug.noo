# Trait System Demo - Comprehensive Examples

# 1. SIMPLE CONSTRAINT DEFINITIONS
constraint Show a ( show : a -> String );
constraint Eq a ( equals : a -> a -> Bool );

# 2. BASIC IMPLEMENTATIONS
implement Show Int ( show = intToString );
implement Show String ( show = fn s => "\"" + s + "\"" );
implement Eq Int ( equals = fn a b => a == b );
implement Eq String ( equals = fn a b => a == b );

# 3. CONDITIONAL IMPLEMENTATIONS
# Show for List only if elements are showable
implement Show (List a) given Show a (
  show = fn list => "[" + (joinStrings ", " (map show list)) + "]"
);

# Eq for List only if elements are comparable
implement Eq (List a) given Eq a (
  equals = fn list1 list2 => 
    if (length list1) != (length list2) 
    then False 
    else listEquals list1 list2
);
